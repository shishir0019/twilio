{
  "version": 3,
  "sources": ["../../events/events.js", "../../@twilio/voice-sdk/lib/twilio/backoff.ts", "../../loglevel/lib/loglevel.js", "../../@twilio/voice-sdk/lib/twilio/errors/twilioError.ts", "../../@twilio/voice-sdk/lib/twilio/errors/generated.ts", "../../@twilio/voice-sdk/lib/twilio/errors/index.ts", "../../@twilio/voice-sdk/lib/twilio/constants.ts", "../../@twilio/voice-sdk/lib/twilio/log.ts", "../../@twilio/voice-sdk/lib/twilio/outputdevicecollection.ts", "../../@twilio/voice-sdk/lib/twilio/shims/mediadeviceinfo.ts", "../../@twilio/voice-sdk/lib/twilio/util.ts", "../../@twilio/voice-sdk/lib/twilio/audiohelper.ts", "../../@twilio/voice-sdk/lib/twilio/audioprocessoreventobserver.ts", "../../@twilio/voice-sdk/lib/twilio/dialtonePlayer.ts", "../../@twilio/voice-sdk/lib/twilio/request.ts", "../../@twilio/voice-sdk/lib/twilio/eventpublisher.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/mockrtcstatsreport.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/stats.ts", "../../@twilio/voice-sdk/lib/twilio/preflight/preflight.ts", "../../@twilio/voice-sdk/lib/twilio/wstransport.ts", "../../@twilio/voice-sdk/lib/twilio/pstream.ts", "../../@twilio/voice-sdk/lib/twilio/regions.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/sdp.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/rtcpc.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/peerconnection.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/index.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/getusermedia.ts", "../../@twilio/voice-sdk/lib/twilio/sid.ts", "../../@twilio/voice-sdk/lib/twilio/deferred.ts", "../../@twilio/voice-sdk/lib/twilio/asyncQueue.ts", "../../@twilio/voice-sdk/lib/twilio/audioplayer/deferred.ts", "../../@twilio/voice-sdk/lib/twilio/audioplayer/eventtarget.ts", "../../@twilio/voice-sdk/lib/twilio/audioplayer/audioplayer.ts", "../../@twilio/voice-sdk/lib/twilio/sound.ts", "../../@twilio/voice-sdk/lib/twilio/device.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/icecandidate.ts", "../../@twilio/voice-sdk/lib/twilio/rtc/mos.ts", "../../@twilio/voice-sdk/lib/twilio/statsMonitor.ts", "../../@twilio/voice-sdk/lib/twilio/call.ts", "../../@twilio/voice-sdk/lib/twilio.ts"],
  "sourcesContent": ["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n", "// @ts-nocheck\n// NOTE (csantos): This file was taken directly from twilio-video and has been renamed from JS to TS only.\n// It needs to be re-written as part of the overall updating of the files to TS.\nimport { EventEmitter } from 'events';\n\nclass Backoff extends EventEmitter {\n  /**\n   * Construct a {@link Backoff}.\n   * @param {object} options\n   * @property {number} min - Initial timeout in milliseconds [100]\n   * @property {number} max - Max timeout [10000]\n   * @property {boolean} jitter - Apply jitter [0]\n   * @property {number} factor - Multiplication factor for Backoff operation [2]\n   */\n  constructor(options) {\n    super();\n    Object.defineProperties(this, {\n      _attempts: {\n        value: 0,\n        writable: true,\n      },\n      _duration: {\n        enumerable: false,\n        get() {\n          let ms = this._min * Math.pow(this._factor, this._attempts);\n          if (this._jitter) {\n            const rand =  Math.random();\n            const deviation = Math.floor(rand * this._jitter * ms);\n            // tslint:disable-next-line\n            ms = (Math.floor(rand * 10) & 1) === 0  ? ms - deviation : ms + deviation;\n          }\n          // tslint:disable-next-line\n          return Math.min(ms, this._max) | 0;\n        },\n      },\n      _factor: { value: options.factor || 2 },\n      _jitter: { value: options.jitter > 0 && options.jitter <= 1 ? options.jitter : 0 },\n      _max: { value: options.max || 10000 },\n      _min: { value: options.min || 100 },\n      _timeoutID: {\n        value: null,\n        writable: true,\n      },\n    });\n  }\n\n  backoff() {\n    const duration = this._duration;\n    if (this._timeoutID) {\n      clearTimeout(this._timeoutID);\n      this._timeoutID = null;\n    }\n\n    this.emit('backoff', this._attempts, duration);\n    this._timeoutID = setTimeout(() => {\n      this.emit('ready', this._attempts, duration);\n      this._attempts++;\n    }, duration);\n  }\n\n  reset() {\n    this._attempts = 0;\n    if (this._timeoutID) {\n      clearTimeout(this._timeoutID);\n      this._timeoutID = null;\n    }\n  }\n}\n\nexport default Backoff;\n", "/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n", "/**\n * Base class for all possible errors that the library can receive from the\n * Twilio backend.\n */\nexport default class TwilioError extends Error {\n  /**\n   * A list of possible causes for the Error.\n   */\n  causes: string[];\n\n  /**\n   * The numerical code associated with this Error.\n   */\n  code: number;\n\n  /**\n   * A description of what the Error means.\n   */\n  description: string;\n\n  /**\n   * An explanation of when the Error may be observed.\n   */\n  explanation: string;\n\n  /**\n   * Any further information discovered and passed along at run-time.\n   */\n  message: string;\n\n  /**\n   * The name of this Error.\n   */\n  name: string;\n\n  /**\n   * The original error object received from the external system, if any.\n   */\n  originalError?: object;\n\n  /**\n   * A list of potential solutions for the Error.\n   */\n  solutions: string[];\n\n  /**\n   * @internal\n   */\n  constructor(messageOrError?: string | Error | object, error?: Error | object) {\n    super();\n    Object.setPrototypeOf(this, TwilioError.prototype);\n\n    const message: string = typeof messageOrError === 'string'\n      ? messageOrError\n      : this.explanation;\n\n    const originalError: Error | object | undefined = typeof messageOrError === 'object'\n      ? messageOrError\n      : error;\n\n    this.message = `${this.name} (${this.code}): ${message}`;\n    this.originalError = originalError;\n  }\n}\n", "/* tslint:disable max-classes-per-file max-line-length */\n/**\n * This is a generated file. Any modifications here will be overwritten. See scripts/errors.js.\n */\nimport TwilioError from './twilioError';\nexport { TwilioError };\n\nexport namespace AuthorizationErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class AccessTokenInvalid extends TwilioError {\n    causes: string[] = [];\n    code: number = 20101;\n    description: string = 'Invalid access token';\n    explanation: string = 'Twilio was unable to validate your Access Token';\n    name: string = 'AccessTokenInvalid';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.AccessTokenInvalid.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class AccessTokenExpired extends TwilioError {\n    causes: string[] = [];\n    code: number = 20104;\n    description: string = 'Access token expired or expiration date invalid';\n    explanation: string = 'The Access Token provided to the Twilio API has expired, the expiration time specified in the token was invalid, or the expiration time specified was too far in the future';\n    name: string = 'AccessTokenExpired';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.AccessTokenExpired.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class AuthenticationFailed extends TwilioError {\n    causes: string[] = [];\n    code: number = 20151;\n    description: string = 'Authentication Failed';\n    explanation: string = 'The Authentication with the provided JWT failed';\n    name: string = 'AuthenticationFailed';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.AuthenticationFailed.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace SignatureValidationErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class AccessTokenSignatureValidationFailed extends TwilioError {\n    causes: string[] = [\n      'The access token has an invalid Account SID, API Key, or API Key Secret.',\n    ];\n    code: number = 31202;\n    description: string = 'Signature validation failed.';\n    explanation: string = 'The provided access token failed signature validation.';\n    name: string = 'AccessTokenSignatureValidationFailed';\n    solutions: string[] = [\n      'Ensure the Account SID, API Key, and API Key Secret are valid when generating your access token.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, SignatureValidationErrors.AccessTokenSignatureValidationFailed.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace ClientErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class BadRequest extends TwilioError {\n    causes: string[] = [];\n    code: number = 31400;\n    description: string = 'Bad Request (HTTP/SIP)';\n    explanation: string = 'The request could not be understood due to malformed syntax.';\n    name: string = 'BadRequest';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, ClientErrors.BadRequest.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class NotFound extends TwilioError {\n    causes: string[] = [\n      'The outbound call was made to an invalid phone number.',\n      'The TwiML application sid is missing a Voice URL.',\n    ];\n    code: number = 31404;\n    description: string = 'Not Found (HTTP/SIP)';\n    explanation: string = 'The server has not found anything matching the request.';\n    name: string = 'NotFound';\n    solutions: string[] = [\n      'Ensure the phone number dialed is valid.',\n      'Ensure the TwiML application is configured correctly with a Voice URL link.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, ClientErrors.NotFound.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class TemporarilyUnavailable extends TwilioError {\n    causes: string[] = [];\n    code: number = 31480;\n    description: string = 'Temporarily Unavailable (SIP)';\n    explanation: string = 'The callee is currently unavailable.';\n    name: string = 'TemporarilyUnavailable';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, ClientErrors.TemporarilyUnavailable.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class BusyHere extends TwilioError {\n    causes: string[] = [];\n    code: number = 31486;\n    description: string = 'Busy Here (SIP)';\n    explanation: string = 'The callee is busy.';\n    name: string = 'BusyHere';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, ClientErrors.BusyHere.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace SIPServerErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class Decline extends TwilioError {\n    causes: string[] = [];\n    code: number = 31603;\n    description: string = 'Decline (SIP)';\n    explanation: string = 'The callee does not wish to participate in the call.';\n    name: string = 'Decline';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, SIPServerErrors.Decline.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace GeneralErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class UnknownError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31000;\n    description: string = 'Unknown Error';\n    explanation: string = 'An unknown error has occurred. See error details for more information.';\n    name: string = 'UnknownError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, GeneralErrors.UnknownError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ApplicationNotFoundError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31001;\n    description: string = 'Application Not Found';\n    explanation: string = '';\n    name: string = 'ApplicationNotFoundError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, GeneralErrors.ApplicationNotFoundError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ConnectionDeclinedError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31002;\n    description: string = 'Connection Declined';\n    explanation: string = '';\n    name: string = 'ConnectionDeclinedError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, GeneralErrors.ConnectionDeclinedError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ConnectionTimeoutError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31003;\n    description: string = 'Connection Timeout';\n    explanation: string = 'The server could not produce a response within a suitable amount of time.';\n    name: string = 'ConnectionTimeoutError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, GeneralErrors.ConnectionTimeoutError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ConnectionError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31005;\n    description: string = 'Connection error';\n    explanation: string = 'A connection error occurred during the call';\n    name: string = 'ConnectionError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, GeneralErrors.ConnectionError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class CallCancelledError extends TwilioError {\n    causes: string[] = [\n      'The incoming call was cancelled because it was not answered in time or it was accepted/rejected by another application instance registered with the same identity.',\n    ];\n    code: number = 31008;\n    description: string = 'Call cancelled';\n    explanation: string = 'Unable to answer because the call has ended';\n    name: string = 'CallCancelledError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, GeneralErrors.CallCancelledError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class TransportError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31009;\n    description: string = 'Transport error';\n    explanation: string = 'No transport available to send or receive messages';\n    name: string = 'TransportError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, GeneralErrors.TransportError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace MalformedRequestErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class MalformedRequestError extends TwilioError {\n    causes: string[] = [\n      'Invalid content or MessageType passed to sendMessage method.',\n    ];\n    code: number = 31100;\n    description: string = 'The request had malformed syntax.';\n    explanation: string = 'The request could not be understood due to malformed syntax.';\n    name: string = 'MalformedRequestError';\n    solutions: string[] = [\n      'Ensure content and MessageType passed to sendMessage method are valid.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MalformedRequestErrors.MalformedRequestError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class MissingParameterArrayError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31101;\n    description: string = 'Missing parameter array in request';\n    explanation: string = '';\n    name: string = 'MissingParameterArrayError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MalformedRequestErrors.MissingParameterArrayError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class AuthorizationTokenMissingError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31102;\n    description: string = 'Authorization token missing in request.';\n    explanation: string = '';\n    name: string = 'AuthorizationTokenMissingError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MalformedRequestErrors.AuthorizationTokenMissingError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class MaxParameterLengthExceededError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31103;\n    description: string = 'Maximum parameter length has been exceeded.';\n    explanation: string = 'Length of parameters cannot exceed MAX_PARAM_LENGTH.';\n    name: string = 'MaxParameterLengthExceededError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MalformedRequestErrors.MaxParameterLengthExceededError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class InvalidBridgeTokenError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31104;\n    description: string = 'Invalid bridge token';\n    explanation: string = '';\n    name: string = 'InvalidBridgeTokenError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MalformedRequestErrors.InvalidBridgeTokenError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class InvalidClientNameError extends TwilioError {\n    causes: string[] = [\n      'Client name contains invalid characters.',\n    ];\n    code: number = 31105;\n    description: string = 'Invalid client name';\n    explanation: string = 'Client name should not contain control, space, delims, or unwise characters.';\n    name: string = 'InvalidClientNameError';\n    solutions: string[] = [\n      'Make sure that client name does not contain any of the invalid characters.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MalformedRequestErrors.InvalidClientNameError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ReconnectParameterInvalidError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31107;\n    description: string = 'The reconnect parameter is invalid';\n    explanation: string = '';\n    name: string = 'ReconnectParameterInvalidError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MalformedRequestErrors.ReconnectParameterInvalidError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace AuthorizationErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class AuthorizationError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31201;\n    description: string = 'Authorization error';\n    explanation: string = 'The request requires user authentication. The server understood the request, but is refusing to fulfill it.';\n    name: string = 'AuthorizationError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.AuthorizationError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class NoValidAccountError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31203;\n    description: string = 'No valid account';\n    explanation: string = '';\n    name: string = 'NoValidAccountError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.NoValidAccountError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class InvalidJWTTokenError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31204;\n    description: string = 'Invalid JWT token';\n    explanation: string = '';\n    name: string = 'InvalidJWTTokenError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.InvalidJWTTokenError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class JWTTokenExpiredError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31205;\n    description: string = 'JWT token expired';\n    explanation: string = '';\n    name: string = 'JWTTokenExpiredError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.JWTTokenExpiredError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class RateExceededError extends TwilioError {\n    causes: string[] = [\n      'Rate limit exceeded.',\n    ];\n    code: number = 31206;\n    description: string = 'Rate exceeded authorized limit.';\n    explanation: string = 'The request performed exceeds the authorized limit.';\n    name: string = 'RateExceededError';\n    solutions: string[] = [\n      'Ensure message send rate does not exceed authorized limits.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.RateExceededError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class JWTTokenExpirationTooLongError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31207;\n    description: string = 'JWT token expiration too long';\n    explanation: string = '';\n    name: string = 'JWTTokenExpirationTooLongError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.JWTTokenExpirationTooLongError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ReconnectAttemptError extends TwilioError {\n    causes: string[] = [];\n    code: number = 31209;\n    description: string = 'Reconnect attempt is not authorized.';\n    explanation: string = '';\n    name: string = 'ReconnectAttemptError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.ReconnectAttemptError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class CallMessageEventTypeInvalidError extends TwilioError {\n    causes: string[] = [\n      'The Call Message Event Type is invalid and is not understood by Twilio Voice.',\n    ];\n    code: number = 31210;\n    description: string = 'Call Message Event Type is invalid.';\n    explanation: string = 'The Call Message Event Type is invalid and is not understood by Twilio Voice.';\n    name: string = 'CallMessageEventTypeInvalidError';\n    solutions: string[] = [\n      'Ensure the Call Message Event Type is Valid and understood by Twilio Voice and try again.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.CallMessageEventTypeInvalidError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class PayloadSizeExceededError extends TwilioError {\n    causes: string[] = [\n      'The payload size of Call Message Event exceeds the authorized limit.',\n    ];\n    code: number = 31212;\n    description: string = 'Call Message Event Payload size exceeded authorized limit.';\n    explanation: string = 'The request performed to send a Call Message Event exceeds the payload size authorized limit';\n    name: string = 'PayloadSizeExceededError';\n    solutions: string[] = [\n      'Reduce payload size of Call Message Event to be within the authorized limit and try again.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, AuthorizationErrors.PayloadSizeExceededError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace UserMediaErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class PermissionDeniedError extends TwilioError {\n    causes: string[] = [\n      'The user denied the getUserMedia request.',\n      'The browser denied the getUserMedia request.',\n    ];\n    code: number = 31401;\n    description: string = 'UserMedia Permission Denied Error';\n    explanation: string = 'The browser or end-user denied permissions to user media. Therefore we were unable to acquire input audio.';\n    name: string = 'PermissionDeniedError';\n    solutions: string[] = [\n      'The user should accept the request next time prompted. If the browser saved the deny, the user should change that permission in their browser.',\n      'The user should to verify that the browser has permission to access the microphone at this address.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, UserMediaErrors.PermissionDeniedError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class AcquisitionFailedError extends TwilioError {\n    causes: string[] = [\n      'NotFoundError - The deviceID specified was not found.',\n      'The getUserMedia constraints were overconstrained and no devices matched.',\n    ];\n    code: number = 31402;\n    description: string = 'UserMedia Acquisition Failed Error';\n    explanation: string = 'The browser and end-user allowed permissions, however getting the media failed. Usually this is due to bad constraints, but can sometimes fail due to browser, OS or hardware issues.';\n    name: string = 'AcquisitionFailedError';\n    solutions: string[] = [\n      'Ensure the deviceID being specified exists.',\n      'Try acquiring media with fewer constraints.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, UserMediaErrors.AcquisitionFailedError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace SignalingErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ConnectionError extends TwilioError {\n    causes: string[] = [];\n    code: number = 53000;\n    description: string = 'Signaling connection error';\n    explanation: string = 'Raised whenever a signaling connection error occurs that is not covered by a more specific error code.';\n    name: string = 'ConnectionError';\n    solutions: string[] = [];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, SignalingErrors.ConnectionError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ConnectionDisconnected extends TwilioError {\n    causes: string[] = [\n      'The device running your application lost its Internet connection.',\n    ];\n    code: number = 53001;\n    description: string = 'Signaling connection disconnected';\n    explanation: string = 'Raised whenever the signaling connection is unexpectedly disconnected.';\n    name: string = 'ConnectionDisconnected';\n    solutions: string[] = [\n      'Ensure the device running your application has access to a stable Internet connection.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, SignalingErrors.ConnectionDisconnected.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\nexport namespace MediaErrors {\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ClientLocalDescFailed extends TwilioError {\n    causes: string[] = [\n      'The Client may not be using a supported WebRTC implementation.',\n      'The Client may not have the necessary resources to create or apply a new media description.',\n    ];\n    code: number = 53400;\n    description: string = 'Client is unable to create or apply a local media description';\n    explanation: string = 'Raised whenever a Client is unable to create or apply a local media description.';\n    name: string = 'ClientLocalDescFailed';\n    solutions: string[] = [\n      'If you are experiencing this error using the JavaScript SDK, ensure you are running it with a supported WebRTC implementation.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MediaErrors.ClientLocalDescFailed.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ClientRemoteDescFailed extends TwilioError {\n    causes: string[] = [\n      'The Client may not be using a supported WebRTC implementation.',\n      'The Client may be connecting peer-to-peer with another Participant that is not using a supported WebRTC implementation.',\n      'The Client may not have the necessary resources to apply a new media description.',\n    ];\n    code: number = 53402;\n    description: string = 'Client is unable to apply a remote media description';\n    explanation: string = 'Raised whenever the Client receives a remote media description but is unable to apply it.';\n    name: string = 'ClientRemoteDescFailed';\n    solutions: string[] = [\n      'If you are experiencing this error using the JavaScript SDK, ensure you are running it with a supported WebRTC implementation.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MediaErrors.ClientRemoteDescFailed.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n\n  /**\n   * Error received from the Twilio backend.\n   */\n  export class ConnectionError extends TwilioError {\n    causes: string[] = [\n      'The Client was unable to establish a media connection.',\n      'A media connection which was active failed liveliness checks.',\n    ];\n    code: number = 53405;\n    description: string = 'Media connection failed';\n    explanation: string = 'Raised by the Client or Server whenever a media connection fails.';\n    name: string = 'ConnectionError';\n    solutions: string[] = [\n      'If the problem persists, try connecting to another region.',\n      'Check your Client\\'s network connectivity.',\n      'If you\\'ve provided custom ICE Servers then ensure that the URLs and credentials are valid.',\n    ];\n\n    /**\n     * @internal\n     */\n    constructor();\n    /**\n     * @internal\n     */\n    constructor(message: string);\n    /**\n     * @internal\n     */\n    constructor(error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(message: string, error: Error | object);\n    /**\n     * @internal\n     */\n    constructor(messageOrError?: string | Error | object, error?: Error | object) {\n      super(messageOrError, error);\n      Object.setPrototypeOf(this, MediaErrors.ConnectionError.prototype);\n\n      const message: string = typeof messageOrError === 'string'\n        ? messageOrError\n        : this.explanation;\n\n      const originalError: Error | object | undefined = typeof messageOrError === 'object'\n        ? messageOrError\n        : error;\n\n      this.message = `${this.name} (${this.code}): ${message}`;\n      this.originalError = originalError;\n    }\n  }\n}\n\n/**\n * @private\n */\nexport const errorsByCode: ReadonlyMap<number, any> = new Map([\n  [ 20101, AuthorizationErrors.AccessTokenInvalid ],\n  [ 20104, AuthorizationErrors.AccessTokenExpired ],\n  [ 20151, AuthorizationErrors.AuthenticationFailed ],\n  [ 31202, SignatureValidationErrors.AccessTokenSignatureValidationFailed ],\n  [ 31400, ClientErrors.BadRequest ],\n  [ 31404, ClientErrors.NotFound ],\n  [ 31480, ClientErrors.TemporarilyUnavailable ],\n  [ 31486, ClientErrors.BusyHere ],\n  [ 31603, SIPServerErrors.Decline ],\n  [ 31000, GeneralErrors.UnknownError ],\n  [ 31001, GeneralErrors.ApplicationNotFoundError ],\n  [ 31002, GeneralErrors.ConnectionDeclinedError ],\n  [ 31003, GeneralErrors.ConnectionTimeoutError ],\n  [ 31005, GeneralErrors.ConnectionError ],\n  [ 31008, GeneralErrors.CallCancelledError ],\n  [ 31009, GeneralErrors.TransportError ],\n  [ 31100, MalformedRequestErrors.MalformedRequestError ],\n  [ 31101, MalformedRequestErrors.MissingParameterArrayError ],\n  [ 31102, MalformedRequestErrors.AuthorizationTokenMissingError ],\n  [ 31103, MalformedRequestErrors.MaxParameterLengthExceededError ],\n  [ 31104, MalformedRequestErrors.InvalidBridgeTokenError ],\n  [ 31105, MalformedRequestErrors.InvalidClientNameError ],\n  [ 31107, MalformedRequestErrors.ReconnectParameterInvalidError ],\n  [ 31201, AuthorizationErrors.AuthorizationError ],\n  [ 31203, AuthorizationErrors.NoValidAccountError ],\n  [ 31204, AuthorizationErrors.InvalidJWTTokenError ],\n  [ 31205, AuthorizationErrors.JWTTokenExpiredError ],\n  [ 31206, AuthorizationErrors.RateExceededError ],\n  [ 31207, AuthorizationErrors.JWTTokenExpirationTooLongError ],\n  [ 31209, AuthorizationErrors.ReconnectAttemptError ],\n  [ 31210, AuthorizationErrors.CallMessageEventTypeInvalidError ],\n  [ 31212, AuthorizationErrors.PayloadSizeExceededError ],\n  [ 31401, UserMediaErrors.PermissionDeniedError ],\n  [ 31402, UserMediaErrors.AcquisitionFailedError ],\n  [ 53000, SignalingErrors.ConnectionError ],\n  [ 53001, SignalingErrors.ConnectionDisconnected ],\n  [ 53400, MediaErrors.ClientLocalDescFailed ],\n  [ 53402, MediaErrors.ClientRemoteDescFailed ],\n  [ 53405, MediaErrors.ConnectionError ],\n]);\n\nObject.freeze(errorsByCode);\n", "/* tslint:disable max-classes-per-file */\n\n// TODO: Consider refactoring this export (VBLOCKS-4589)\n\nimport {\n  AuthorizationErrors,\n  ClientErrors,\n  errorsByCode,\n  GeneralErrors,\n  MalformedRequestErrors,\n  MediaErrors,\n  SignalingErrors,\n  SignatureValidationErrors,\n  SIPServerErrors,\n  TwilioError,\n  UserMediaErrors,\n} from './generated';\n\n/**\n * NOTE(mhuynh): Replacing generic error codes with new (more specific) codes,\n * is a breaking change. If an error code is found in this set, we only perform\n * the transformation if the feature flag is enabled.\n *\n * With every major version bump, such that we are allowed to introduce breaking\n * changes as per semver specification, this array should be cleared.\n *\n * TODO: [VBLOCKS-2295] Remove this in 3.x\n */\nconst PRECISE_SIGNALING_ERROR_CODES: Set<number> = new Set([\n  /**\n   * 310XX Errors\n   */\n  31001,\n  31002,\n  31003,\n  /**\n   * 311XX Errors\n   */\n  31101,\n  31102,\n  31103,\n  31104,\n  31105,\n  31107,\n  /**\n   * 312XX Errors\n   */\n  31201,\n  31202,\n  31203,\n  31204,\n  31205,\n  31207,\n  /**\n   * 314XX Errors\n   */\n  31404,\n  31480,\n  31486,\n  /**\n   * 316XX Errors\n   */\n  31603,\n]);\n\n/**\n * Get an error constructor using the [[PRECISE_SIGNALING_ERROR_CODES]] set.\n * @internal\n * @param enableImprovedSignalingErrorPrecision - A boolean representing the\n * optional flag whether or not to use more precise error codes.\n * @param errorCode - The error code.\n * @returns This function returns `undefined` if the passed error code does not\n * correlate to an error or should not be constructed with a more precise error\n * constructor. A sub-class of {@link TwilioError} if the code does correlate to\n * an error.\n */\nexport function getPreciseSignalingErrorByCode(\n  enableImprovedSignalingErrorPrecision: boolean,\n  errorCode: number,\n): typeof TwilioError | undefined {\n  if (typeof errorCode !== 'number') {\n    return;\n  }\n\n  if (!hasErrorByCode(errorCode)) {\n    return;\n  }\n\n  const shouldTransform = enableImprovedSignalingErrorPrecision\n    ? true\n    : !PRECISE_SIGNALING_ERROR_CODES.has(errorCode);\n  if (!shouldTransform) {\n    return;\n  }\n\n  return getErrorByCode(errorCode);\n}\n\n/**\n * The error that is thrown when an invalid argument is passed to a library API.\n */\nexport class InvalidArgumentError extends Error {\n  /**\n   * @internal\n   */\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidArgumentError';\n  }\n}\n\n/**\n * The error that is thrown when the library has entered an invalid state.\n */\nexport class InvalidStateError extends Error {\n  /**\n   * @internal\n   */\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidStateError';\n  }\n}\n\n/**\n * The error that is thrown when an attempt is made to use an API that is not\n * supported on the current platform.\n */\nexport class NotSupportedError extends Error {\n  /**\n   * @internal\n   */\n  constructor(message?: string) {\n    super(message);\n    this.name = 'NotSupportedError';\n  }\n}\n\n/**\n * This should only be used to look up error codes returned by a server\n * using the same repo of error codes.\n * @internal\n */\nexport function getErrorByCode(code: number): (typeof TwilioError) {\n  const error: (typeof TwilioError) | undefined = errorsByCode.get(code);\n  if (!error) {\n    throw new InvalidArgumentError(`Error code ${code} not found`);\n  }\n  return error;\n}\n\n/**\n * This should only be used to look up error codes returned by a server\n * using the same repo of error codes.\n * @internal\n */\nexport function hasErrorByCode(code: number): boolean {\n  return errorsByCode.has(code);\n}\n\n/**\n * @privateRemarks\n *\n * All errors we want to throw or emit locally in the SDK need to be passed\n * through here.\n *\n * They need to first be defined in the `USED_ERRORS` list. See:\n * ```\n * scripts/errors.js\n * ```\n */\nexport {\n  AuthorizationErrors,\n  ClientErrors,\n  GeneralErrors,\n  MalformedRequestErrors,\n  MediaErrors,\n  SignalingErrors,\n  SignatureValidationErrors,\n  SIPServerErrors,\n  TwilioError,\n  UserMediaErrors,\n};\n", "/**\n * This file is generated on build. To make changes, see /templates/constants.ts\n */\nconst PACKAGE_NAME = '@twilio/voice-sdk';\nconst RELEASE_VERSION = '2.15.0';\nconst SOUNDS_BASE_URL = 'https://sdk.twilio.com/js/client/sounds/releases/1.0.0';\nconst COWBELL_AUDIO_URL = `${SOUNDS_BASE_URL}/cowbell.mp3?cache=${RELEASE_VERSION}`;\nconst ECHO_TEST_DURATION = 20000;\n\nexport {\n  COWBELL_AUDIO_URL,\n  ECHO_TEST_DURATION,\n  PACKAGE_NAME,\n  RELEASE_VERSION,\n  SOUNDS_BASE_URL,\n};\n", "import * as LogLevelModule from 'loglevel';\nimport { PACKAGE_NAME } from './constants';\n\n/**\n * Options that may be passed to the {@link Log} constructor for internal testing.\n * @private\n */\nexport interface LogOptions {\n  /**\n   * Custom loglevel module\n   */\n  LogLevelModule: any;\n}\n\n/**\n * {@link Log} provides logging features throughout the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n * @private\n */\nclass Log {\n  /**\n   * Log levels\n   */\n  static levels: LogLevelModule.LogLevel = LogLevelModule.levels;\n\n  /**\n   * Return the `loglevel` instance maintained internally.\n   * @param [options] - Optional settings\n   * @returns The `loglevel` instance.\n   */\n  static getLogLevelInstance(options?: LogOptions): LogLevelModule.Logger {\n    if (!Log.loglevelInstance) {\n      try {\n        Log.loglevelInstance = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(PACKAGE_NAME);\n      } catch {\n        // tslint:disable-next-line\n        console.warn('Cannot create custom logger');\n        Log.loglevelInstance = console as any;\n      }\n    }\n    return Log.loglevelInstance;\n  }\n\n  /**\n   * The loglevel singleton instance\n   */\n  private static loglevelInstance: LogLevelModule.Logger;\n\n  /**\n   * The loglevel logger instance that will be used in this {@link Log}\n   */\n  private _log: LogLevelModule.Logger;\n\n  /**\n   * Prefix to use for this log instance\n   */\n  private _prefix: string;\n\n  /**\n   * @constructor\n   * @param [tag] - tag name for the logs\n   * @param [options] - Optional settings\n   */\n  constructor(tag: string, options?: LogOptions) {\n    this._log = Log.getLogLevelInstance(options);\n    this._prefix = `[TwilioVoice][${tag}]`;\n  }\n\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n  debug(...args: any[]): void {\n    this._log.debug(this._prefix, ...args);\n  }\n\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n  error(...args: any[]): void {\n    this._log.error(this._prefix, ...args);\n  }\n\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n  info(...args: any[]): void {\n    this._log.info(this._prefix, ...args);\n  }\n\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n  setDefaultLevel(level: LogLevelModule.LogLevelDesc): void {\n    if (this._log.setDefaultLevel) {\n      this._log.setDefaultLevel(level);\n    } else {\n      // tslint:disable-next-line\n      console.warn('Logger cannot setDefaultLevel');\n    }\n  }\n\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n  warn(...args: any[]): void {\n    this._log.warn(this._prefix, ...args);\n  }\n}\n\nexport const Logger = Log.getLogLevelInstance();\n\nexport default Log;\n", "import { SOUNDS_BASE_URL } from './constants';\nimport { InvalidArgumentError, InvalidStateError, NotSupportedError } from './errors';\nimport Log from './log';\nconst DEFAULT_TEST_SOUND_URL = `${SOUNDS_BASE_URL}/outgoing.mp3`;\n\n/**\n * A smart collection containing a Set of active output devices.\n */\nexport default class OutputDeviceCollection {\n  /**\n   * The currently active output devices.\n   */\n  private _activeDevices: Set<MediaDeviceInfo> = new Set();\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = new Log('OutputDeviceCollection');\n\n  /**\n   * @internal\n   */\n  constructor(private _name: string,\n              private _availableDevices: Map<string, MediaDeviceInfo>,\n              private _beforeChange: (name: string, devices: string[]) => Promise<void>,\n              private _isSupported: boolean) { }\n\n  /**\n   * Delete a device from the collection. If no devices remain, the 'default'\n   * device will be added as the sole device. If no `default` device exists,\n   * the first available device will be used.\n   * @param device - The device to delete from the collection\n   * @returns whether the device was present before it was deleted\n   */\n  delete(device: MediaDeviceInfo): boolean {\n    this._log.debug('.delete', device);\n    const wasDeleted: boolean = !!(this._activeDevices.delete(device));\n\n    const defaultDevice: MediaDeviceInfo = this._availableDevices.get('default')\n      || Array.from(this._availableDevices.values())[0];\n\n    if (!this._activeDevices.size && defaultDevice) {\n      this._activeDevices.add(defaultDevice);\n    }\n\n    // Call _beforeChange so that the implementation can react when a device is\n    // removed or lost.\n    const deviceIds = Array.from(this._activeDevices.values()).map(deviceInfo => deviceInfo.deviceId);\n\n    this._beforeChange(this._name, deviceIds);\n    return !!wasDeleted;\n  }\n\n  /**\n   * Get the current set of devices.\n   */\n  get(): Set<MediaDeviceInfo> {\n    return this._activeDevices;\n  }\n\n  /**\n   * Replace the current set of devices with a new set of devices.\n   * @param deviceIdOrIds - An ID or array of IDs of devices to replace the existing devices with.\n   * @returns Rejects if this feature is not supported, any of the supplied IDs are not found,\n   * or no IDs are passed.\n   */\n  set(deviceIdOrIds: string | string[]): Promise<void> {\n    this._log.debug('.set', deviceIdOrIds);\n    if (!this._isSupported) {\n      return Promise.reject(new NotSupportedError('This browser does not support audio output selection'));\n    }\n\n    const deviceIds: string[] = Array.isArray(deviceIdOrIds) ? deviceIdOrIds : [deviceIdOrIds];\n\n    if (!deviceIds.length) {\n      return Promise.reject(new InvalidArgumentError('Must specify at least one device to set'));\n    }\n\n    const missingIds: string[] = [];\n    const devices: Array<MediaDeviceInfo | undefined> = deviceIds.map((id: string) => {\n      const device: MediaDeviceInfo | undefined = this._availableDevices.get(id);\n      if (!device) { missingIds.push(id); }\n      return device;\n    });\n\n    if (missingIds.length) {\n      return Promise.reject(new InvalidArgumentError(`Devices not found: ${missingIds.join(', ')}`));\n    }\n\n    return new Promise(resolve => {\n      resolve(this._beforeChange(this._name, deviceIds));\n    }).then(() => {\n      this._activeDevices.clear();\n      devices.forEach(this._activeDevices.add, this._activeDevices);\n    });\n  }\n\n  /**\n   * Test the devices by playing audio through them.\n   * @param [soundUrl] - An optional URL. If none is specified, we will\n   *   play a default test tone.\n   * @returns Resolves with the result of the underlying HTMLAudioElements' play() calls.\n   */\n  test(soundUrl: string = DEFAULT_TEST_SOUND_URL): Promise<any> {\n    if (!this._isSupported) {\n      return Promise.reject(new NotSupportedError('This browser does not support audio output selection'));\n    }\n\n    if (!this._activeDevices.size) {\n      return Promise.reject(new InvalidStateError('No active output devices to test'));\n    }\n\n    return Promise.all(Array.from(this._activeDevices).map((device: MediaDeviceInfo) => {\n      let el: HTMLAudioElement;\n\n      // (rrowland) We need to wait for the oncanplay event because of a regression introduced\n      // in Chrome M72: https://bugs.chromium.org/p/chromium/issues/detail?id=930876\n      return new Promise((resolve: Function) => {\n        el = new Audio(soundUrl);\n        (el as any).oncanplay = resolve;\n      }).then(() => (el as any).setSinkId(device.deviceId).then(() => el.play()));\n    }));\n  }\n}\n", "// @ts-nocheck\nclass MediaDeviceInfoShim {\n  constructor(options) {\n    Object.defineProperties(this, {\n      deviceId: { get() { return options.deviceId; } },\n      groupId: { get() { return options.groupId; } },\n      kind: { get() { return options.kind; } },\n      label: { get() { return options.label; } },\n    });\n  }\n}\n\nexport default MediaDeviceInfoShim;\n", "// @ts-nocheck\n\n/**\n * Exception class.\n * @class\n * @name Exception\n * @exports Exception as Twilio.Exception\n * @memberOf Twilio\n * @param {string} message The exception message\n */\nfunction TwilioException(message) {\n  if (!(this instanceof TwilioException)) {\n    return new TwilioException(message);\n  }\n  this.message = message;\n}\n\n/**\n * Returns the exception message.\n *\n * @return {string} The exception message.\n */\nTwilioException.prototype.toString = function() {\n  return `Twilio.Exception: ${this.message}`;\n};\n\nfunction average(values) {\n  return values && values.length ? values.reduce((t, v) => t + v) / values.length : 0;\n}\n\nfunction difference(lefts, rights, getKey?) {\n  getKey = getKey || (a => a);\n  const rightKeys = new Set(rights.map(getKey));\n  return lefts.filter(left => !rightKeys.has(getKey(left)));\n}\n\nfunction isElectron(navigator) {\n  return !!navigator.userAgent.match('Electron');\n}\n\nfunction isChrome(window, navigator) {\n  const isCriOS = !!navigator.userAgent.match('CriOS');\n  const isHeadlessChrome = !!navigator.userAgent.match('HeadlessChrome');\n  const isGoogle = typeof window.chrome !== 'undefined'\n    && navigator.vendor === 'Google Inc.'\n    && navigator.userAgent.indexOf('OPR') === -1\n    && navigator.userAgent.indexOf('Edge') === -1;\n\n  return isCriOS || isElectron(navigator) || isGoogle || isHeadlessChrome;\n}\n\nfunction isFirefox(navigator?) {\n  navigator = navigator || (typeof window === 'undefined'\n    ? global.navigator : window.navigator);\n\n  return !!(navigator) && typeof navigator.userAgent === 'string'\n    && /firefox|fxios/i.test(navigator.userAgent);\n}\n\n/**\n * Chromium-based Edge has a user-agent of \"Edg/\" where legacy Edge has a\n * user-agent of \"Edge/\".\n */\nfunction isLegacyEdge(navigator?) {\n  navigator = navigator || (typeof window === 'undefined'\n    ? global.navigator : window.navigator);\n\n  return !!(navigator) && typeof navigator.userAgent === 'string'\n    && /edge\\/\\d+/i.test(navigator.userAgent);\n}\n\nfunction isSafari(navigator) {\n  return !!(navigator.vendor) && navigator.vendor.indexOf('Apple') !== -1\n    && navigator.userAgent\n    && navigator.userAgent.indexOf('CriOS') === -1\n    && navigator.userAgent.indexOf('FxiOS') === -1;\n}\n\nfunction isUnifiedPlanDefault(window, navigator, PeerConnection, RtpTransceiver) {\n  if (typeof window === 'undefined'\n    || typeof navigator === 'undefined'\n    || typeof PeerConnection === 'undefined'\n    || typeof RtpTransceiver === 'undefined'\n    || typeof PeerConnection.prototype === 'undefined'\n    || typeof RtpTransceiver.prototype === 'undefined') {\n    return false;\n  }\n\n  if (isChrome(window, navigator) && PeerConnection.prototype.addTransceiver) {\n    const pc = new PeerConnection();\n    let isUnifiedPlan = true;\n    try {\n      pc.addTransceiver('audio');\n    } catch (e) {\n      isUnifiedPlan = false;\n    }\n    pc.close();\n    return isUnifiedPlan;\n  } else if (isFirefox(navigator)) {\n    return true;\n  } else if (isSafari(navigator)) {\n    return 'currentDirection' in RtpTransceiver.prototype;\n  }\n\n  // Edge currently does not support unified plan.\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/17733189/\n  // https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/34451998-sdp-unified-plan\n\n  return false;\n}\n\nfunction queryToJson(params) {\n  if (!params) {\n    return '';\n  }\n\n  return params.split('&').reduce((output, pair) => {\n    const parts = pair.split('=');\n    const key = parts[0];\n    const value = decodeURIComponent((parts[1] || '').replace(/\\+/g, '%20'));\n\n    if (key) { output[key] = value; }\n    return output;\n  }, { });\n}\n\n/**\n * Map a list to an array of arrays, and return the flattened result.\n * @param {Array<*>|Set<*>|Map<*>} list\n * @param {function(*): Array<*>} [mapFn]\n * @returns Array<*>\n */\nfunction flatMap(list, mapFn) {\n  const listArray = list instanceof Map || list instanceof Set\n    ? Array.from(list.values())\n    : list;\n\n  mapFn = mapFn || (item => item);\n\n  return listArray.reduce((flattened, item) => {\n    const mapped = mapFn(item);\n    return flattened.concat(mapped);\n  }, []);\n}\n\n/**\n * Converts an EventEmitter's events into a promise and automatically\n * cleans up handlers once the promise is resolved or rejected.\n */\nfunction promisifyEvents(emitter, resolveEventName, rejectEventName) {\n  return new Promise((resolve, reject) => {\n    function resolveHandler() {\n      emitter.removeListener(rejectEventName, rejectHandler);\n      resolve();\n    }\n    function rejectHandler() {\n      emitter.removeListener(resolveEventName, resolveHandler);\n      reject();\n    }\n    emitter.once(resolveEventName, resolveHandler);\n    emitter.once(rejectEventName, rejectHandler);\n  });\n}\n\nfunction sortByMimeTypes(codecs, preferredOrder) {\n  const preferredCodecs = preferredOrder.map(codec => 'audio/' + codec.toLowerCase());\n  return codecs.sort((a, b) => {\n    const indexA = preferredCodecs.indexOf(a.mimeType.toLowerCase());\n    const indexB = preferredCodecs.indexOf(b.mimeType.toLowerCase());\n    const orderA = indexA >= 0 ? indexA : Number.MAX_VALUE;\n    const orderB = indexB >= 0 ? indexB : Number.MAX_VALUE;\n    return orderA - orderB;\n  });\n}\n\nconst Exception = TwilioException;\n\nexport {\n  Exception,\n  average,\n  difference,\n  isElectron,\n  isChrome,\n  isFirefox,\n  isLegacyEdge,\n  isSafari,\n  isUnifiedPlanDefault,\n  queryToJson,\n  flatMap,\n  promisifyEvents,\n  sortByMimeTypes,\n};\n", "import { EventEmitter } from 'events';\nimport AudioProcessor from './audioprocessor';\nimport { AudioProcessorEventObserver } from './audioprocessoreventobserver';\nimport Device from './device';\nimport { InvalidArgumentError, NotSupportedError } from './errors';\nimport Log from './log';\nimport OutputDeviceCollection from './outputdevicecollection';\nimport MediaDeviceInfoShim from './shims/mediadeviceinfo';\nimport { average, difference, isFirefox } from './util';\n\n/**\n * Aliases for audio kinds, used for labelling.\n */\nconst kindAliases: Record<string, string> = {\n  audioinput: 'Audio Input',\n  audiooutput: 'Audio Output',\n};\n\n/**\n * Provides input and output audio-based functionality in one convenient class.\n */\nclass AudioHelper extends EventEmitter {\n  /**\n   * The currently set audio constraints set by setAudioConstraints(). Starts as null.\n   */\n  get audioConstraints(): MediaTrackConstraints | null { return this._audioConstraints; }\n\n  /**\n   * A Map of all audio input devices currently available to the browser by their device ID.\n   */\n  availableInputDevices: Map<string, MediaDeviceInfo> = new Map();\n\n  /**\n   * A Map of all audio output devices currently available to the browser by their device ID.\n   */\n  availableOutputDevices: Map<string, MediaDeviceInfo> = new Map();\n\n  /**\n   * The active input device. Having no inputDevice specified by `setInputDevice()`\n   * will disable input selection related functionality.\n   */\n  get inputDevice(): MediaDeviceInfo | null { return this._inputDevice; }\n\n  /**\n   * The current input stream coming from the microphone device or\n   * the processed audio stream if there is an {@link AudioProcessor}.\n   */\n  get inputStream(): MediaStream | null { return this._processedStream || this._selectedInputDeviceStream; }\n\n  /**\n   * False if the browser does not support `HTMLAudioElement.setSinkId()` or\n   * `MediaDevices.enumerateDevices()` and Twilio cannot facilitate output selection functionality.\n   */\n  isOutputSelectionSupported: boolean;\n\n  /**\n   * False if the browser does not support AudioContext and Twilio can not analyse the volume\n   * in real-time.\n   */\n  isVolumeSupported: boolean;\n\n  /**\n   * The processed stream if an {@link AudioProcessor} was previously added.\n   */\n  get processedStream(): MediaStream | null { return this._processedStream; }\n\n  /**\n   * The current set of output devices that incoming ringtone audio is routed through.\n   * These are the sounds that may play while the user is away from the machine or not wearing\n   * their headset. It is important that this audio is heard. If all specified\n   * devices lost, this Set will revert to contain only the \"default\" device.\n   */\n  ringtoneDevices: OutputDeviceCollection;\n\n  /**\n   * The current set of output devices that call audio (`[voice, outgoing, disconnect, dtmf]`)\n   * is routed through. These are the sounds that are initiated by the user, or played while\n   * the user is otherwise present at the endpoint. If all specified devices are lost,\n   * this Set will revert to contain only the \"default\" device.\n   */\n  speakerDevices: OutputDeviceCollection;\n\n  /**\n   * The currently set audio constraints set by setAudioConstraints().\n   */\n  private _audioConstraints: MediaTrackConstraints | null = null;\n\n  /**\n   * An AudioContext to use.\n   */\n  private _audioContext?: AudioContext;\n\n  /**\n   * The AudioProcessorEventObserver instance to use\n   */\n  private _audioProcessorEventObserver: AudioProcessorEventObserver;\n\n  /**\n   * Promise to wait for before setting the input device.\n   */\n  private _beforeSetInputDevice: () => Promise<any>;\n\n  /**\n   * The audio stream of the default device.\n   * This is populated when _openDefaultDeviceWithConstraints is called,\n   * See _selectedInputDeviceStream for differences.\n   * TODO: Combine these two workflows (3.x?)\n   */\n  private _defaultInputDeviceStream: MediaStream | null = null;\n\n  /**\n   * Whether each sound is enabled.\n   */\n  private _enabledSounds: Record<Device.ToggleableSound, boolean> = {\n    [Device.SoundName.Disconnect]: true,\n    [Device.SoundName.Incoming]: true,\n    [Device.SoundName.Outgoing]: true,\n  };\n\n  /**\n   * The enumerateDevices method to use\n   */\n  private _enumerateDevices: any;\n\n  /**\n   * The `getUserMedia()` function to use.\n   */\n  private _getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;\n\n  /**\n   * The current input device.\n   */\n  private _inputDevice: MediaDeviceInfo | null = null;\n\n  /**\n   * The internal promise created when calling setInputDevice\n   */\n  private _inputDevicePromise: Promise<void> | null = null;\n\n  /**\n   * An AnalyserNode to use for input volume.\n   */\n  private _inputVolumeAnalyser?: AnalyserNode;\n\n  /**\n   * An MediaStreamSource to use for input volume.\n   */\n  private _inputVolumeSource?: MediaStreamAudioSourceNode;\n\n  /**\n   * Whether the {@link AudioHelper} is currently polling the input stream's volume.\n   */\n  private _isPollingInputVolume: boolean = false;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = new Log('AudioHelper');\n\n  /**\n   * The MediaDevices instance to use.\n   */\n  private _mediaDevices: AudioHelper.MediaDevicesLike | null;\n\n  /**\n   * The microphone permission status\n   */\n  private _microphonePermissionStatus: PermissionStatus | null;\n\n  /**\n   * Called with the new input stream when the active input is changed.\n   */\n  private _onActiveInputChanged: (stream: MediaStream | null) => Promise<void>;\n\n  /**\n   * Handler for microphone permission status change\n   */\n  private _onMicrophonePermissionStatusChanged: () => void;\n\n  /**\n   * Internal reference to the processed stream\n   */\n  private _processedStream: MediaStream | null = null;\n\n  /**\n   * Internal reference to the added AudioProcessor\n   */\n  private _processor: AudioProcessor | null;\n\n  /**\n   * The selected input stream coming from the microphone device.\n   * This is populated when the setInputDevice is called, meaning,\n   * the end user manually selected it, which is different than\n   * the defaultInputDeviceStream.\n   * TODO: Combine these two workflows (3.x?)\n   */\n  private _selectedInputDeviceStream: MediaStream | null = null;\n\n  /**\n   * A record of unknown devices (Devices without labels)\n   */\n  private _unknownDeviceIndexes: Record<string, Record<string, number>> = {\n    audioinput: { },\n    audiooutput: { },\n  };\n\n  /**\n   * @internal\n   * @param onActiveOutputsChanged - A callback to be called when the user changes the active output devices.\n   * @param onActiveInputChanged - A callback to be called when the user changes the active input device.\n   * @param [options]\n   */\n  constructor(onActiveOutputsChanged: (type: 'ringtone' | 'speaker', outputIds: string[]) => Promise<void>,\n              onActiveInputChanged: (stream: MediaStream | null) => Promise<void>,\n              options?: AudioHelper.Options) {\n    super();\n\n    options = Object.assign({\n      AudioContext: typeof AudioContext !== 'undefined' && AudioContext,\n      setSinkId: typeof HTMLAudioElement !== 'undefined' && (HTMLAudioElement.prototype as any).setSinkId,\n    }, options);\n\n    this._beforeSetInputDevice = options.beforeSetInputDevice || (() => Promise.resolve());\n\n    this._updateUserOptions(options);\n\n    this._audioProcessorEventObserver = options.audioProcessorEventObserver;\n    this._mediaDevices = options.mediaDevices || navigator.mediaDevices;\n    this._onActiveInputChanged = onActiveInputChanged;\n    this._enumerateDevices = typeof options.enumerateDevices === 'function'\n      ? options.enumerateDevices\n      : this._mediaDevices && this._mediaDevices.enumerateDevices.bind(this._mediaDevices);\n\n    const isAudioContextSupported: boolean = !!(options.AudioContext || options.audioContext);\n    const isEnumerationSupported: boolean = !!this._enumerateDevices;\n\n    if (options.enabledSounds) {\n      this._enabledSounds = options.enabledSounds;\n    }\n\n    const isSetSinkSupported: boolean = typeof options.setSinkId === 'function';\n    this.isOutputSelectionSupported = isEnumerationSupported && isSetSinkSupported;\n    this.isVolumeSupported = isAudioContextSupported;\n\n    if (this.isVolumeSupported) {\n      this._audioContext = options.audioContext || options.AudioContext && new options.AudioContext();\n      if (this._audioContext) {\n        this._inputVolumeAnalyser = this._audioContext.createAnalyser();\n        this._inputVolumeAnalyser.fftSize = 32;\n        this._inputVolumeAnalyser.smoothingTimeConstant = 0.3;\n      }\n    }\n\n    this.ringtoneDevices = new OutputDeviceCollection('ringtone',\n      this.availableOutputDevices, onActiveOutputsChanged, this.isOutputSelectionSupported);\n    this.speakerDevices = new OutputDeviceCollection('speaker',\n      this.availableOutputDevices, onActiveOutputsChanged, this.isOutputSelectionSupported);\n\n    this.addListener('newListener', (eventName: string) => {\n      if (eventName === 'inputVolume') {\n        this._maybeStartPollingVolume();\n      }\n    });\n\n    this.addListener('removeListener', (eventName: string) => {\n      if (eventName === 'inputVolume') {\n        this._maybeStopPollingVolume();\n      }\n    });\n\n    this.once('newListener', () => {\n      // NOTE (rrowland): Ideally we would only check isEnumerationSupported here, but\n      //   in at least one browser version (Tested in FF48) enumerateDevices actually\n      //   returns bad data for the listed devices. Instead, we check for\n      //   isOutputSelectionSupported to avoid these quirks that may negatively affect customers.\n      if (!this.isOutputSelectionSupported) {\n        this._log.warn('Warning: This browser does not support audio output selection.');\n      }\n\n      if (!this.isVolumeSupported) {\n        this._log.warn(`Warning: This browser does not support Twilio's volume indicator feature.`);\n      }\n    });\n\n    if (isEnumerationSupported) {\n      this._initializeEnumeration();\n    }\n\n    // NOTE (kchoy): Currently microphone permissions are not supported in firefox, and Safari V15 and older.\n    // https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\n    // https://caniuse.com/permissions-api\n    if (navigator && navigator.permissions && typeof navigator.permissions.query === 'function') {\n      navigator.permissions.query({ name: 'microphone' }).then((microphonePermissionStatus) => {\n        if (microphonePermissionStatus.state !== 'granted') {\n          const handleStateChange = () => {\n            this._updateAvailableDevices();\n            this._stopMicrophonePermissionListener();\n          };\n          microphonePermissionStatus.addEventListener('change', handleStateChange);\n          this._microphonePermissionStatus = microphonePermissionStatus;\n          this._onMicrophonePermissionStatusChanged = handleStateChange;\n        }\n      }).catch((reason) => this._log.warn(`Warning: unable to listen for microphone permission changes. ${reason}`));\n    } else {\n      this._log.warn('Warning: current browser does not support permissions API.');\n    }\n  }\n\n  /**\n   * Destroy this AudioHelper instance\n   * @internal\n   */\n  _destroy(): void {\n    this._stopDefaultInputDeviceStream();\n    this._stopSelectedInputDeviceStream();\n    this._destroyProcessedStream();\n    this._maybeStopPollingVolume();\n    this.removeAllListeners();\n    this._stopMicrophonePermissionListener();\n    this._unbind();\n  }\n\n  /**\n   * Promise to wait for the input device, if setInputDevice is called outside of the SDK\n   * @internal\n   */\n  _getInputDevicePromise(): Promise<void> | null {\n    return this._inputDevicePromise;\n  }\n\n  /**\n   * Start polling volume if it's supported and there's an input stream to poll.\n   * @internal\n   */\n  _maybeStartPollingVolume(): void {\n    if (!this.isVolumeSupported || !this.inputStream) { return; }\n\n    this._updateVolumeSource();\n\n    if (this._isPollingInputVolume || !this._inputVolumeAnalyser) { return; }\n\n    const bufferLength: number = this._inputVolumeAnalyser.frequencyBinCount;\n    const buffer: Uint8Array = new Uint8Array(bufferLength);\n\n    this._isPollingInputVolume = true;\n\n    const emitVolume = (): void => {\n      if (!this._isPollingInputVolume) { return; }\n\n      if (this._inputVolumeAnalyser) {\n        this._inputVolumeAnalyser.getByteFrequencyData(buffer);\n        const inputVolume: number = average(buffer);\n\n        this.emit('inputVolume', inputVolume / 255);\n      }\n\n      requestAnimationFrame(emitVolume);\n    };\n\n    requestAnimationFrame(emitVolume);\n  }\n\n  /**\n   * Stop polling volume if it's currently polling and there are no listeners.\n   * @internal\n   */\n  _maybeStopPollingVolume(): void {\n    if (!this.isVolumeSupported) { return; }\n\n    if (!this._isPollingInputVolume || (this.inputStream && this.listenerCount('inputVolume'))) {\n      return;\n    }\n\n    if (this._inputVolumeSource) {\n      this._inputVolumeSource.disconnect();\n      delete this._inputVolumeSource;\n    }\n\n    this._isPollingInputVolume = false;\n  }\n\n  /**\n   * Call getUserMedia with specified constraints\n   * @internal\n   */\n  _openDefaultDeviceWithConstraints(constraints: MediaStreamConstraints): Promise<MediaStream> {\n    this._log.info('Opening default device with constraints', constraints);\n    return this._getUserMedia(constraints).then((stream: MediaStream) => {\n\n      this._log.info('Opened default device. Updating available devices.');\n      // Ensures deviceId's and labels are populated after the gUM call\n      // by calling enumerateDevices\n      this._updateAvailableDevices().catch(error => {\n        // Ignore error, we don't want to break the call flow\n        this._log.warn('Unable to updateAvailableDevices after gUM call', error);\n      });\n      this._defaultInputDeviceStream = stream;\n      return this._maybeCreateProcessedStream(stream);\n    });\n  }\n\n  /**\n   * Stop the default audio stream\n   * @internal\n   */\n  _stopDefaultInputDeviceStream(): void {\n    if (this._defaultInputDeviceStream) {\n      this._log.info('stopping default device stream');\n      this._defaultInputDeviceStream.getTracks().forEach(track => track.stop());\n      this._defaultInputDeviceStream = null;\n      this._destroyProcessedStream();\n    }\n  }\n\n  /**\n   * Unbind the listeners from mediaDevices.\n   * @internal\n   */\n  _unbind(): void {\n    if (this._mediaDevices?.removeEventListener) {\n      this._mediaDevices.removeEventListener('devicechange', this._updateAvailableDevices);\n    }\n  }\n\n  /**\n   * Update the available input and output devices\n   * @internal\n   */\n  _updateAvailableDevices = (): Promise<void> => {\n    if (!this._mediaDevices || !this._enumerateDevices) {\n      return Promise.reject('Enumeration not supported');\n    }\n\n    return this._enumerateDevices().then((devices: MediaDeviceInfo[]) => {\n      this._updateDevices(devices.filter((d: MediaDeviceInfo) => d.kind === 'audiooutput'),\n        this.availableOutputDevices,\n        this._removeLostOutput);\n\n      this._updateDevices(devices.filter((d: MediaDeviceInfo) => d.kind === 'audioinput'),\n        this.availableInputDevices,\n        this._removeLostInput);\n\n      const defaultDevice = this.availableOutputDevices.get('default')\n        || Array.from(this.availableOutputDevices.values())[0];\n\n      [this.speakerDevices, this.ringtoneDevices].forEach(outputDevices => {\n        if (!outputDevices.get().size && this.availableOutputDevices.size && this.isOutputSelectionSupported) {\n          outputDevices.set(defaultDevice.deviceId)\n            .catch((reason) => {\n              this._log.warn(`Unable to set audio output devices. ${reason}`);\n            });\n        }\n      });\n    });\n  }\n\n  /**\n   * Update AudioHelper options that can be changed by the user\n   * @internal\n   */\n  _updateUserOptions(options: AudioHelper.Options): void {\n    if (typeof options.enumerateDevices === 'function') {\n      this._enumerateDevices = options.enumerateDevices;\n    }\n    if (typeof options.getUserMedia === 'function') {\n      this._getUserMedia = options.getUserMedia;\n    }\n  }\n\n  /**\n   * Adds an {@link AudioProcessor} object. Once added, the AudioHelper will route\n   * the input audio stream through the processor before sending the audio\n   * stream to Twilio. Only one AudioProcessor can be added at this time.\n   *\n   * See the {@link AudioProcessor} interface for an example.\n   *\n   * @param processor The AudioProcessor to add.\n   * @returns\n   */\n  addProcessor(processor: AudioProcessor): Promise<void> {\n    this._log.debug('.addProcessor');\n\n    if (this._processor) {\n      throw new NotSupportedError('Adding multiple AudioProcessors is not supported at this time.');\n    }\n\n    if (typeof processor !== 'object' || processor === null) {\n      throw new InvalidArgumentError('Missing AudioProcessor argument.');\n    }\n\n    if (typeof processor.createProcessedStream !== 'function') {\n      throw new InvalidArgumentError('Missing createProcessedStream() method.');\n    }\n\n    if (typeof processor.destroyProcessedStream !== 'function') {\n      throw new InvalidArgumentError('Missing destroyProcessedStream() method.');\n    }\n\n    this._processor = processor;\n    this._audioProcessorEventObserver.emit('add');\n    return this._restartStreams();\n  }\n\n  /**\n   * Enable or disable the disconnect sound.\n   * @param doEnable Passing `true` will enable the sound and `false` will disable the sound.\n   * Not passing this parameter will not alter the enable-status of the sound.\n   * @returns The enable-status of the sound.\n   */\n  disconnect(doEnable?: boolean): boolean {\n    this._log.debug('.disconnect', doEnable);\n    return this._maybeEnableSound(Device.SoundName.Disconnect, doEnable);\n  }\n\n  /**\n   * Enable or disable the incoming sound.\n   * @param doEnable Passing `true` will enable the sound and `false` will disable the sound.\n   * Not passing this parameter will not alter the enable-status of the sound.\n   * @returns The enable-status of the sound.\n   */\n  incoming(doEnable?: boolean): boolean {\n    this._log.debug('.incoming', doEnable);\n    return this._maybeEnableSound(Device.SoundName.Incoming, doEnable);\n  }\n\n  /**\n   * Enable or disable the outgoing sound.\n   * @param doEnable Passing `true` will enable the sound and `false` will disable the sound.\n   * Not passing this parameter will not alter the enable-status of the sound.\n   * @returns The enable-status of the sound.\n   */\n  outgoing(doEnable?: boolean): boolean {\n    this._log.debug('.outgoing', doEnable);\n    return this._maybeEnableSound(Device.SoundName.Outgoing, doEnable);\n  }\n\n  /**\n   * Removes an {@link AudioProcessor}. Once removed, the AudioHelper will start using\n   * the audio stream from the selected input device for existing or future calls.\n   *\n   * @param processor The AudioProcessor to remove.\n   * @returns\n   */\n  removeProcessor(processor: AudioProcessor): Promise<void> {\n    this._log.debug('.removeProcessor');\n\n    if (typeof processor !== 'object' || processor === null) {\n      throw new InvalidArgumentError('Missing AudioProcessor argument.');\n    }\n\n    if (this._processor !== processor) {\n      throw new InvalidArgumentError('Cannot remove an AudioProcessor that has not been previously added.');\n    }\n\n    this._destroyProcessedStream();\n    this._processor = null;\n    this._audioProcessorEventObserver.emit('remove');\n    return this._restartStreams();\n  }\n\n  /**\n   * Set the MediaTrackConstraints to be applied on every getUserMedia call for new input\n   * device audio. Any deviceId specified here will be ignored. Instead, device IDs should\n   * be specified using {@link AudioHelper#setInputDevice}. The returned Promise resolves\n   * when the media is successfully reacquired, or immediately if no input device is set.\n   * @param audioConstraints - The MediaTrackConstraints to apply.\n   */\n  setAudioConstraints(audioConstraints: MediaTrackConstraints): Promise<void> {\n    this._log.debug('.setAudioConstraints', audioConstraints);\n    this._audioConstraints = Object.assign({ }, audioConstraints);\n    delete this._audioConstraints.deviceId;\n\n    return this.inputDevice\n      ? this._setInputDevice(this.inputDevice.deviceId, true)\n      : Promise.resolve();\n  }\n\n  /**\n   * Replace the current input device with a new device by ID.\n   *\n   * Calling `setInputDevice` sets the stream for current and future calls and\n   * will not release it automatically.\n   *\n   * While this behavior is not an issue, it will result in the application\n   * holding onto the input device, and the application may show a red\n   * \"recording\" symbol in the browser tab.\n   *\n   * To remove the red \"recording\" symbol, the device must be released. To\n   * release it, call `unsetInputDevice` after the call disconnects. Note that\n   * after calling `unsetInputDevice` future calls will then use the default\n   * input device.\n   *\n   * Consider application logic that keeps track of the user-selected device\n   * and call `setInputDevice` before calling `device.connect()` for outgoing\n   * calls and `call.accept()` for incoming calls. Furthermore, consider\n   * calling `unsetInputDevice` once a call is disconnected. Below is an\n   * example:\n   *\n   * ```ts\n   * import { Device } from '@twilio/voice-sdk';\n   * let inputDeviceId = ...;\n   * const device = new Device(...);\n   *\n   * async function makeOutgoingCall() {\n   *   await device.audio.setInputDevice(inputDeviceId);\n   *   const call = await device.connect(...);\n   *\n   *   call.on('disconnect', async () => {\n   *     inputDeviceId = ... // save the current input device id\n   *     await device.audio.unsetInputDevice();\n   *   });\n   * }\n   *\n   * async function acceptIncomingCall(incomingCall) {\n   *   await device.audio.setInputDevice(inputDeviceId);\n   *   await incomingCall.accept();\n   *\n   *   incomingCall.on('disconnect', async () => {\n   *     inputDeviceId = ... // save the current input device id\n   *     await device.audio.unsetInputDevice();\n   *   });\n   * }\n   * ```\n   *\n   * @param deviceId - An ID of a device to replace the existing\n   *   input device with.\n   */\n  setInputDevice(deviceId: string): Promise<void> {\n    this._log.debug('.setInputDevice', deviceId);\n    return this._setInputDevice(deviceId, false);\n  }\n\n  /**\n   * Unset the MediaTrackConstraints to be applied on every getUserMedia call for new input\n   * device audio. The returned Promise resolves when the media is successfully reacquired,\n   * or immediately if no input device is set.\n   */\n  unsetAudioConstraints(): Promise<void> {\n    this._log.debug('.unsetAudioConstraints');\n    this._audioConstraints = null;\n    return this.inputDevice\n      ? this._setInputDevice(this.inputDevice.deviceId, true)\n      : Promise.resolve();\n  }\n\n  /**\n   * Unset the input device, stopping the tracks. This should only be called when not in a connection, and\n   *   will not allow removal of the input device during a live call.\n   */\n  unsetInputDevice(): Promise<void> {\n    this._log.debug('.unsetInputDevice', this.inputDevice);\n    if (!this.inputDevice) { return Promise.resolve(); }\n\n    this._destroyProcessedStream();\n\n    return this._onActiveInputChanged(null).then(() => {\n      this._replaceStream(null);\n      this._inputDevice = null;\n      this._maybeStopPollingVolume();\n    });\n  }\n\n  /**\n   * Destroys processed stream and update references\n   */\n  private _destroyProcessedStream() {\n    if (this._processor && this._processedStream) {\n      this._log.info('destroying processed stream');\n      const processedStream = this._processedStream;\n      this._processedStream.getTracks().forEach(track => track.stop());\n      this._processedStream = null;\n      this._processor.destroyProcessedStream(processedStream);\n      this._audioProcessorEventObserver.emit('destroy');\n    }\n  }\n\n  /**\n   * Get the index of an un-labeled Device.\n   * @param mediaDeviceInfo\n   * @returns The index of the passed MediaDeviceInfo\n   */\n  private _getUnknownDeviceIndex(mediaDeviceInfo: MediaDeviceInfo): number {\n    const id: string = mediaDeviceInfo.deviceId;\n    const kind: string = mediaDeviceInfo.kind;\n\n    let index: number = this._unknownDeviceIndexes[kind][id];\n    if (!index) {\n      index = Object.keys(this._unknownDeviceIndexes[kind]).length + 1;\n      this._unknownDeviceIndexes[kind][id] = index;\n    }\n\n    return index;\n  }\n\n  /**\n   * Initialize output device enumeration.\n   */\n  private _initializeEnumeration(): void {\n    if (!this._mediaDevices || !this._enumerateDevices) {\n      throw new NotSupportedError('Enumeration is not supported');\n    }\n\n    if (this._mediaDevices.addEventListener) {\n      this._mediaDevices.addEventListener('devicechange', this._updateAvailableDevices);\n    }\n\n    this._updateAvailableDevices().then(() => {\n      if (!this.isOutputSelectionSupported) { return; }\n\n      Promise.all([\n        this.speakerDevices.set('default'),\n        this.ringtoneDevices.set('default'),\n      ]).catch(reason => {\n        this._log.warn(`Warning: Unable to set audio output devices. ${reason}`);\n      });\n    });\n  }\n\n  /**\n   * Route input stream to the processor if it exists\n   */\n  private _maybeCreateProcessedStream(stream: MediaStream): Promise<MediaStream> {\n    if (this._processor) {\n      this._log.info('Creating processed stream');\n      return this._processor.createProcessedStream(stream).then((processedStream: MediaStream) => {\n        this._processedStream = processedStream;\n        this._audioProcessorEventObserver.emit('create');\n        return this._processedStream;\n      });\n    }\n    return Promise.resolve(stream);\n  }\n\n  /**\n   * Set whether the sound is enabled or not\n   * @param soundName\n   * @param doEnable\n   * @returns Whether the sound is enabled or not\n   */\n  private _maybeEnableSound(soundName: Device.ToggleableSound, doEnable?: boolean): boolean {\n    if (typeof doEnable !== 'undefined') {\n      this._enabledSounds[soundName] = doEnable;\n    }\n    return this._enabledSounds[soundName];\n  }\n\n  /**\n   * Remove an input device from inputs\n   * @param lostDevice\n   * @returns Whether the device was active\n   */\n  private _removeLostInput = (lostDevice: MediaDeviceInfo): boolean => {\n    if (!this.inputDevice || this.inputDevice.deviceId !== lostDevice.deviceId) {\n      return false;\n    }\n\n    this._destroyProcessedStream();\n    this._replaceStream(null);\n    this._inputDevice = null;\n    this._maybeStopPollingVolume();\n\n    const defaultDevice: MediaDeviceInfo = this.availableInputDevices.get('default')\n      || Array.from(this.availableInputDevices.values())[0];\n\n    if (defaultDevice) {\n      this.setInputDevice(defaultDevice.deviceId);\n    }\n\n    return true;\n  }\n\n  /**\n   * Remove an input device from outputs\n   * @param lostDevice\n   * @returns Whether the device was active\n   */\n  private _removeLostOutput = (lostDevice: MediaDeviceInfo): boolean => {\n    const wasSpeakerLost: boolean = this.speakerDevices.delete(lostDevice);\n    const wasRingtoneLost: boolean = this.ringtoneDevices.delete(lostDevice);\n    return wasSpeakerLost || wasRingtoneLost;\n  }\n\n  /**\n   * Stop the tracks on the current input stream before replacing it with the passed stream.\n   * @param stream - The new stream\n   */\n  private _replaceStream(stream: MediaStream | null): void {\n    this._log.info('Replacing with new stream.');\n    if (this._selectedInputDeviceStream) {\n      this._log.info('Old stream detected. Stopping tracks.');\n      this._stopSelectedInputDeviceStream();\n    }\n\n    this._selectedInputDeviceStream = stream;\n  }\n\n  /**\n   * Restart the active streams\n   */\n  private _restartStreams(): Promise<void> {\n    if (this.inputDevice && this._selectedInputDeviceStream) {\n      this._log.info('Restarting selected input device');\n      return this._setInputDevice(this.inputDevice.deviceId, true);\n    }\n\n    if (this._defaultInputDeviceStream) {\n      const defaultDevice = this.availableInputDevices.get('default')\n      || Array.from(this.availableInputDevices.values())[0];\n\n      this._log.info('Restarting default input device, now becoming selected.');\n      return this._setInputDevice(defaultDevice.deviceId, true);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Replace the current input device with a new device by ID.\n   * @param deviceId - An ID of a device to replace the existing\n   *   input device with.\n   * @param forceGetUserMedia - If true, getUserMedia will be called even if\n   *   the specified device is already active.\n   */\n  private async _setInputDevice(deviceId: string, forceGetUserMedia: boolean): Promise<void> {\n    const setInputDevice = async () => {\n      await this._beforeSetInputDevice();\n\n      if (typeof deviceId !== 'string') {\n        return Promise.reject(new InvalidArgumentError('Must specify the device to set'));\n      }\n\n      const device: MediaDeviceInfo | undefined = this.availableInputDevices.get(deviceId);\n      if (!device) {\n        return Promise.reject(new InvalidArgumentError(`Device not found: ${deviceId}`));\n      }\n\n      this._log.info('Setting input device. ID: ' + deviceId);\n\n      if (this._inputDevice && this._inputDevice.deviceId === deviceId && this._selectedInputDeviceStream) {\n        if (!forceGetUserMedia) {\n          return Promise.resolve();\n        }\n\n        // If the currently active track is still in readyState `live`, gUM may return the same track\n        // rather than returning a fresh track.\n        this._log.info('Same track detected on setInputDevice, stopping old tracks.');\n        this._stopSelectedInputDeviceStream();\n      }\n\n      // Release the default device in case it was created previously\n      this._stopDefaultInputDeviceStream();\n\n      const constraints = { audio: Object.assign({ deviceId: { exact: deviceId } }, this.audioConstraints) };\n      this._log.info('setInputDevice: getting new tracks.');\n      return this._getUserMedia(constraints).then((originalStream: MediaStream) => {\n\n        this._destroyProcessedStream();\n\n        return this._maybeCreateProcessedStream(originalStream).then((newStream) => {\n          this._log.info('setInputDevice: invoking _onActiveInputChanged.');\n          return this._onActiveInputChanged(newStream).then(() => {\n            this._replaceStream(originalStream);\n            this._inputDevice = device;\n            this._maybeStartPollingVolume();\n          });\n        });\n      });\n    };\n\n    return this._inputDevicePromise = setInputDevice().finally(() => {\n      this._inputDevicePromise = null;\n    });\n  }\n\n  /**\n   * Remove event listener for microphone permissions\n   */\n  private _stopMicrophonePermissionListener(): void {\n    if (this._microphonePermissionStatus?.removeEventListener) {\n      this._microphonePermissionStatus.removeEventListener('change', this._onMicrophonePermissionStatusChanged);\n    }\n  }\n\n  /**\n   * Stop the selected audio stream\n   */\n  private _stopSelectedInputDeviceStream(): void {\n    if (this._selectedInputDeviceStream) {\n      this._log.info('Stopping selected device stream');\n      this._selectedInputDeviceStream.getTracks().forEach(track => track.stop());\n    }\n  }\n\n  /**\n   * Update a set of devices.\n   * @param updatedDevices - An updated list of available Devices\n   * @param availableDevices - The previous list of available Devices\n   * @param removeLostDevice - The method to call if a previously available Device is\n   *   no longer available.\n   */\n  private _updateDevices(updatedDevices: MediaDeviceInfo[],\n                         availableDevices: Map<string, MediaDeviceInfo>,\n                         removeLostDevice: (lostDevice: MediaDeviceInfo) => boolean): void {\n    const updatedDeviceIds: string[] = updatedDevices.map(d => d.deviceId);\n    const knownDeviceIds: string[] = Array.from(availableDevices.values()).map(d => d.deviceId);\n    const lostActiveDevices: MediaDeviceInfo[] = [];\n\n    // Remove lost devices\n    const lostDeviceIds: string[] = difference(knownDeviceIds, updatedDeviceIds);\n    lostDeviceIds.forEach((lostDeviceId: string) => {\n      const lostDevice: MediaDeviceInfo | undefined = availableDevices.get(lostDeviceId);\n      if (lostDevice) {\n        availableDevices.delete(lostDeviceId);\n        if (removeLostDevice(lostDevice)) { lostActiveDevices.push(lostDevice); }\n      }\n    });\n\n    // Add any new devices, or devices with updated labels\n    let deviceChanged: boolean = false;\n    updatedDevices.forEach(newDevice => {\n      const existingDevice: MediaDeviceInfo | undefined = availableDevices.get(newDevice.deviceId);\n      const newMediaDeviceInfo: MediaDeviceInfo = this._wrapMediaDeviceInfo(newDevice);\n\n      if (!existingDevice || existingDevice.label !== newMediaDeviceInfo.label) {\n        availableDevices.set(newDevice.deviceId, newMediaDeviceInfo);\n        deviceChanged = true;\n      }\n    });\n\n    if (deviceChanged || lostDeviceIds.length) {\n      // Force a new gUM in case the underlying tracks of the active stream have changed. One\n      //   reason this might happen is when `default` is selected and set to a USB device,\n      //   then that device is unplugged or plugged back in. We can't check for the 'ended'\n      //   event or readyState because it is asynchronous and may take upwards of 5 seconds,\n      //   in my testing. (rrowland)\n      const defaultId = 'default';\n      // this.inputDevice is not null if audio.setInputDevice() was explicitly called\n      const isInputDeviceSet = this.inputDevice && this.inputDevice.deviceId === defaultId;\n      // If this.inputDevice is null, and default stream is not null, it means\n      // the user is using the default stream and did not explicitly call audio.setInputDevice()\n      const isDefaultDeviceSet = this._defaultInputDeviceStream && this.availableInputDevices.get(defaultId);\n\n      if (isInputDeviceSet || isDefaultDeviceSet) {\n        this._log.warn(`Calling getUserMedia after device change to ensure that the \\\n          tracks of the active device (default) have not gone stale.`);\n\n        // NOTE(csantos): Updating the stream in the same execution context as the devicechange event\n        // causes the new gUM call to fail silently. Meaning, the gUM call may succeed,\n        // but it won't actually update the stream. We need to update the stream in a different\n        // execution context (setTimeout) to properly update the stream.\n        setTimeout(() => {\n          this._setInputDevice(defaultId, true);\n        }, 0);\n      }\n      this._log.debug('#deviceChange', lostActiveDevices);\n      this.emit('deviceChange', lostActiveDevices);\n    }\n  }\n\n  /**\n   * Disconnect the old input volume source, and create and connect a new one with the current\n   * input stream.\n   */\n  private _updateVolumeSource(): void {\n    if (!this.inputStream || !this._audioContext || !this._inputVolumeAnalyser) {\n      return;\n    }\n\n    if (this._inputVolumeSource) {\n      this._inputVolumeSource.disconnect();\n    }\n\n    try {\n      this._inputVolumeSource = this._audioContext.createMediaStreamSource(this.inputStream);\n      this._inputVolumeSource.connect(this._inputVolumeAnalyser);\n    } catch (ex) {\n      this._log.warn('Unable to update volume source', ex);\n      delete this._inputVolumeSource;\n    }\n  }\n\n  /**\n   * Convert a MediaDeviceInfo to a IMediaDeviceInfoShim.\n   * @param mediaDeviceInfo - The info to convert\n   * @returns The converted shim\n   */\n  private _wrapMediaDeviceInfo(mediaDeviceInfo: MediaDeviceInfo): MediaDeviceInfo {\n    const options: Record<string, string> = {\n      deviceId: mediaDeviceInfo.deviceId,\n      groupId: mediaDeviceInfo.groupId,\n      kind: mediaDeviceInfo.kind,\n      label: mediaDeviceInfo.label,\n    };\n\n    if (!options.label) {\n      if (options.deviceId === 'default') {\n        options.label = 'Default';\n      } else {\n        const index: number = this._getUnknownDeviceIndex(mediaDeviceInfo);\n        options.label = `Unknown ${kindAliases[options.kind]} Device ${index}`;\n      }\n    }\n\n    return new MediaDeviceInfoShim(options) as MediaDeviceInfo;\n  }\n}\n\n/**\n * @mergeModuleWith AudioHelper\n */\nnamespace AudioHelper {\n  /**\n   * Emitted when the available set of Devices changes.\n   * @event\n   * @param lostActiveDevices - An array containing any Devices that were previously active\n   * that were lost as a result of this deviceChange event.\n   * @example\n   * ```ts\n   * device.audio.on('deviceChange', lostActiveDevices => { });\n   * ```\n   */\n  export declare function deviceChangeEvent(lostActiveDevices: MediaDeviceInfo[]): void;\n\n  /**\n   * Emitted on `requestAnimationFrame` (up to 60fps, depending on browser) with\n   *   the current input and output volumes, as a percentage of maximum\n   *   volume, between -100dB and -30dB. Represented by a floating point\n   *   number.\n   * @event\n   * @param inputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @example\n   * ```ts\n   * device.audio.on('inputVolume', volume => { });\n   * ```\n   */\n  export declare function inputVolumeEvent(inputVolume: number): void;\n\n  /**\n   * An object like MediaDevices.\n   * @internal\n   */\n  export interface MediaDevicesLike {\n    addEventListener?: (eventName: string, handler: (...args: any[]) => void) => void;\n    enumerateDevices: (...args: any[]) => any;\n    getUserMedia: (...args: any[]) => any;\n    removeEventListener?: (eventName: string, handler: (...args: any[]) => void) => void;\n  }\n\n  /**\n   * Options that can be passed to the AudioHelper constructor\n   * @internal\n   */\n  export interface Options {\n    /**\n     * A custom replacement for the AudioContext constructor.\n     */\n    AudioContext?: typeof AudioContext;\n\n    /**\n     * An existing AudioContext instance to use.\n     */\n    audioContext?: AudioContext;\n\n    /**\n     * AudioProcessorEventObserver to use\n     */\n    audioProcessorEventObserver: AudioProcessorEventObserver;\n\n    /**\n     * Promise to wait for before setting the input device.\n     */\n    beforeSetInputDevice?: () => Promise<any>;\n\n    /**\n     * Whether each sound is enabled.\n     */\n    enabledSounds?: Record<Device.ToggleableSound, boolean>;\n\n    /**\n     * Overrides the native MediaDevices.enumerateDevices API.\n     */\n    enumerateDevices?: any;\n\n    /**\n     * The getUserMedia method to use\n     */\n    getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;\n\n    /**\n     * A custom MediaDevices instance to use.\n     */\n    mediaDevices?: AudioHelper.MediaDevicesLike;\n\n    /**\n     * A custom setSinkId function to use.\n     */\n    setSinkId?: (sinkId: string) => Promise<void>;\n  }\n}\n\nexport default AudioHelper;\n", "import { EventEmitter } from 'events';\nimport Log from './log';\n\n/**\n * AudioProcessorEventObserver observes {@link AudioProcessor}\n * related operations and re-emits them as generic events.\n * @internal\n */\nexport class AudioProcessorEventObserver extends EventEmitter {\n\n  private _log: Log = new Log('AudioProcessorEventObserver');\n\n  constructor() {\n    super();\n    this._log.info('Creating AudioProcessorEventObserver instance');\n    this.on('enabled', () => this._reEmitEvent('enabled'));\n    this.on('add', () => this._reEmitEvent('add'));\n    this.on('remove', () => this._reEmitEvent('remove'));\n    this.on('create', () => this._reEmitEvent('create-processed-stream'));\n    this.on('destroy', () => this._reEmitEvent('destroy-processed-stream'));\n  }\n\n  destroy(): void {\n    this.removeAllListeners();\n  }\n\n  private _reEmitEvent(name: string): void {\n    this._log.info(`AudioProcessor:${name}`);\n    this.emit('event', { name, group: 'audio-processor' });\n  }\n}\n", "import { InvalidArgumentError } from './errors';\n\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\nconst bandFrequencies: Partial<Record<string, number[]>> = {\n  dtmf0: [1360, 960],\n  dtmf1: [1230, 720],\n  dtmf2: [1360, 720],\n  dtmf3: [1480, 720],\n  dtmf4: [1230, 790],\n  dtmf5: [1360, 790],\n  dtmf6: [1480, 790],\n  dtmf7: [1230, 870],\n  dtmf8: [1360, 870],\n  dtmf9: [1480, 870],\n  dtmfh: [1480, 960],\n  dtmfs: [1230, 960],\n};\n\nexport default class DialtonePlayer {\n  /**\n   * Gain nodes, reducing the frequency.\n   */\n  _gainNodes: GainNode[] = [];\n\n  constructor(private _context: AudioContext) {\n    this._gainNodes = [\n      this._context.createGain(),\n      this._context.createGain(),\n    ];\n\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.connect(this._context.destination);\n      gainNode.gain.value = 0.1;\n      this._gainNodes.push(gainNode);\n    });\n  }\n\n  cleanup(): void {\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.disconnect();\n    });\n  }\n\n  /**\n   * Play the dual frequency tone for the passed DTMF name.\n   * @param sound\n   */\n  play(sound: string): void {\n    const frequencies = bandFrequencies[sound];\n\n    if (!frequencies) {\n      throw new InvalidArgumentError('Invalid DTMF sound name');\n    }\n\n    const oscillators: OscillatorNode[] = [\n      this._context.createOscillator(),\n      this._context.createOscillator(),\n    ];\n\n    oscillators.forEach((oscillator: OscillatorNode, i: number) => {\n      oscillator.type = 'sine' as OscillatorType;\n      oscillator.frequency.value = frequencies[i];\n      oscillator.connect(this._gainNodes[i]);\n      oscillator.start();\n      oscillator.stop(this._context.currentTime + 0.1);\n      oscillator.addEventListener('ended', () => oscillator.disconnect());\n    });\n  }\n}\n", "// @ts-nocheck\n\nfunction request(method, params, callback) {\n  const body = JSON.stringify(params.body || {});\n  const headers = new Headers();\n\n  params.headers = params.headers || [];\n  Object.entries(params.headers).forEach(([headerName, headerBody]) =>\n    headers.append(headerName, headerBody));\n\n  fetch(params.url, { body, headers, method })\n    .then(response => response.text(), callback)\n    .then(responseText => callback(null, responseText), callback);\n}\n/**\n * Use XMLHttpRequest to get a network resource.\n * @param {String} method - HTTP Method\n * @param {Object} params - Request parameters\n * @param {String} params.url - URL of the resource\n * @param {Array}  params.headers - An array of headers to pass [{ headerName : headerBody }]\n * @param {Object} params.body - A JSON body to send to the resource\n * @returns {response}\n */\nconst Request = request;\n\n/**\n * Sugar function for request('GET', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~get} callback - The callback that handles the response.\n */\nRequest.get = function get(params, callback) {\n  return new this('GET', params, callback);\n};\n\n/**\n * Sugar function for request('POST', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~post} callback - The callback that handles the response.\n */\nRequest.post = function post(params, callback) {\n  return new this('POST', params, callback);\n};\n\nexport default Request;\n", "// @ts-nocheck\nimport { EventEmitter } from 'events';\nimport Log from './log';\nimport request from './request';\n\n/**\n * Builds Endpoint Analytics (EA) event payloads and sends them to\n *   the EA server.\n * @constructor\n * @param {String} productName - Name of the product publishing events.\n * @param {String} token - The JWT token to use to authenticate with\n *   the EA server.\n * @param {EventPublisher.Options} options\n * @property {Boolean} isEnabled - Whether or not this publisher is publishing\n *   to the server. Currently ignores the request altogether, in the future this\n *   may store them in case publishing is re-enabled later. Defaults to true.\n */\n/**\n * @typedef {Object} EventPublisher.Options\n * @property {Object} [metadata=undefined] - A publisher_metadata object to send\n *   with each payload.\n * @property {String} [host='eventgw.twilio.com'] - The host address of the EA\n *   server to publish to.\n * @property {Object|Function} [defaultPayload] - A default payload to extend\n *   when creating and sending event payloads. Also takes a function that\n *   should return an object representing the default payload. This is\n *   useful for fields that should always be present when they are\n *   available, but are not always available.\n */\nclass EventPublisher extends EventEmitter {\n  constructor(productName, token, options) {\n    super();\n\n    if (!(this instanceof EventPublisher)) {\n      return new EventPublisher(productName, token, options);\n    }\n\n    // Apply default options\n    options = Object.assign({ defaultPayload() { return { }; } }, options);\n\n    let defaultPayload = options.defaultPayload;\n\n    if (typeof defaultPayload !== 'function') {\n      defaultPayload = () => Object.assign({ }, options.defaultPayload);\n    }\n\n    let isEnabled = true;\n    const metadata = Object.assign({ app_name: undefined, app_version: undefined }, options.metadata);\n\n    Object.defineProperties(this, {\n      _defaultPayload: { value: defaultPayload },\n      _host: { value: options.host, writable: true },\n      _isEnabled: {\n        get() { return isEnabled; },\n        set(_isEnabled) { isEnabled = _isEnabled; },\n      },\n      _log: { value: new Log('EventPublisher') },\n      _request: { value: options.request || request, writable: true },\n      _token: { value: token, writable: true },\n      isEnabled: {\n        enumerable: true,\n        get() { return isEnabled; },\n      },\n      metadata: {\n        enumerable: true,\n        get() { return metadata; },\n      },\n      productName: { enumerable: true, value: productName },\n      token: {\n        enumerable: true,\n        get() { return this._token; },\n      },\n    });\n  }\n}\n\n/**\n * Post to an EA server.\n * @private\n * @param {String} endpointName - Endpoint to post the event to\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @param {?Boolean} [force=false] - Whether or not to send this even if\n *    publishing is disabled.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype._post = function _post(endpointName, level, group, name, payload, connection, force) {\n  if ((!this.isEnabled && !force) || !this._host) {\n    this._log.debug('Publishing cancelled', JSON.stringify({ isEnabled: this.isEnabled, force, host: this._host }));\n    return Promise.resolve();\n  }\n\n  if (!connection || ((!connection.parameters || !connection.parameters.CallSid) && !connection.outboundConnectionId)) {\n    if (!connection) {\n      this._log.debug('Publishing cancelled. Missing connection object');\n    } else {\n      this._log.debug('Publishing cancelled. Missing connection info', JSON.stringify({\n        outboundConnectionId: connection.outboundConnectionId, parameters: connection.parameters,\n      }));\n    }\n    return Promise.resolve();\n  }\n\n  const event = {\n    group,\n    level: level.toUpperCase(),\n    name,\n    payload: (payload && payload.forEach) ?\n      payload.slice(0) : Object.assign(this._defaultPayload(connection), payload),\n      payload_type: 'application/json',\n      private: false,\n    publisher: this.productName,\n    timestamp: (new Date()).toISOString(),\n  };\n\n  if (this.metadata) {\n    event.publisher_metadata = this.metadata;\n  }\n\n  if (endpointName === 'EndpointEvents') {\n    this._log.debug(\n      'Publishing insights',\n      JSON.stringify({ endpointName, event, force, host: this._host }),\n    );\n  }\n\n  const requestParams = {\n    body: event,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': this.token,\n    },\n    url: `https://${this._host}/v4/${endpointName}`,\n  };\n\n  return new Promise((resolve, reject) => {\n    this._request.post(requestParams, err => {\n      if (err) {\n        this.emit('error', err);\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  }).catch(e => {\n    this._log.error(`Unable to post ${group} ${name} event to Insights. Received error: ${e}`);\n  });\n};\n\n/**\n * Post an event to the EA server. Use this method when the level\n *  is dynamic. Otherwise, it's better practice to use the sugar\n *  methods named for the specific level.\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.post = function post(level, group, name, payload, connection, force) {\n  return this._post('EndpointEvents', level, group, name, payload, connection, force);\n};\n\n/**\n * Post a debug-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.debug = function debug(group, name, payload, connection) {\n  return this.post('debug', group, name, payload, connection);\n};\n\n/**\n * Post an info-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.info = function info(group, name, payload, connection) {\n  return this.post('info', group, name, payload, connection);\n};\n\n/**\n * Post a warning-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.warn = function warn(group, name, payload, connection) {\n  return this.post('warning', group, name, payload, connection);\n};\n\n/**\n * Post an error-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.error = function error(group, name, payload, connection) {\n  return this.post('error', group, name, payload, connection);\n};\n\n/**\n * Post a metrics event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {Array<Object>} metrics - The metrics to post.\n * @param {?Object} [customFields] - Custom fields to append to each payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.postMetrics = function postMetrics(group, name, metrics, customFields, connection) {\n  return new Promise(resolve => {\n    const samples = metrics\n      .map(formatMetric)\n      .map(sample => Object.assign(sample, customFields));\n\n    resolve(this._post('EndpointMetrics', 'info', group, name, samples, connection));\n  });\n};\n\n/**\n * Update the host address of the insights server to publish to.\n * @param {String} host - The new host address of the insights server.\n */\nEventPublisher.prototype.setHost = function setHost(host) {\n  this._host = host;\n};\n\n/**\n * Update the token to use to authenticate requests.\n * @param {string} token\n * @returns {void}\n */\nEventPublisher.prototype.setToken = function setToken(token) {\n  this._token = token;\n};\n\n/**\n * Enable the publishing of events.\n */\nEventPublisher.prototype.enable = function enable() {\n  this._isEnabled = true;\n};\n\n/**\n * Disable the publishing of events.\n */\nEventPublisher.prototype.disable = function disable() {\n  this._isEnabled = false;\n};\n\nfunction formatMetric(sample) {\n  return {\n    audio_codec: sample.codecName,\n    audio_level_in: sample.audioInputLevel,\n    audio_level_out: sample.audioOutputLevel,\n    bytes_received: sample.bytesReceived,\n    bytes_sent: sample.bytesSent,\n    call_volume_input: sample.inputVolume,\n    call_volume_output: sample.outputVolume,\n    jitter: sample.jitter,\n    mos: sample.mos && (Math.round(sample.mos * 100) / 100),\n    packets_lost: sample.packetsLost,\n    packets_lost_fraction: sample.packetsLostFraction &&\n      (Math.round(sample.packetsLostFraction * 100) / 100),\n    packets_received: sample.packetsReceived,\n    rtt: sample.rtt,\n    timestamp: (new Date(sample.timestamp)).toISOString(),\n    total_bytes_received: sample.totals.bytesReceived,\n    total_bytes_sent: sample.totals.bytesSent,\n    total_packets_lost: sample.totals.packetsLost,\n    total_packets_received: sample.totals.packetsReceived,\n    total_packets_sent: sample.totals.packetsSent,\n  };\n}\n\nexport default EventPublisher;\n", "// @ts-nocheck\n\n/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n\n// The legacy max volume, which is the positive half of a signed short integer.\nconst OLD_MAX_VOLUME = 32767;\n\nconst NativeRTCStatsReport = typeof window !== 'undefined'\n  ? window.RTCStatsReport : undefined;\n\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\nfunction MockRTCStatsReport(statsMap) {\n  if (!(this instanceof MockRTCStatsReport)) {\n    return new MockRTCStatsReport(statsMap);\n  }\n\n  const self = this;\n  Object.defineProperties(this, {\n    _map: { value: statsMap },\n    size: {\n      enumerable: true,\n      get() {\n        return self._map.size;\n      },\n    },\n  });\n\n  this[Symbol.iterator] = statsMap[Symbol.iterator];\n}\n\n// If RTCStatsReport is available natively, inherit it. Keep our constructor.\nif (NativeRTCStatsReport) {\n  MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n  MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n}\n\n// Map the Map-like read methods to the underlying Map\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(key => {\n  MockRTCStatsReport.prototype[key] = function(...args) {\n    return this._map[key](...args);\n  };\n});\n\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\nMockRTCStatsReport.fromArray = function fromArray(array) {\n  return new MockRTCStatsReport(array.reduce((map, rtcStats) => {\n    map.set(rtcStats.id, rtcStats);\n    return map;\n  }, new Map()));\n};\n\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n  let activeCandidatePairId;\n  const transportIds = new Map();\n\n  const statsMap = statsResponse.result().reduce((map, report) => {\n    const id = report.id;\n    switch (report.type) {\n      case 'googCertificate':\n        map.set(id, createRTCCertificateStats(report));\n        break;\n      case 'datachannel':\n        map.set(id, createRTCDataChannelStats(report));\n        break;\n      case 'googCandidatePair':\n        if (getBoolean(report, 'googActiveConnection')) {\n          activeCandidatePairId = id;\n        }\n\n        map.set(id, createRTCIceCandidatePairStats(report));\n        break;\n      case 'localcandidate':\n        map.set(id, createRTCIceCandidateStats(report, false));\n        break;\n      case 'remotecandidate':\n        map.set(id, createRTCIceCandidateStats(report, true));\n        break;\n      case 'ssrc':\n        if (isPresent(report, 'packetsReceived')) {\n          map.set(`rtp-${id}`, createRTCInboundRTPStreamStats(report));\n        } else {\n          map.set(`rtp-${id}`, createRTCOutboundRTPStreamStats(report));\n        }\n\n        map.set(`track-${id}`, createRTCMediaStreamTrackStats(report));\n        map.set(`codec-${id}`, createRTCCodecStats(report));\n        break;\n      case 'googComponent':\n        const transportReport = createRTCTransportStats(report);\n        transportIds.set(transportReport.selectedCandidatePairId, id);\n        map.set(id, createRTCTransportStats(report));\n        break;\n    }\n\n    return map;\n  }, new Map());\n\n  if (activeCandidatePairId) {\n    const activeTransportId = transportIds.get(activeCandidatePairId);\n    if (activeTransportId) {\n      statsMap.get(activeTransportId).dtlsState = 'connected';\n    }\n  }\n\n  return new MockRTCStatsReport(statsMap);\n};\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\nfunction createRTCTransportStats(report) {\n  return {\n    bytesReceived: undefined,\n    bytesSent: undefined,\n    dtlsState: undefined,\n    id: report.id,\n    localCertificateId: report.stat('localCertificateId'),\n    remoteCertificateId: report.stat('remoteCertificateId'),\n    rtcpTransportStatsId: undefined,\n    selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n    timestamp: Date.parse(report.timestamp),\n    type: 'transport',\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\nfunction createRTCCodecStats(report) {\n  return {\n    channels: undefined,\n    clockRate: undefined,\n    id: report.id,\n    implementation: undefined,\n    mimeType: `${report.stat('mediaType')}/${report.stat('googCodecName')}`,\n    payloadType: undefined,\n    sdpFmtpLine: undefined,\n    timestamp: Date.parse(report.timestamp),\n    type: 'codec',\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\nfunction createRTCMediaStreamTrackStats(report) {\n  return {\n    audioLevel: isPresent(report, 'audioOutputLevel')\n      ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME\n      : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n    detached: undefined,\n    echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n    echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement'),\n    ended: undefined,\n    frameHeight: isPresent(report, 'googFrameHeightReceived')\n      ? getInt(report, 'googFrameHeightReceived')\n      : getInt(report, 'googFrameHeightSent'),\n    frameWidth: isPresent(report, 'googFrameWidthReceived')\n      ? getInt(report, 'googFrameWidthReceived')\n      : getInt(report, 'googFrameWidthSent'),\n    framesCorrupted: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    framesDropped: undefined,\n    framesPerSecond: undefined,\n    framesReceived: undefined,\n    framesSent: getInt(report, 'framesEncoded'),\n    fullFramesLost: undefined,\n    id: report.id,\n    kind: report.stat('mediaType'),\n    partialFramesLost: undefined,\n    remoteSource: undefined,\n    ssrcIds: undefined,\n    timestamp: Date.parse(report.timestamp),\n    trackIdentifier: report.stat('googTrackId'),\n    type: 'track',\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\nfunction createRTCRTPStreamStats(report, isInbound) {\n  return {\n    associateStatsId: undefined,\n    codecId: `codec-${report.id}`,\n    firCount: isInbound\n      ? getInt(report, 'googFirsSent')\n      : undefined,\n    id: report.id,\n    isRemote: undefined,\n    mediaType: report.stat('mediaType'),\n    nackCount: isInbound\n      ? getInt(report, 'googNacksSent')\n      : getInt(report, 'googNacksReceived'),\n    pliCount: isInbound\n      ? getInt(report, 'googPlisSent')\n      : getInt(report, 'googPlisReceived'),\n    qpSum: getInt(report, 'qpSum'),\n    sliCount: undefined,\n    ssrc: report.stat('ssrc'),\n    timestamp: Date.parse(report.timestamp),\n    trackId: `track-${report.id}`,\n    transportId: report.stat('transportId'),\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\nfunction createRTCInboundRTPStreamStats(report) {\n  const rtp = createRTCRTPStreamStats(report, true);\n\n  Object.assign(rtp, {\n    burstDiscardCount: undefined,\n    burstDiscardRate: undefined,\n    burstLossCount: undefined,\n    burstLossRate: undefined,\n    burstPacketsDiscarded: undefined,\n    burstPacketsLost: undefined,\n    bytesReceived: getInt(report, 'bytesReceived'),\n    fractionLost: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    gapDiscardRate: undefined,\n    gapLossRate: undefined,\n    jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n    packetsDiscarded: undefined,\n    packetsLost: getInt(report, 'packetsLost'),\n    packetsReceived: getInt(report, 'packetsReceived'),\n    packetsRepaired: undefined,\n    roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    type: 'inbound-rtp',\n  });\n\n  return rtp;\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\nfunction createRTCOutboundRTPStreamStats(report) {\n  const rtp = createRTCRTPStreamStats(report, false);\n\n  Object.assign(rtp, {\n    bytesSent: getInt(report, 'bytesSent'),\n    framesEncoded: getInt(report, 'framesEncoded'),\n    packetsSent: getInt(report, 'packetsSent'),\n    remoteTimestamp: undefined,\n    targetBitrate: undefined,\n    type: 'outbound-rtp',\n  });\n\n  return rtp;\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\nfunction createRTCIceCandidateStats(report, isRemote) {\n  return {\n    candidateType: translateCandidateType(report.stat('candidateType')),\n    deleted: undefined,\n    id: report.id,\n    ip: report.stat('ipAddress'),\n    isRemote,\n    port: getInt(report, 'portNumber'),\n    priority: getFloat(report, 'priority'),\n    protocol: report.stat('transport'),\n    relayProtocol: undefined,\n    timestamp: Date.parse(report.timestamp),\n    transportId: undefined,\n    type: isRemote\n      ? 'remote-candidate'\n      : 'local-candidate',\n    url: undefined,\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\nfunction createRTCIceCandidatePairStats(report) {\n  return {\n    availableIncomingBitrate: undefined,\n    availableOutgoingBitrate: undefined,\n    bytesReceived: getInt(report, 'bytesReceived'),\n    bytesSent: getInt(report, 'bytesSent'),\n    consentRequestsSent: getInt(report, 'consentRequestsSent'),\n    currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    id: report.id,\n    lastPacketReceivedTimestamp: undefined,\n    lastPacketSentTimestamp: undefined,\n    localCandidateId: report.stat('localCandidateId'),\n    nominated: undefined,\n    priority: undefined,\n    readable: undefined,\n    remoteCandidateId: report.stat('remoteCandidateId'),\n    requestsReceived: getInt(report, 'requestsReceived'),\n    requestsSent: getInt(report, 'requestsSent'),\n    responsesReceived: getInt(report, 'responsesReceived'),\n    responsesSent: getInt(report, 'responsesSent'),\n    retransmissionsReceived: undefined,\n    retransmissionsSent: undefined,\n    state: undefined,\n    timestamp: Date.parse(report.timestamp),\n    totalRoundTripTime: undefined,\n    transportId: report.stat('googChannelId'),\n    type: 'candidate-pair',\n    writable: getBoolean(report, 'googWritable'),\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\nfunction createRTCCertificateStats(report) {\n  return {\n    base64Certificate: report.stat('googDerBase64'),\n    fingerprint: report.stat('googFingerprint'),\n    fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n    id: report.id,\n    issuerCertificateId: report.stat('googIssuerId'),\n    timestamp: Date.parse(report.timestamp),\n    type: 'certificate',\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\nfunction createRTCDataChannelStats(report) {\n  return {\n    bytesReceived: undefined,\n    bytesSent: undefined,\n    datachannelid: report.stat('datachannelid'),\n    id: report.id,\n    label: report.stat('label'),\n    messagesReceived: undefined,\n    messagesSent: undefined,\n    protocol: report.stat('protocol'),\n    state: report.stat('state'),\n    timestamp: Date.parse(report.timestamp),\n    transportId: report.stat('transportId'),\n    type: 'data-channel',\n  };\n}\n\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\nfunction convertMsToSeconds(inMs) {\n  return isNaN(inMs) || inMs === ''\n    ? undefined\n    : parseInt(inMs, 10) / 1000;\n}\n\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\nfunction translateCandidateType(type) {\n  switch (type) {\n    case 'peerreflexive':\n      return 'prflx';\n    case 'serverreflexive':\n      return 'srflx';\n    case 'host':\n    case 'relay':\n    default:\n      return type;\n  }\n}\n\nfunction getInt(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? parseInt(stat, 10)\n    : undefined;\n}\n\nfunction getFloat(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? parseFloat(stat)\n    : undefined;\n}\n\nfunction getBoolean(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? (stat === 'true' || stat === true)\n    : undefined;\n}\n\nfunction isPresent(report, statName) {\n  const stat = report.stat(statName);\n  return typeof stat !== 'undefined' && stat !== '';\n}\n\nexport default MockRTCStatsReport;\n", "// @ts-nocheck\n// tslint:disable no-empty\nimport { InvalidArgumentError, NotSupportedError } from '../errors';\nimport MockRTCStatsReport from './mockrtcstatsreport';\n\nconst ERROR_PEER_CONNECTION_NULL = 'PeerConnection is null';\nconst ERROR_WEB_RTC_UNSUPPORTED = 'WebRTC statistics are unsupported';\n\n/**\n * Helper function to find a specific stat from a report.\n * Some environment provide the stats report as a map (regular browsers)\n * but some provide stats report as an array (citrix vdi)\n * @private\n */\nfunction findStatById(report, id) {\n  if (typeof report.get === 'function') {\n    return report.get(id);\n  }\n  return report.find(s => s.id === id);\n}\n\n/**\n * Generate WebRTC statistics report for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @return {Promise<RTCStatsReport>} WebRTC RTCStatsReport object\n */\nfunction getRTCStatsReport(peerConnection) {\n  if (!peerConnection) {\n    return Promise.reject(new InvalidArgumentError(ERROR_PEER_CONNECTION_NULL));\n  }\n\n  if (typeof peerConnection.getStats !== 'function') {\n    return Promise.reject(new NotSupportedError(ERROR_WEB_RTC_UNSUPPORTED));\n  }\n\n  let promise;\n  try {\n    promise = peerConnection.getStats();\n  } catch (e) {\n    promise = new Promise(resolve => peerConnection.getStats(resolve)).then(MockRTCStatsReport.fromRTCStatsResponse);\n  }\n\n  return promise;\n}\n\n/**\n * @typedef {Object} StatsOptions\n * Used for testing to inject and extract methods.\n * @property {function} [createRTCSample] - Method for parsing an RTCStatsReport\n */\n/**\n * Collects any WebRTC statistics for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @param {StatsOptions} options - List of custom options.\n * @return {Promise<RTCSample>} Universally-formatted version of RTC stats.\n */\nfunction getRTCStats(peerConnection, options) {\n  options = Object.assign({ createRTCSample }, options);\n\n  return getRTCStatsReport(peerConnection).then(options.createRTCSample);\n}\n\n/**\n * Generate WebRTC stats report containing relevant information about ICE candidates for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @return {Promise<RTCIceCandidateStatsReport>} RTCIceCandidateStatsReport object\n */\nfunction getRTCIceCandidateStatsReport(peerConnection) {\n  return getRTCStatsReport(peerConnection).then((report) => {\n    // Find the relevant information needed to determine selected candidates later\n    const {\n      candidatePairs, localCandidates, remoteCandidates, transport,\n    } = Array.from(report.values()).reduce((rval, stat) => {\n      ['candidatePairs', 'localCandidates', 'remoteCandidates'].forEach((prop) => {\n        if (!rval[prop]) {\n          rval[prop] = [];\n        }\n      });\n\n      switch (stat.type) {\n        case 'candidate-pair':\n          rval.candidatePairs.push(stat);\n          break;\n        case 'local-candidate':\n          rval.localCandidates.push(stat);\n          break;\n        case 'remote-candidate':\n          rval.remoteCandidates.push(stat);\n          break;\n        case 'transport':\n          // This transport is the one being used if selectedCandidatePairId is populated\n          if (stat.selectedCandidatePairId) {\n            rval.transport = stat;\n          }\n          break;\n      }\n\n      return rval;\n    }, {});\n\n    // This is a report containing information about the selected candidates, such as IDs\n    // This is coming from WebRTC stats directly and doesn't contain the actual ICE Candidates info\n    const selectedCandidatePairReport = candidatePairs.find(pair =>\n      // Firefox\n      pair.selected ||\n      // Spec-compliant way\n      (transport && pair.id === transport.selectedCandidatePairId));\n\n    let selectedIceCandidatePairStats;\n    if (selectedCandidatePairReport) {\n      selectedIceCandidatePairStats = {\n        localCandidate: localCandidates.find(candidate => candidate.id === selectedCandidatePairReport.localCandidateId),\n        remoteCandidate: remoteCandidates.find(candidate => candidate.id === selectedCandidatePairReport.remoteCandidateId),\n      };\n    }\n\n    // Build the return object\n    return {\n      iceCandidateStats: [...localCandidates, ...remoteCandidates],\n      selectedIceCandidatePairStats,\n    };\n  });\n}\n\n/**\n * @typedef {Object} RTCSample - A sample containing relevant WebRTC stats information.\n * @property {Number} [timestamp]\n * @property {String} [codecName] - MimeType name of the codec being used by the outbound audio stream\n * @property {Number} [rtt] - Round trip time\n * @property {Number} [jitter]\n * @property {Number} [packetsSent]\n * @property {Number} [packetsLost]\n * @property {Number} [packetsReceived]\n * @property {Number} [bytesReceived]\n * @property {Number} [bytesSent]\n * @property {Number} [localAddress]\n * @property {Number} [remoteAddress]\n */\nfunction RTCSample() { }\n\n/**\n * Create an RTCSample object from an RTCStatsReport\n * @private\n * @param {RTCStatsReport} statsReport\n * @returns {RTCSample}\n */\nfunction createRTCSample(statsReport) {\n  let activeTransportId = null;\n  const sample = new RTCSample();\n  let fallbackTimestamp;\n\n  Array.from(statsReport.values()).forEach(stats => {\n    // Skip isRemote tracks which will be phased out completely and break in FF66.\n    if (stats.isRemote) { return; }\n\n    // Firefox hack -- Older firefox doesn't have dashes in type names\n    const type = stats.type.replace('-', '');\n\n    fallbackTimestamp = fallbackTimestamp || stats.timestamp;\n\n    // (rrowland) As I understand it, this is supposed to come in on remote-inbound-rtp but it's\n    // currently coming in on remote-outbound-rtp, so I'm leaving this outside the switch until\n    // the appropriate place to look is cleared up.\n    if (stats.remoteId) {\n      const remote = findStatById(statsReport, stats.remoteId);\n      if (remote && remote.roundTripTime) {\n        sample.rtt = remote.roundTripTime * 1000;\n      }\n    }\n\n    switch (type) {\n      case 'inboundrtp':\n        sample.timestamp = sample.timestamp || stats.timestamp;\n        sample.jitter = stats.jitter * 1000;\n        sample.packetsLost = stats.packetsLost;\n        sample.packetsReceived = stats.packetsReceived;\n        sample.bytesReceived = stats.bytesReceived;\n\n        break;\n      case 'outboundrtp':\n        sample.timestamp = stats.timestamp;\n        sample.packetsSent = stats.packetsSent;\n        sample.bytesSent = stats.bytesSent;\n\n        if (stats.codecId) {\n          const codec = findStatById(statsReport, stats.codecId);\n          sample.codecName = codec\n            ? codec.mimeType && codec.mimeType.match(/(.*\\/)?(.*)/)[2]\n            : stats.codecId;\n        }\n\n        break;\n      case 'transport':\n        activeTransportId = stats.id;\n        break;\n    }\n  });\n\n  if (!sample.timestamp) {\n    sample.timestamp = fallbackTimestamp;\n  }\n\n  const activeTransport = findStatById(statsReport, activeTransportId);\n  if (!activeTransport) { return sample; }\n\n  const selectedCandidatePair = findStatById(statsReport, activeTransport.selectedCandidatePairId);\n  if (!selectedCandidatePair) { return sample; }\n\n  const localCandidate = findStatById(statsReport, selectedCandidatePair.localCandidateId);\n  const remoteCandidate = findStatById(statsReport, selectedCandidatePair.remoteCandidateId);\n\n  if (!sample.rtt) {\n    sample.rtt = selectedCandidatePair &&\n      (selectedCandidatePair.currentRoundTripTime * 1000);\n  }\n\n  Object.assign(sample, {\n    // ip is deprecated. use address first then ip if on older versions of browser\n    localAddress: localCandidate && (localCandidate.address || localCandidate.ip),\n    remoteAddress: remoteCandidate && (remoteCandidate.address || remoteCandidate.ip),\n  });\n\n  return sample;\n}\n\nexport {\n  getRTCStats,\n  getRTCIceCandidateStatsReport,\n};\n", "import { EventEmitter } from 'events';\nimport Call from '../call';\nimport Device, { IExtendedDeviceOptions } from '../device';\nimport {\n  GeneralErrors,\n  NotSupportedError,\n  SignalingErrors,\n  TwilioError,\n} from '../errors';\nimport Log from '../log';\nimport { RTCSampleTotals } from '../rtc/sample';\nimport RTCSample from '../rtc/sample';\nimport { getRTCIceCandidateStatsReport } from '../rtc/stats';\nimport RTCWarning from '../rtc/warning';\nimport StatsMonitor from '../statsMonitor';\nimport { NetworkTiming, TimeMeasurement } from './timing';\n\nimport { COWBELL_AUDIO_URL, ECHO_TEST_DURATION } from '../constants';\n\n/**\n * Placeholder until we convert peerconnection.js to TypeScript.\n * Represents the audio output object coming from Client SDK's PeerConnection object.\n */\nexport interface AudioOutput {\n  /**\n   * The audio element used to play out the sound.\n   */\n  audio: HTMLAudioElement;\n}\n\n/**\n * @mergeModuleWith PreflightTest\n */\nexport declare interface PreflightTest {\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Completed]].\n   * During this time, [[PreflightTest.report]] is available and ready to be inspected.\n   * In some cases, this will not trigger if the test encounters a fatal error prior connecting to Twilio.\n   * See [[PreflightTest.failedEvent]].\n   * @param report\n   * @example `preflight.on('completed', report => console.log(report))`\n   * @event\n   */\n  completedEvent(report: PreflightTest.Report): void;\n\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Connected]].\n   * @example `preflight.on('connected', () => console.log('Test connected'))`\n   * @event\n   */\n  connectedEvent(): void;\n\n  /**\n   * Raised when [[PreflightTest.status]] has transitioned to [[PreflightTest.Status.Failed]].\n   * This happens when establishing a connection to Twilio has failed or when a test call has encountered a fatal error.\n   * This is also raised if [[PreflightTest.stop]] is called while the test is in progress.\n   * @param error\n   * @example `preflight.on('failed', error => console.log(error))`\n   * @event\n   */\n  failedEvent(error: TwilioError | DOMException): void;\n\n  /**\n   * Raised when the [[Call]] gets a webrtc sample object. This event is published every second.\n   * @param sample\n   * @example `preflight.on('sample', sample => console.log(sample))`\n   * @event\n   */\n  sampleEvent(sample: RTCSample): void;\n\n  /**\n   * Raised whenever the [[Call]] encounters a warning.\n   * @param name - The name of the warning.\n   * @example `preflight.on('warning', (name, data) => console.log({ name, data }))`\n   * @event\n   */\n  warningEvent(name: string, data: PreflightTest.Warning): void;\n}\n\n/**\n * Runs some tests to identify issues, if any, prohibiting successful calling.\n */\nexport class PreflightTest extends EventEmitter {\n  /**\n   * The {@link Call} for this test call\n   */\n  private _call: Call;\n\n  /**\n   * Callsid generated for this test call\n   */\n  private _callSid: string | undefined;\n\n  /**\n   * The {@link Device} for this test call\n   */\n  private _device: Device;\n\n  /**\n   * The timer when doing an echo test\n   * The echo test is used when fakeMicInput is set to true\n   */\n  private _echoTimer: NodeJS.Timeout;\n\n  /**\n   * The edge that the `Twilio.Device` connected to.\n   */\n  private _edge: string | undefined;\n\n  /**\n   * End of test timestamp\n   */\n  private _endTime: number | undefined;\n\n  /**\n   * Whether this test has already logged an insights-connection-warning.\n   */\n  private _hasInsightsErrored: boolean = false;\n\n  /**\n   * Latest WebRTC sample collected for this test\n   */\n  private _latestSample: RTCSample | undefined;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = new Log('PreflightTest');\n\n  /**\n   * Network related timing measurements for this test\n   */\n  private _networkTiming: NetworkTiming = {};\n\n  /**\n   * The options passed to {@link PreflightTest} constructor\n   */\n  private _options: PreflightTest.ExtendedOptions = {\n    codecPreferences: [Call.Codec.PCMU, Call.Codec.Opus],\n    edge: 'roaming',\n    fakeMicInput: false,\n    logLevel: 'error',\n    signalingTimeoutMs: 10000,\n  };\n\n  /**\n   * The report for this test.\n   */\n  private _report: PreflightTest.Report | undefined;\n\n  /**\n   * The WebRTC ICE candidates stats information collected during the test\n   */\n  private _rtcIceCandidateStatsReport: PreflightTest.RTCIceCandidateStatsReport;\n\n  /**\n   * WebRTC samples collected during this test\n   */\n  private _samples: RTCSample[];\n\n  /**\n   * Timer for setting up signaling connection\n   */\n  private _signalingTimeoutTimer: NodeJS.Timeout;\n\n  /**\n   * Start of test timestamp\n   */\n  private _startTime: number;\n\n  /**\n   * Current status of this test\n   */\n  private _status: PreflightTest.Status = PreflightTest.Status.Connecting;\n\n  /**\n   * List of warning names and warning data detected during this test\n   */\n  private _warnings: PreflightTest.Warning[];\n\n  /**\n   * Construct a {@link PreflightTest} instance.\n   * @param token - A Twilio JWT token string.\n   * @param options\n   */\n  constructor(token: string, options: PreflightTest.ExtendedOptions) {\n    super();\n\n    Object.assign(this._options, options);\n\n    this._samples = [];\n    this._warnings = [];\n    this._startTime = Date.now();\n\n    this._initDevice(token, {\n      ...this._options,\n      fileInputStream: this._options.fakeMicInput ?\n        this._getStreamFromFile() : undefined,\n    });\n\n    // Device sets the loglevel so start logging after initializing the device.\n    // Then selectively log options that users can modify.\n    const userOptions = [\n      'codecPreferences',\n      'edge',\n      'fakeMicInput',\n      'logLevel',\n      'signalingTimeoutMs',\n    ];\n    const userOptionOverrides = [\n      'audioContext',\n      'deviceFactory',\n      'fileInputStream',\n      'getRTCIceCandidateStatsReport',\n      'iceServers',\n      'rtcConfiguration',\n    ];\n    if (typeof options === 'object') {\n      const toLog: any = { ...options };\n      Object.keys(toLog).forEach((key: string) => {\n        if (!userOptions.includes(key) && !userOptionOverrides.includes(key)) {\n          delete toLog[key];\n        }\n        if (userOptionOverrides.includes(key)) {\n          toLog[key] = true;\n        }\n      });\n      this._log.debug('.constructor', JSON.stringify(toLog));\n    }\n  }\n\n  /**\n   * Stops the current test and raises a failed event.\n   */\n  stop(): void {\n    this._log.debug('.stop');\n    const error = new GeneralErrors.CallCancelledError();\n    if (this._device) {\n      this._device.once(Device.EventName.Unregistered, () => this._onFailed(error));\n      this._device.destroy();\n    } else {\n      this._onFailed(error);\n    }\n  }\n\n  /**\n   * Emit a {PreflightTest.Warning}\n   */\n  private _emitWarning(name: string, description: string, rtcWarning?: RTCWarning): void {\n    const warning: PreflightTest.Warning = { name, description };\n    if (rtcWarning) {\n      warning.rtcWarning = rtcWarning;\n    }\n    this._warnings.push(warning);\n    this._log.debug(`#${PreflightTest.Events.Warning}`, JSON.stringify(warning));\n    this.emit(PreflightTest.Events.Warning, warning);\n  }\n\n  /**\n   * Returns call quality base on the RTC Stats\n   */\n  private _getCallQuality(mos: number): PreflightTest.CallQuality {\n    if (mos > 4.2) {\n      return PreflightTest.CallQuality.Excellent;\n    } else if (mos >= 4.1 && mos <= 4.2) {\n      return PreflightTest.CallQuality.Great;\n    } else if (mos >= 3.7 && mos <= 4) {\n      return PreflightTest.CallQuality.Good;\n    } else if (mos >= 3.1 && mos <= 3.6) {\n      return PreflightTest.CallQuality.Fair;\n    } else {\n      return PreflightTest.CallQuality.Degraded;\n    }\n  }\n\n  /**\n   * Returns the report for this test.\n   */\n  private _getReport(): PreflightTest.Report {\n    const stats = this._getRTCStats();\n    const testTiming: TimeMeasurement = { start: this._startTime };\n    if (this._endTime) {\n      testTiming.end = this._endTime;\n      testTiming.duration  = this._endTime - this._startTime;\n    }\n\n    const report: PreflightTest.Report = {\n      callSid: this._callSid,\n      edge: this._edge,\n      iceCandidateStats: this._rtcIceCandidateStatsReport?.iceCandidateStats ?? [],\n      networkTiming: this._networkTiming,\n      samples: this._samples,\n      selectedEdge: this._options.edge,\n      stats,\n      testTiming,\n      totals: this._getRTCSampleTotals(),\n      warnings: this._warnings,\n    };\n\n    const selectedIceCandidatePairStats = this._rtcIceCandidateStatsReport?.selectedIceCandidatePairStats;\n\n    if (selectedIceCandidatePairStats) {\n      report.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n      report.isTurnRequired = selectedIceCandidatePairStats.localCandidate.candidateType === 'relay'\n      || selectedIceCandidatePairStats.remoteCandidate.candidateType === 'relay';\n    }\n\n    if (stats) {\n      report.callQuality = this._getCallQuality(stats.mos.average);\n    }\n\n    return report;\n  }\n\n  /**\n   * Returns RTC stats totals for this test\n   */\n  private _getRTCSampleTotals(): RTCSampleTotals | undefined {\n    if (!this._latestSample) {\n      return;\n    }\n\n    return { ...this._latestSample.totals };\n  }\n\n  /**\n   * Returns RTC related stats captured during the test call\n   */\n  private _getRTCStats(): PreflightTest.RTCStats | undefined {\n    const firstMosSampleIdx = this._samples.findIndex(\n      sample => typeof sample.mos === 'number' && sample.mos > 0,\n    );\n\n    const samples = firstMosSampleIdx >= 0\n      ? this._samples.slice(firstMosSampleIdx)\n      : [];\n\n    if (!samples || !samples.length) {\n      return;\n    }\n\n    return ['jitter', 'mos', 'rtt'].reduce((statObj, stat) => {\n      const values = samples.map(s => s[stat]);\n      return {\n        ...statObj,\n        [stat]: {\n          average: Number((values.reduce((total, value) => total + value) / values.length).toPrecision(5)),\n          max: Math.max(...values),\n          min: Math.min(...values),\n        },\n      };\n    }, {} as any);\n  }\n\n  /**\n   * Returns a MediaStream from a media file\n   */\n  private _getStreamFromFile(): MediaStream {\n    const audioContext = this._options.audioContext;\n    if (!audioContext) {\n      throw new NotSupportedError('Cannot fake input audio stream: AudioContext is not supported by this browser.');\n    }\n\n    const audioEl: any = new Audio(COWBELL_AUDIO_URL);\n\n    audioEl.addEventListener('canplaythrough', () => audioEl.play());\n    if (typeof audioEl.setAttribute === 'function') {\n      audioEl.setAttribute('crossorigin', 'anonymous');\n    }\n\n    const src = audioContext.createMediaElementSource(audioEl);\n    const dest = audioContext.createMediaStreamDestination();\n    src.connect(dest);\n\n    return dest.stream;\n  }\n\n  /**\n   * Initialize the device\n   */\n  private _initDevice(token: string, options: PreflightTest.ExtendedOptions): void {\n    try {\n      this._device = new (options.deviceFactory || Device)(token, {\n        chunderw: options.chunderw,\n        codecPreferences: options.codecPreferences,\n        edge: options.edge,\n        eventgw: options.eventgw,\n        fileInputStream: options.fileInputStream,\n        logLevel: options.logLevel,\n        preflight: true,\n      } as IExtendedDeviceOptions);\n\n      this._device.once(Device.EventName.Registered, () => {\n        this._onDeviceRegistered();\n      });\n\n      this._device.once(Device.EventName.Error, (error: TwilioError) => {\n        this._onDeviceError(error);\n      });\n\n      this._device.register();\n    } catch (error) {\n      // We want to return before failing so the consumer can capture the event\n      setTimeout(() => {\n        this._onFailed(error);\n      });\n      return;\n    }\n\n    this._signalingTimeoutTimer = setTimeout(() => {\n      this._onDeviceError(new SignalingErrors.ConnectionError('WebSocket Connection Timeout'));\n    }, options.signalingTimeoutMs);\n  }\n\n  /**\n   * Called on {@link Device} error event\n   * @param error\n   */\n  private _onDeviceError(error: TwilioError): void {\n    this._device.destroy();\n    this._onFailed(error);\n  }\n\n  /**\n   * Called on {@link Device} ready event\n   */\n  private async _onDeviceRegistered(): Promise<void> {\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n\n    this._call = await this._device.connect({\n      rtcConfiguration: this._options.rtcConfiguration,\n    });\n    this._networkTiming.signaling = { start: Date.now() };\n    this._setupCallHandlers(this._call);\n\n    this._edge = this._device.edge || undefined;\n    if (this._options.fakeMicInput) {\n      this._echoTimer = setTimeout(() => this._device.disconnectAll(), ECHO_TEST_DURATION);\n\n      const audio = this._device.audio as any;\n      if (audio) {\n        audio.disconnect(false);\n        audio.outgoing(false);\n      }\n    }\n\n    this._call.once('disconnect', () => {\n      this._device.once(Device.EventName.Unregistered, () => this._onUnregistered());\n      this._device.destroy();\n    });\n\n    const publisher = this._call['_publisher'] as any;\n    publisher.on('error', () => {\n      if (!this._hasInsightsErrored) {\n        this._emitWarning('insights-connection-error',\n          'Received an error when attempting to connect to Insights gateway');\n      }\n      this._hasInsightsErrored = true;\n    });\n  }\n\n  /**\n   * Called when there is a fatal error\n   * @param error\n   */\n  private _onFailed(error: TwilioError | DOMException): void {\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n    this._releaseHandlers();\n    this._endTime = Date.now();\n    this._status = PreflightTest.Status.Failed;\n    this._log.debug(`#${PreflightTest.Events.Failed}`, error);\n    this.emit(PreflightTest.Events.Failed, error);\n  }\n\n  /**\n   * Called when the device goes offline.\n   * This indicates that the test has been completed, but we won't know if it failed or not.\n   * The onError event will be the indicator whether the test failed.\n   */\n  private _onUnregistered(): void {\n    // We need to make sure we always execute preflight.on('completed') last\n    // as client SDK sometimes emits 'offline' event before emitting fatal errors.\n    setTimeout(() => {\n      if (this._status === PreflightTest.Status.Failed) {\n        return;\n      }\n\n      clearTimeout(this._echoTimer);\n      clearTimeout(this._signalingTimeoutTimer);\n\n      this._releaseHandlers();\n      this._endTime = Date.now();\n      this._status = PreflightTest.Status.Completed;\n      this._report = this._getReport();\n      this._log.debug(`#${PreflightTest.Events.Completed}`, JSON.stringify(this._report));\n      this.emit(PreflightTest.Events.Completed, this._report);\n    }, 10);\n  }\n\n  /**\n   * Clean up all handlers for device and call\n   */\n  private _releaseHandlers(): void {\n    [this._device, this._call].forEach((emitter: EventEmitter) => {\n      if (emitter) {\n        emitter.eventNames().forEach((name: string) => emitter.removeAllListeners(name));\n      }\n    });\n  }\n\n  /**\n   * Setup the event handlers for the {@link Call} of the test call\n   * @param call\n   */\n  private _setupCallHandlers(call: Call): void {\n    if (this._options.fakeMicInput) {\n      // When volume events start emitting, it means all audio outputs have been created.\n      // Let's mute them if we're using fake mic input.\n      call.once('volume', () => {\n        call['_mediaHandler'].outputs\n          .forEach((output: AudioOutput) => output.audio.muted = true);\n      });\n    }\n\n    call.on('warning', (name: string, data: RTCWarning) => {\n      this._emitWarning(name, 'Received an RTCWarning. See .rtcWarning for the RTCWarning', data);\n    });\n\n    call.once('accept', () => {\n      this._callSid = call['_mediaHandler'].callSid;\n      this._status = PreflightTest.Status.Connected;\n      this._log.debug(`#${PreflightTest.Events.Connected}`);\n      this.emit(PreflightTest.Events.Connected);\n    });\n\n    call.on('sample', async (sample) => {\n      // RTC Stats are ready. We only need to get ICE candidate stats report once.\n      if (!this._latestSample) {\n        this._rtcIceCandidateStatsReport = await (\n          this._options.getRTCIceCandidateStatsReport || getRTCIceCandidateStatsReport\n        )(call['_mediaHandler'].version.pc);\n      }\n\n      this._latestSample = sample;\n      this._samples.push(sample);\n      this._log.debug(`#${PreflightTest.Events.Sample}`, JSON.stringify(sample));\n      this.emit(PreflightTest.Events.Sample, sample);\n    });\n\n    // TODO: Update the following once the SDK supports emitting these events\n    // Let's shim for now\n    [{\n      reportLabel: 'peerConnection',\n      type: 'pcconnection',\n     }, {\n      reportLabel: 'ice',\n      type: 'iceconnection',\n     }, {\n      reportLabel: 'dtls',\n      type: 'dtlstransport',\n     }, {\n      reportLabel: 'signaling',\n      type: 'signaling',\n     }].forEach(({type, reportLabel}) => {\n\n      const handlerName = `on${type}statechange`;\n      const originalHandler = call['_mediaHandler'][handlerName];\n\n      call['_mediaHandler'][handlerName] = (state: string) => {\n        const timing = (this._networkTiming as any)[reportLabel]\n          = (this._networkTiming as any)[reportLabel] || { start: 0 };\n\n        if (state === 'connecting' || state === 'checking') {\n          timing.start = Date.now();\n        } else if ((state === 'connected' || state === 'stable') && !timing.duration) {\n          timing.end = Date.now();\n          timing.duration = timing.end - timing.start;\n        }\n\n        originalHandler(state);\n      };\n    });\n  }\n\n  /**\n   * The callsid generated for the test call.\n   */\n  get callSid(): string | undefined {\n    return this._callSid;\n  }\n\n  /**\n   * A timestamp in milliseconds of when the test ended.\n   */\n  get endTime(): number | undefined {\n    return this._endTime;\n  }\n\n  /**\n   * The latest WebRTC sample collected.\n   */\n  get latestSample(): RTCSample | undefined {\n    return this._latestSample;\n  }\n\n  /**\n   * The report for this test.\n   */\n  get report(): PreflightTest.Report | undefined {\n    return this._report;\n  }\n\n  /**\n   * A timestamp in milliseconds of when the test started.\n   */\n  get startTime(): number {\n    return this._startTime;\n  }\n\n  /**\n   * The status of the test.\n   */\n  get status(): PreflightTest.Status {\n    return this._status;\n  }\n}\n\n/**\n * @mergeModuleWith PreflightTest\n */\nexport namespace PreflightTest {\n  /**\n   * The quality of the call determined by different mos ranges.\n   * Mos is calculated base on the WebRTC stats - rtt, jitter, and packet lost.\n   */\n  export enum CallQuality {\n    /**\n     * If the average mos is over 4.2.\n     */\n    Excellent = 'excellent',\n\n    /**\n     * If the average mos is between 4.1 and 4.2 both inclusive.\n     */\n    Great = 'great',\n\n    /**\n     * If the average mos is between 3.7 and 4.0 both inclusive.\n     */\n    Good = 'good',\n\n    /**\n     * If the average mos is between 3.1 and 3.6 both inclusive.\n     */\n    Fair = 'fair',\n\n    /**\n     * If the average mos is 3.0 or below.\n     */\n    Degraded = 'degraded',\n  }\n\n  /**\n   * Possible events that a [[PreflightTest]] might emit.\n   */\n  export enum Events {\n    /**\n     * See [[PreflightTest.completedEvent]]\n     */\n    Completed = 'completed',\n\n    /**\n     * See [[PreflightTest.connectedEvent]]\n     */\n    Connected = 'connected',\n\n    /**\n     * See [[PreflightTest.failedEvent]]\n     */\n    Failed = 'failed',\n\n    /**\n     * See [[PreflightTest.sampleEvent]]\n     */\n    Sample = 'sample',\n\n    /**\n     * See [[PreflightTest.warningEvent]]\n     */\n    Warning = 'warning',\n  }\n\n  /**\n   * Possible status of the test.\n   */\n  export enum Status {\n    /**\n     * Call to Twilio has initiated.\n     */\n    Connecting = 'connecting',\n\n    /**\n     * Call to Twilio has been established.\n     */\n    Connected = 'connected',\n\n    /**\n     * The connection to Twilio has been disconnected and the test call has completed.\n     */\n    Completed = 'completed',\n\n    /**\n     * The test has stopped and failed.\n     */\n    Failed = 'failed',\n  }\n\n  /**\n   * The WebRTC API's [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n   * dictionary which provides information related to an ICE candidate.\n   */\n  export type RTCIceCandidateStats = any;\n\n  /**\n   * Options that may be passed to {@link PreflightTest} constructor for internal testing.\n   * @internal\n   */\n  export interface ExtendedOptions extends Options {\n    /**\n     * The AudioContext instance to use\n     */\n    audioContext?: AudioContext;\n\n    /**\n     * A string or array of strings representing the URI of the signaling\n     * gateway to connect to.\n     */\n    chunderw?: string | string[];\n\n    /**\n     * Device class to use.\n     */\n    deviceFactory?: typeof Device;\n\n    /**\n     * A string representing the URI of the insights gateway to connect to.\n     */\n    eventgw?: string;\n\n    /**\n     * File input stream to use instead of reading from mic\n     */\n    fileInputStream?: MediaStream;\n\n    /**\n     * The getRTCIceCandidateStatsReport to use for testing.\n     */\n    getRTCIceCandidateStatsReport?: Function;\n\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor.\n     */\n    rtcConfiguration?: RTCConfiguration;\n  }\n\n  /**\n   * A WebRTC stats report containing relevant information about selected and gathered ICE candidates\n   */\n  export interface RTCIceCandidateStatsReport {\n    /**\n     * An array of WebRTC stats for the ICE candidates gathered when connecting to media.\n     */\n    iceCandidateStats: RTCIceCandidateStats[];\n\n    /**\n     * A WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n     */\n    selectedIceCandidatePairStats?: RTCSelectedIceCandidatePairStats;\n  }\n\n  /**\n   * Options passed to {@link PreflightTest} constructor.\n   */\n  export interface Options {\n    /**\n     * An ordered array of codec names that will be used during the test call,\n     * from most to least preferred.\n     * @default ['pcmu','opus']\n     */\n    codecPreferences?: Call.Codec[];\n\n    /**\n     * Specifies which Twilio Data Center to use when initiating the test call.\n     * Please see this\n     * [page](https://www.twilio.com/docs/voice/client/edges)\n     * for the list of available edges.\n     * @default roaming\n     */\n    edge?: string;\n\n    /**\n     * If set to `true`, the test call will ignore microphone input and will use a default audio file.\n     * If set to `false`, the test call will capture the audio from the microphone.\n     * Setting this to `true` is only supported on Chrome and will throw a fatal error on other browsers\n     * @default false\n     */\n    fakeMicInput?: boolean;\n\n    /**\n     * An array of custom ICE servers to use to connect media. If you provide both STUN and TURN server configurations,\n     * the test will detect whether a TURN server is required to establish a connection.\n     *\n     * The following example demonstrates how to use [Twilio's Network Traversal Service](https://www.twilio.com/stun-turn)\n     * to generate STUN/TURN credentials and how to specify a specific [edge location](https://www.twilio.com/docs/global-infrastructure/edge-locations).\n     *\n     * ```ts\n     * import Client from 'twilio';\n     * import { Device } from '@twilio/voice-sdk';\n     *\n     * // Generate the STUN and TURN server credentials with a ttl of 120 seconds\n     * const client = Client(twilioAccountSid, authToken);\n     * const token = await client.tokens.create({ ttl: 120 });\n     *\n     * let iceServers = token.iceServers;\n     *\n     * // By default, global will be used as the default edge location.\n     * // You can replace global with a specific edge name for each of the iceServer configuration.\n     * iceServers = iceServers.map(config => {\n     *   let { url, urls, ...rest } = config;\n     *   url = url.replace('global', 'ashburn');\n     *   urls = urls.replace('global', 'ashburn');\n     *\n     *   return { url, urls, ...rest };\n     * });\n     *\n     * // Use the TURN credentials using the iceServers parameter\n     * const preflightTest = Device.runPreflight(token, { iceServers });\n     *\n     * // Read from the report object to determine whether TURN is required to connect to media\n     * preflightTest.on('completed', (report) => {\n     *   console.log(report.isTurnRequired);\n     * });\n     * ```\n     *\n     * @default null\n     */\n    iceServers?: RTCIceServer[];\n\n    /**\n     * Log level to use in the Device.\n     * @default 'error'\n     */\n    logLevel?: string;\n\n    /**\n     * Amount of time to wait for setting up signaling connection.\n     * @default 10000\n     */\n    signalingTimeoutMs?: number;\n  }\n\n  /**\n   * Represents the WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n   */\n  export interface RTCSelectedIceCandidatePairStats {\n    /**\n     * An [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n     * object which provides information related to the selected local ICE candidate.\n     */\n    localCandidate: RTCIceCandidateStats;\n\n    /**\n     * An [RTCIceCandidateStats](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateStats)\n     * object which provides information related to the selected remote ICE candidate.\n     */\n    remoteCandidate: RTCIceCandidateStats;\n  }\n\n  /**\n   * Represents RTC related stats that are extracted from RTC samples.\n   */\n  export interface RTCStats {\n    /**\n     * Packets delay variation.\n     */\n    jitter: Stats;\n\n    /**\n     * Mean opinion score, 1.0 through roughly 4.5.\n     */\n    mos: Stats;\n\n    /**\n     * Round trip time, to the server back to the client.\n     */\n    rtt: Stats;\n  }\n\n  /**\n   * Represents general stats for a specific metric.\n   */\n  export interface Stats {\n    /**\n     * The average value for this metric.\n     */\n    average: number;\n\n    /**\n     * The maximum value for this metric.\n     */\n    max: number;\n\n    /**\n     * The minimum value for this metric.\n     */\n    min: number;\n  }\n\n  /**\n   * Represents the report generated from a {@link PreflightTest}.\n   */\n  export interface Report {\n    /**\n     * The quality of the call determined by different mos ranges.\n     */\n    callQuality?: CallQuality;\n\n    /**\n     * CallSid generaged during the test.\n     */\n    callSid: string | undefined;\n\n    /**\n     * The edge that the test call was connected to.\n     */\n    edge?: string;\n\n    /**\n     * An array of WebRTC stats for the ICE candidates gathered when connecting to media.\n     */\n    iceCandidateStats: RTCIceCandidateStats[];\n\n    /**\n     * Whether a TURN server is required to connect to media.\n     * This is dependent on the selected ICE candidates, and will be true if either is of type \"relay\",\n     * false if both are of another type, or undefined if there are no selected ICE candidates.\n     * See `PreflightTest.Options.iceServers` for more details.\n     */\n    isTurnRequired?: boolean;\n\n    /**\n     * Network related time measurements.\n     */\n    networkTiming: NetworkTiming;\n\n    /**\n     * WebRTC samples collected during the test.\n     */\n    samples: RTCSample[];\n\n    /**\n     * The edge passed to `Device.runPreflight`.\n     */\n    selectedEdge?: string;\n\n    /**\n     * A WebRTC stats for the ICE candidate pair used to connect to media, if candidates were selected.\n     */\n    selectedIceCandidatePairStats?: RTCSelectedIceCandidatePairStats;\n\n    /**\n     * RTC related stats captured during the test.\n     */\n    stats?: RTCStats;\n\n    /**\n     * Time measurements of test run time.\n     */\n    testTiming: TimeMeasurement;\n\n    /**\n     * Calculated totals in RTC statistics samples.\n     */\n    totals?: RTCSampleTotals;\n\n    /**\n     * List of warning names and warning data detected during this test.\n     */\n    warnings: PreflightTest.Warning[];\n  }\n\n  /**\n   * A warning that can be raised by Preflight, and returned in the Report.warnings field.\n   */\n  export interface Warning {\n    /**\n     * Description of the Warning\n     */\n    description: string;\n    /**\n     * Name of the Warning\n     */\n    name: string;\n    /**\n     * If applicable, the RTCWarning that triggered this warning.\n     */\n    rtcWarning?: RTCWarning;\n  }\n }\n", "import { EventEmitter } from 'events';\nimport Backoff from './backoff';\nimport { SignalingErrors } from './errors';\nimport Log from './log';\n\nconst WebSocket = globalThis.WebSocket;\n\nconst CONNECT_SUCCESS_TIMEOUT = 10000;\nconst CONNECT_TIMEOUT = 5000;\nconst HEARTBEAT_TIMEOUT = 15000;\nconst MAX_PREFERRED_DURATION = 15000;\nconst MAX_PRIMARY_DURATION = Infinity;\nconst MAX_PREFERRED_DELAY = 1000;\nconst MAX_PRIMARY_DELAY = 20000;\n\nexport interface IMessageEvent {\n  data: string;\n  target: WebSocket;\n  type: string;\n}\n\n/**\n * All possible states of WSTransport.\n */\nexport enum WSTransportState {\n  /**\n   * The WebSocket is not open but is trying to connect.\n   */\n  Connecting = 'connecting',\n\n  /**\n   * The WebSocket is not open and is not trying to connect.\n   */\n  Closed = 'closed',\n\n  /**\n   * The underlying WebSocket is open and active.\n   */\n  Open = 'open',\n}\n\n/**\n * Options to be passed to the WSTransport constructor.\n */\nexport interface IWSTransportConstructorOptions {\n  /**\n   * Time in milliseconds before websocket times out when attempting to connect\n   */\n  connectTimeoutMs?: number;\n\n  /**\n   * The maximum delay for the preferred backoff to make a connection attempt.\n   */\n  maxPreferredDelayMs?: number;\n\n  /**\n   * Max duration to attempt connecting to a preferred URI.\n   */\n  maxPreferredDurationMs?: number;\n\n  /**\n   * The maximum delay for the rimary backoff to make a connection attempt.\n   */\n  maxPrimaryDelayMs?: number;\n\n  /**\n   * Max duration to attempt connecting to a preferred URI.\n   */\n  maxPrimaryDurationMs?: number;\n\n  /**\n   * A WebSocket factory to use instead of WebSocket.\n   */\n  WebSocket?: typeof WebSocket;\n}\n\n/**\n * Type of the stored options property internally used by the WSTransport class.\n */\ntype IInternalWSTransportConstructorOptions = Required<IWSTransportConstructorOptions>;\n\n/**\n * WebSocket Transport\n */\nexport default class WSTransport extends EventEmitter {\n  private static defaultConstructorOptions: IInternalWSTransportConstructorOptions = {\n    WebSocket,\n    connectTimeoutMs: CONNECT_TIMEOUT,\n    maxPreferredDelayMs: MAX_PREFERRED_DELAY,\n    maxPreferredDurationMs: MAX_PREFERRED_DURATION,\n    maxPrimaryDelayMs: MAX_PRIMARY_DELAY,\n    maxPrimaryDurationMs: MAX_PRIMARY_DURATION,\n  };\n\n  /**\n   * The current state of the WSTransport.\n   */\n  state: WSTransportState = WSTransportState.Closed;\n\n  /**\n   * The backoff instance used to schedule reconnection attempts.\n   */\n  private readonly _backoff: {\n    preferred: any;\n    primary: any;\n  };\n\n  /**\n   * Start timestamp values for backoffs.\n   */\n  private _backoffStartTime: {\n    preferred: number | null;\n    primary: number | null;\n  } = {\n    preferred: null,\n    primary: null,\n  };\n\n  /**\n   * The URI that the transport is connecting or connected to. The value of this\n   * property is `null` if a connection attempt has not been made yet.\n   */\n  private _connectedUri: string | null = null;\n\n  /**\n   * The current connection timeout. If it times out, we've failed to connect\n   * and should try again.\n   *\n   * We use any here because NodeJS returns a Timer and browser returns a number\n   * and one can't be cast to the other, despite their working interoperably.\n   */\n  private _connectTimeout?: any;\n\n  /**\n   * The current connection timeout. If it times out, we've failed to connect\n   * and should try again.\n   *\n   * We use any here because NodeJS returns a Timer and browser returns a number\n   * and one can't be cast to the other, despite their working interoperably.\n   */\n  private _heartbeatTimeout?: any;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = new Log('WSTransport');\n\n  /**\n   * Options after missing values are defaulted.\n   */\n  private _options: IInternalWSTransportConstructorOptions;\n\n  /**\n   * Preferred URI endpoint to connect to.\n   */\n  private _preferredUri: string | null;\n\n  /**\n   * Previous state of the connection\n   */\n  private _previousState: WSTransportState;\n\n  /**\n   * Whether we should attempt to fallback if we receive an applicable error\n   * when trying to connect to a signaling endpoint.\n   */\n  private _shouldFallback: boolean = false;\n\n  /**\n   * The currently connecting or open WebSocket.\n   */\n  private _socket?: WebSocket;\n\n  /**\n   * The time the active connection was opened.\n   */\n  private _timeOpened?: number;\n\n  /**\n   * The current uri index that the transport is connected to.\n   */\n  private _uriIndex: number = 0;\n\n  /**\n   * List of URI of the endpoints to connect to.\n   */\n  private _uris: string[];\n\n  /**\n   * @constructor\n   * @param uris - List of URI of the endpoints to connect to.\n   * @param [options] - Constructor options.\n   */\n  constructor(uris: string[], options: IWSTransportConstructorOptions = { }) {\n    super();\n\n    this._options = { ...WSTransport.defaultConstructorOptions, ...options };\n\n    this._uris = uris;\n\n    this._backoff = this._setupBackoffs();\n  }\n\n  /**\n   * Close the WebSocket, and don't try to reconnect.\n   */\n  close(): void {\n    this._log.info('WSTransport.close() called...');\n    this._close();\n  }\n\n  /**\n   * Attempt to open a WebSocket connection.\n   */\n  open(): void {\n    this._log.info('WSTransport.open() called...');\n\n    if (this._socket &&\n        (this._socket.readyState === WebSocket.CONNECTING ||\n        this._socket.readyState === WebSocket.OPEN)) {\n      this._log.info('WebSocket already open.');\n      return;\n    }\n\n    if (this._preferredUri) {\n      this._connect(this._preferredUri);\n    } else {\n      this._connect(this._uris[this._uriIndex]);\n    }\n  }\n\n  /**\n   * Send a message through the WebSocket connection.\n   * @param message - A message to send to the endpoint.\n   * @returns Whether the message was sent.\n   */\n  send(message: string): boolean {\n    this._log.debug(`Sending: ${message}`);\n    // We can't send the message if the WebSocket isn't open\n    if (!this._socket || this._socket.readyState !== WebSocket.OPEN) {\n      this._log.debug('Cannot send message. WebSocket is not open.');\n      return false;\n    }\n\n    try {\n      this._socket.send(message);\n    } catch (e) {\n      // Some unknown error occurred. Reset the socket to get a fresh session.\n      this._log.error('Error while sending message:', e.message);\n      this._closeSocket();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Update the preferred URI to connect to. Useful for Call signaling\n   * reconnection, which requires connecting on the same edge. If `null` is\n   * passed, the preferred URI is unset and the original `uris` array and\n   * `uriIndex` is used to determine the signaling URI to connect to.\n   * @param uri\n   */\n  updatePreferredURI(uri: string | null) {\n    this._preferredUri = uri;\n  }\n\n  /**\n   * Update acceptable URIs to reconnect to. Resets the URI index to 0.\n   */\n  updateURIs(uris: string[] | string) {\n    if (typeof uris === 'string') {\n      uris = [uris];\n    }\n\n    this._uris = uris;\n    this._uriIndex = 0;\n  }\n\n  /**\n   * Close the WebSocket, and don't try to reconnect.\n   */\n  private _close(): void {\n    this._setState(WSTransportState.Closed);\n    this._closeSocket();\n  }\n\n  /**\n   * Close the WebSocket and remove all event listeners.\n   */\n  private _closeSocket(): void {\n    clearTimeout(this._connectTimeout);\n    clearTimeout(this._heartbeatTimeout);\n\n    this._log.info('Closing and cleaning up WebSocket...');\n\n    if (!this._socket) {\n      this._log.info('No WebSocket to clean up.');\n      return;\n    }\n\n    this._socket.removeEventListener('close', this._onSocketClose as any);\n    this._socket.removeEventListener('error', this._onSocketError as any);\n    this._socket.removeEventListener('message', this._onSocketMessage as any);\n    this._socket.removeEventListener('open', this._onSocketOpen as any);\n\n    if (this._socket.readyState === WebSocket.CONNECTING ||\n        this._socket.readyState === WebSocket.OPEN) {\n      this._socket.close();\n    }\n\n    // Reset backoff counter if connection was open for long enough to be considered successful\n    if (this._timeOpened && Date.now() - this._timeOpened > CONNECT_SUCCESS_TIMEOUT) {\n      this._resetBackoffs();\n    }\n\n    if (this.state !== WSTransportState.Closed) {\n      this._performBackoff();\n    }\n    delete this._socket;\n\n    this.emit('close');\n  }\n\n  /**\n   * Attempt to connect to the endpoint via WebSocket.\n   * @param [uri] - URI string to connect to.\n   * @param [retryCount] - Retry number, if this is a retry. Undefined if\n   *   first attempt, 1+ if a retry.\n   */\n  private _connect(uri: string, retryCount?: number): void {\n    this._log.info(\n      typeof retryCount === 'number'\n        ? `Attempting to reconnect (retry #${retryCount})...`\n        : 'Attempting to connect...',\n    );\n\n    this._closeSocket();\n\n    this._setState(WSTransportState.Connecting);\n    this._connectedUri = uri;\n\n    try {\n      this._socket = new this._options.WebSocket(this._connectedUri);\n    } catch (e) {\n      this._log.error('Could not connect to endpoint:', e.message);\n      this._close();\n      this.emit('error', {\n        code: 31000,\n        message: e.message || `Could not connect to ${this._connectedUri}`,\n        twilioError: new SignalingErrors.ConnectionDisconnected(),\n      });\n      return;\n    }\n\n    this._socket.addEventListener('close', this._onSocketClose as any);\n    this._socket.addEventListener('error', this._onSocketError as any);\n    this._socket.addEventListener('message', this._onSocketMessage as any);\n    this._socket.addEventListener('open', this._onSocketOpen as any);\n\n    delete this._timeOpened;\n\n    this._connectTimeout = setTimeout(() => {\n      this._log.info('WebSocket connection attempt timed out.');\n      this._moveUriIndex();\n      this._closeSocket();\n    }, this._options.connectTimeoutMs);\n  }\n\n  /**\n   * Move the uri index to the next index\n   * If the index is at the end, the index goes back to the first one.\n   */\n  private _moveUriIndex = (): void => {\n    this._uriIndex++;\n    if (this._uriIndex >= this._uris.length) {\n      this._uriIndex = 0;\n    }\n  }\n\n  /**\n   * Called in response to WebSocket#close event.\n   */\n  private _onSocketClose = (event: CloseEvent): void => {\n    this._log.error(`Received websocket close event code: ${event.code}. Reason: ${event.reason}`);\n    // 1006: Abnormal close. When the server is unreacheable\n    // 1015: TLS Handshake error\n    if (event.code === 1006 || event.code === 1015) {\n      this.emit('error', {\n        code: 31005,\n        message: event.reason ||\n          'Websocket connection to Twilio\\'s signaling servers were ' +\n          'unexpectedly ended. If this is happening consistently, there may ' +\n          'be an issue resolving the hostname provided. If a region or an ' +\n          'edge is being specified in Device setup, ensure it is valid.',\n        twilioError: new SignalingErrors.ConnectionError(),\n      });\n\n      const wasConnected = (\n        // Only in Safari and certain Firefox versions, on network interruption, websocket drops right away with 1006\n        // Let's check current state if it's open, meaning we should not fallback\n        // because we're coming from a previously connected session\n        this.state === WSTransportState.Open ||\n\n        // But on other browsers, websocket doesn't drop\n        // but our heartbeat catches it, setting the internal state to \"Connecting\".\n        // With this, we should check the previous state instead.\n        this._previousState === WSTransportState.Open\n      );\n\n      // Only fallback if this is not the first error\n      // and if we were not connected previously\n      if (this._shouldFallback || !wasConnected) {\n        this._moveUriIndex();\n      }\n\n      this._shouldFallback = true;\n    }\n    this._closeSocket();\n  }\n\n  /**\n   * Called in response to WebSocket#error event.\n   */\n  private _onSocketError = (err: Error): void => {\n    this._log.error(`WebSocket received error: ${err.message}`);\n    this.emit('error', {\n      code: 31000,\n      message: err.message || 'WSTransport socket error',\n      twilioError: new SignalingErrors.ConnectionDisconnected(),\n    });\n  }\n\n  /**\n   * Called in response to WebSocket#message event.\n   */\n  private _onSocketMessage = (message: IMessageEvent): void => {\n    // Clear heartbeat timeout on any incoming message, as they\n    // all indicate an active connection.\n    this._setHeartbeatTimeout();\n\n    // Filter and respond to heartbeats\n    if (this._socket && message.data === '\\n') {\n      this._socket.send('\\n');\n      this._log.debug('heartbeat');\n      return;\n    }\n\n    if (message && typeof message.data === 'string') {\n      this._log.debug(`Received: ${message.data}`);\n    }\n\n    this.emit('message', message);\n  }\n\n  /**\n   * Called in response to WebSocket#open event.\n   */\n  private _onSocketOpen = (): void => {\n    this._log.info('WebSocket opened successfully.');\n    this._timeOpened = Date.now();\n    this._shouldFallback = false;\n    this._setState(WSTransportState.Open);\n    clearTimeout(this._connectTimeout);\n\n    this._resetBackoffs();\n\n    this._setHeartbeatTimeout();\n    this.emit('open');\n  }\n\n  /**\n   * Perform a backoff. If a preferred URI is set (not null), then backoff\n   * using the preferred mechanism. Otherwise, use the primary mechanism.\n   */\n  private _performBackoff(): void {\n    if (this._preferredUri) {\n      this._log.info('Preferred URI set; backing off.');\n      this._backoff.preferred.backoff();\n    } else {\n      this._log.info('Preferred URI not set; backing off.');\n      this._backoff.primary.backoff();\n    }\n  }\n\n  /**\n   * Reset both primary and preferred backoff mechanisms.\n   */\n  private _resetBackoffs() {\n    this._backoff.preferred.reset();\n    this._backoff.primary.reset();\n\n    this._backoffStartTime.preferred = null;\n    this._backoffStartTime.primary = null;\n  }\n\n  /**\n   * Set a timeout to reconnect after HEARTBEAT_TIMEOUT milliseconds\n   *   have passed without receiving a message over the WebSocket.\n   */\n  private _setHeartbeatTimeout(): void {\n    clearTimeout(this._heartbeatTimeout);\n    this._heartbeatTimeout = setTimeout(() => {\n      this._log.info(`No messages received in ${HEARTBEAT_TIMEOUT / 1000} seconds. Reconnecting...`);\n      this._shouldFallback = true;\n      this._closeSocket();\n    }, HEARTBEAT_TIMEOUT);\n  }\n\n  /**\n   * Set the current and previous state\n   */\n  private _setState(state: WSTransportState): void {\n    this._previousState = this.state;\n    this.state = state;\n  }\n\n  /**\n   * Set up the primary and preferred backoff mechanisms.\n   */\n  private _setupBackoffs(): typeof WSTransport.prototype._backoff {\n    const preferredBackoffConfig = {\n      factor: 2.0,\n      jitter: 0.40,\n      max: this._options.maxPreferredDelayMs,\n      min: 100,\n    };\n    this._log.info('Initializing preferred transport backoff using config: ', preferredBackoffConfig);\n    const preferredBackoff = new Backoff(preferredBackoffConfig);\n\n    preferredBackoff.on('backoff', (attempt: number, delay: number) => {\n      if (this.state === WSTransportState.Closed) {\n        this._log.info('Preferred backoff initiated but transport state is closed; not attempting a connection.');\n        return;\n      }\n      this._log.info(`Will attempt to reconnect Websocket to preferred URI in ${delay}ms`);\n      if (attempt === 0) {\n        this._backoffStartTime.preferred = Date.now();\n        this._log.info(`Preferred backoff start; ${this._backoffStartTime.preferred}`);\n      }\n    });\n\n    preferredBackoff.on('ready', (attempt: number, _delay: number) => {\n      if (this.state === WSTransportState.Closed) {\n        this._log.info('Preferred backoff ready but transport state is closed; not attempting a connection.');\n        return;\n      }\n      if (this._backoffStartTime.preferred === null) {\n        this._log.info('Preferred backoff start time invalid; not attempting a connection.');\n        return;\n      }\n      if (Date.now() - this._backoffStartTime.preferred > this._options.maxPreferredDurationMs) {\n        this._log.info('Max preferred backoff attempt time exceeded; falling back to primary backoff.');\n        this._preferredUri = null;\n        this._backoff.primary.backoff();\n        return;\n      }\n      if (typeof this._preferredUri !== 'string') {\n        this._log.info('Preferred URI cleared; falling back to primary backoff.');\n        this._preferredUri = null;\n        this._backoff.primary.backoff();\n        return;\n      }\n      this._connect(this._preferredUri, attempt + 1);\n    });\n\n    const primaryBackoffConfig = {\n      factor: 2.0,\n      jitter: 0.40,\n      max: this._options.maxPrimaryDelayMs,\n      // We only want a random initial delay if there are any fallback edges\n      // Initial delay between 1s and 5s both inclusive\n      min: this._uris && this._uris.length > 1\n        ? Math.floor(Math.random() * (5000 - 1000 + 1)) + 1000\n        : 100,\n    };\n    this._log.info('Initializing primary transport backoff using config: ', primaryBackoffConfig);\n    const primaryBackoff = new Backoff(primaryBackoffConfig);\n\n    primaryBackoff.on('backoff', (attempt: number, delay: number) => {\n      if (this.state === WSTransportState.Closed) {\n        this._log.info('Primary backoff initiated but transport state is closed; not attempting a connection.');\n        return;\n      }\n      this._log.info(`Will attempt to reconnect WebSocket in ${delay}ms`);\n      if (attempt === 0) {\n        this._backoffStartTime.primary = Date.now();\n        this._log.info(`Primary backoff start; ${this._backoffStartTime.primary}`);\n      }\n    });\n\n    primaryBackoff.on('ready', (attempt: number, _delay: number) => {\n      if (this.state === WSTransportState.Closed) {\n        this._log.info('Primary backoff ready but transport state is closed; not attempting a connection.');\n        return;\n      }\n      if (this._backoffStartTime.primary === null) {\n        this._log.info('Primary backoff start time invalid; not attempting a connection.');\n        return;\n      }\n      if (Date.now() - this._backoffStartTime.primary > this._options.maxPrimaryDurationMs) {\n        this._log.info('Max primary backoff attempt time exceeded; not attempting a connection.');\n        return;\n      }\n      this._connect(this._uris[this._uriIndex], attempt + 1);\n    });\n\n    return {\n      preferred: preferredBackoff,\n      primary: primaryBackoff,\n    };\n  }\n\n  /**\n   * The uri the transport is currently connected to\n   */\n  get uri(): string | null {\n    return this._connectedUri;\n  }\n}\n", "// @ts-nocheck\nimport { EventEmitter } from 'events';\nimport * as C from './constants';\nimport { GeneralErrors, SignalingErrors } from './errors';\nimport Log from './log';\nimport WSTransport from './wstransport';\n\nconst PSTREAM_VERSION = '1.6';\n\n// In seconds\nconst MAX_RECONNECT_TIMEOUT_ALLOWED = 30;\n\n/**\n * Constructor for PStream objects.\n *\n * @exports PStream as Twilio.PStream\n * @memberOf Twilio\n * @borrows EventEmitter#addListener as #addListener\n * @borrows EventEmitter#removeListener as #removeListener\n * @borrows EventEmitter#emit as #emit\n * @borrows EventEmitter#hasListener as #hasListener\n * @constructor\n * @param {string} token The Twilio capabilities JWT\n * @param {string[]} uris An array of PStream endpoint URIs\n * @param {object} [options]\n * @config {boolean} [options.backoffMaxMs=20000] Enable debugging\n */\nclass PStream extends EventEmitter {\n  constructor(token, uris, options) {\n    super();\n\n    if (!(this instanceof PStream)) {\n      return new PStream(token, uris, options);\n    }\n    const defaults = {\n      TransportFactory: WSTransport,\n    };\n    options = options || {};\n    for (const prop in defaults) {\n      if (prop in options) {\n        continue;\n      }\n      options[prop] = defaults[prop];\n    }\n    this.options = options;\n    this.token = token || '';\n    this.status = 'disconnected';\n    this.gateway = null;\n    this.region = null;\n    this._messageQueue = [];\n    this._preferredUri = null;\n    this._uris = uris;\n\n    this._handleTransportClose = this._handleTransportClose.bind(this);\n    this._handleTransportError = this._handleTransportError.bind(this);\n    this._handleTransportMessage = this._handleTransportMessage.bind(this);\n    this._handleTransportOpen = this._handleTransportOpen.bind(this);\n\n    this._log = new Log('PStream');\n\n    // NOTE(mroberts): EventEmitter requires that we catch all errors.\n    this.on('error', () => {\n      this._log.warn('Unexpected error handled in pstream');\n    });\n\n    /*\n     *events used by device\n     *'invite',\n     *'ready',\n     *'error',\n     *'offline',\n     *\n     *'cancel',\n     *'presence',\n     *'roster',\n     *'answer',\n     *'candidate',\n     *'hangup'\n     */\n\n    const self = this;\n\n    this.addListener('ready', () => {\n      self.status = 'ready';\n    });\n\n    this.addListener('offline', () => {\n      self.status = 'offline';\n    });\n\n    this.addListener('close', () => {\n      self._log.info('Received \"close\" from server. Destroying PStream...');\n      self._destroy();\n    });\n\n    this.transport = new this.options.TransportFactory(this._uris, {\n      backoffMaxMs: this.options.backoffMaxMs,\n      maxPreferredDurationMs: this.options.maxPreferredDurationMs,\n    });\n\n    Object.defineProperties(this, {\n      uri: {\n        enumerable: true,\n        get() {\n          return this.transport.uri;\n        },\n      },\n    });\n\n    this.transport.on('close', this._handleTransportClose);\n    this.transport.on('error', this._handleTransportError);\n    this.transport.on('message', this._handleTransportMessage);\n    this.transport.on('open', this._handleTransportOpen);\n    this.transport.open();\n\n    return this;\n  }\n}\n\nPStream.prototype._handleTransportClose = function() {\n  this.emit('transportClose');\n\n  if (this.status !== 'disconnected') {\n    if (this.status !== 'offline') {\n      this.emit('offline', this);\n    }\n    this.status = 'disconnected';\n  }\n};\n\nPStream.prototype._handleTransportError = function(error) {\n  if (!error) {\n    this.emit('error', { error: {\n      code: 31000,\n      message: 'Websocket closed without a provided reason',\n      twilioError: new SignalingErrors.ConnectionDisconnected(),\n    } });\n    return;\n  }\n  // We receive some errors without call metadata (just the error). We need to convert these\n  // to be contained within the 'error' field so that these errors match the expected format.\n  this.emit('error', typeof error.code !== 'undefined' ?  { error } : error);\n};\n\nPStream.prototype._handleTransportMessage = function(msg) {\n  if (!msg || !msg.data || typeof msg.data !== 'string') {\n    return;\n  }\n\n  const { type, payload = {} } = JSON.parse(msg.data);\n  this.gateway = payload.gateway || this.gateway;\n  this.region = payload.region || this.region;\n\n  if (type === 'error' && payload.error) {\n    payload.error.twilioError = new SignalingErrors.ConnectionError();\n  }\n\n  this.emit(type, payload);\n};\n\nPStream.prototype._handleTransportOpen = function() {\n  this.status = 'connected';\n  this.setToken(this.token);\n\n  this.emit('transportOpen');\n\n  const messages = this._messageQueue.splice(0, this._messageQueue.length);\n  messages.forEach(message => this._publish(...message));\n};\n\n/**\n * @return {string}\n */\nPStream.toString = () => '[Twilio.PStream class]';\nPStream.prototype.toString = () => '[Twilio.PStream instance]';\n\nPStream.prototype.setToken = function(token) {\n  this._log.info('Setting token and publishing listen');\n  this.token = token;\n\n  let reconnectTimeout = 0;\n  const t = this.options.maxPreferredDurationMs;\n  this._log.info(`maxPreferredDurationMs:${t}`);\n  if (typeof t === 'number' && t >= 0) {\n    reconnectTimeout = Math.min(Math.ceil(t / 1000), MAX_RECONNECT_TIMEOUT_ALLOWED);\n  }\n\n  this._log.info(`reconnectTimeout:${reconnectTimeout}`);\n  const payload = {\n    browserinfo: getBrowserInfo(),\n    reconnectTimeout,\n    token,\n  };\n\n  this._publish('listen', payload);\n};\n\nPStream.prototype.sendMessage = function(\n  callsid,\n  content,\n  contenttype = 'application/json',\n  messagetype,\n  voiceeventsid,\n) {\n  const payload = {\n    callsid,\n    content,\n    contenttype,\n    messagetype,\n    voiceeventsid,\n  };\n  this._publish('message', payload, true);\n};\n\nPStream.prototype.register = function(mediaCapabilities) {\n  const regPayload = { media: mediaCapabilities };\n  this._publish('register', regPayload, true);\n};\n\nPStream.prototype.invite = function(sdp, callsid, params) {\n  const payload = {\n    callsid,\n    sdp,\n    twilio: params ? { params } : {},\n  };\n  this._publish('invite', payload, true);\n};\n\nPStream.prototype.reconnect = function(sdp, callsid, reconnect) {\n  const payload = {\n    callsid,\n    reconnect,\n    sdp,\n    twilio: {},\n  };\n  this._publish('invite', payload, true);\n};\n\nPStream.prototype.answer = function(sdp, callsid) {\n  this._publish('answer', { sdp, callsid }, true);\n};\n\nPStream.prototype.dtmf = function(callsid, digits) {\n  this._publish('dtmf', { callsid, dtmf: digits }, true);\n};\n\nPStream.prototype.hangup = function(callsid, message) {\n  const payload = message ? { callsid, message } : { callsid };\n  this._publish('hangup', payload, true);\n};\n\nPStream.prototype.reject = function(callsid) {\n  this._publish('reject', { callsid }, true);\n};\n\nPStream.prototype.reinvite = function(sdp, callsid) {\n  this._publish('reinvite', { sdp, callsid }, false);\n};\n\nPStream.prototype._destroy = function() {\n  this.transport.removeListener('close', this._handleTransportClose);\n  this.transport.removeListener('error', this._handleTransportError);\n  this.transport.removeListener('message', this._handleTransportMessage);\n  this.transport.removeListener('open', this._handleTransportOpen);\n  this.transport.close();\n\n  this.emit('offline', this);\n};\n\nPStream.prototype.destroy = function() {\n  this._log.info('PStream.destroy() called...');\n  this._destroy();\n  return this;\n};\n\nPStream.prototype.updatePreferredURI = function(uri) {\n  this._preferredUri = uri;\n  this.transport.updatePreferredURI(uri);\n};\n\nPStream.prototype.updateURIs = function(uris) {\n  this._uris = uris;\n  this.transport.updateURIs(this._uris);\n};\n\nPStream.prototype.publish = function(type, payload) {\n  return this._publish(type, payload, true);\n};\n\nPStream.prototype._publish = function(type, payload, shouldRetry) {\n  const msg = JSON.stringify({\n    payload,\n    type,\n    version: PSTREAM_VERSION,\n  });\n  const isSent = !!this.transport.send(msg);\n\n  if (!isSent) {\n    this.emit('error', { error: {\n      code: 31009,\n      message: 'No transport available to send or receive messages',\n      twilioError: new GeneralErrors.TransportError(),\n    } });\n\n    if (shouldRetry) {\n      this._messageQueue.push([type, payload, true]);\n    }\n  }\n};\n\nfunction getBrowserInfo() {\n  const nav = typeof navigator !== 'undefined' ? navigator : {};\n\n  const info = {\n    browser: {\n      platform: nav.platform || 'unknown',\n      userAgent: nav.userAgent || 'unknown',\n    },\n    p: 'browser',\n    plugin: 'rtc',\n    v: C.RELEASE_VERSION,\n  };\n\n  return info;\n}\n\nexport default PStream;\n", "import { InvalidArgumentError } from './errors';\n\n/**\n * Valid edges.\n */\nexport enum Edge {\n  /**\n   * Public edges\n   */\n  Sydney = 'sydney',\n  SaoPaulo = 'sao-paulo',\n  Dublin = 'dublin',\n  Frankfurt = 'frankfurt',\n  Tokyo = 'tokyo',\n  Singapore = 'singapore',\n  Ashburn = 'ashburn',\n  Umatilla = 'umatilla',\n  Roaming = 'roaming',\n  /**\n   * Interconnect edges\n   */\n  AshburnIx = 'ashburn-ix',\n  SanJoseIx = 'san-jose-ix',\n  LondonIx = 'london-ix',\n  FrankfurtIx = 'frankfurt-ix',\n  SingaporeIx = 'singapore-ix',\n  SydneyIx = 'sydney-ix',\n  TokyoIx = 'tokyo-ix',\n}\n\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nexport enum Region {\n  Au1 = 'au1',\n  Au1Ix = 'au1-ix',\n  Br1 = 'br1',\n  De1 = 'de1',\n  De1Ix = 'de1-ix',\n  Gll = 'gll',\n  Ie1 = 'ie1',\n  Ie1Ix = 'ie1-ix',\n  Ie1Tnx = 'ie1-tnx',\n  Jp1 = 'jp1',\n  Jp1Ix = 'jp1-ix',\n  Sg1 = 'sg1',\n  Sg1Ix = 'sg1-ix',\n  Sg1Tnx = 'sg1-tnx',\n  Us1 = 'us1',\n  Us1Ix = 'us1-ix',\n  Us1Tnx = 'us1-tnx',\n  Us2 = 'us2',\n  Us2Ix = 'us2-ix',\n  Us2Tnx = 'us2-tnx',\n}\n\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexport const regionShortcodes: { [index: string]: Region } = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2,\n};\n\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const regionToEdge: Record<Region, Edge> = {\n  [Region.Au1]: Edge.Sydney,\n  [Region.Br1]: Edge.SaoPaulo,\n  [Region.Ie1]: Edge.Dublin,\n  [Region.De1]: Edge.Frankfurt,\n  [Region.Jp1]: Edge.Tokyo,\n  [Region.Sg1]: Edge.Singapore,\n  [Region.Us1]: Edge.Ashburn,\n  [Region.Us2]: Edge.Umatilla,\n  [Region.Gll]: Edge.Roaming,\n  /**\n   * Interconnect edges\n   */\n  [Region.Us1Ix]: Edge.AshburnIx,\n  [Region.Us2Ix]: Edge.SanJoseIx,\n  [Region.Ie1Ix]: Edge.LondonIx,\n  [Region.De1Ix]: Edge.FrankfurtIx,\n  [Region.Sg1Ix]: Edge.SingaporeIx,\n  [Region.Au1Ix]: Edge.SydneyIx,\n  [Region.Jp1Ix]: Edge.TokyoIx,\n  /**\n   * Tnx regions\n   */\n  [Region.Us1Tnx]: Edge.AshburnIx,\n  [Region.Us2Tnx]: Edge.AshburnIx,\n  [Region.Ie1Tnx]: Edge.LondonIx,\n  [Region.Sg1Tnx]: Edge.SingaporeIx,\n};\n\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexport const defaultEdge: Edge = Edge.Roaming;\n\n/**\n * The default event gateway URI to publish to.\n * @constant\n * @private\n */\nconst defaultEventGatewayURI: string = 'eventgw.twilio.com';\n\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeURI(edge: string): string {\n  return `voice-js.${edge}.twilio.com`;\n}\n\n/**\n * String template for a region insights URI\n * @param region - The region.\n */\nexport function createEventGatewayURI(region: string): string {\n  return region\n    ? `eventgw.${region}.twilio.com`\n    : defaultEventGatewayURI;\n}\n\n/**\n * Create a signaling endpoint URL to connect a websocket to from a chunder URI.\n * @param uri the chunder URI to create a signaling endpoint URL for\n */\nexport function createSignalingEndpointURL(uri: string): string {\n  return `wss://${uri}/signal`;\n}\n\n/**\n * Get the URI associated with the passed edge.\n * @private\n * @param edge - A string or an array of edge values\n * @returns An array of chunder URIs\n */\nexport function getChunderURIs(edge?: string[] | string): string[] {\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new InvalidArgumentError(\n      'If `edge` is provided, it must be of type `string` or an array of strings.',\n    );\n  }\n\n  let uris: string[];\n\n  if (edge) {\n    const edgeParams = Array.isArray(edge) ? edge : [edge];\n    uris = edgeParams.map((param: Edge) => createChunderEdgeURI(param));\n  } else {\n    uris = [createChunderEdgeURI(defaultEdge)];\n  }\n\n  return uris;\n}\n\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\nexport function getRegionShortcode(region: string): Region | null {\n  return regionShortcodes[region] || null;\n}\n", "// @ts-nocheck\nimport * as util from '../util';\n\nconst ptToFixedBitrateAudioCodecName = {\n  0: 'PCMU',\n  8: 'PCMA',\n};\n\nconst defaultOpusId = 111;\nconst BITRATE_MAX = 510000;\nconst BITRATE_MIN = 6000;\n\nfunction getPreferredCodecInfo(sdp) {\n  const [, codecId, codecName] = /a=rtpmap:(\\d+) (\\S+)/m.exec(sdp) || [null, '', ''];\n  const regex = new RegExp(`a=fmtp:${codecId} (\\\\S+)`, 'm');\n  const [, codecParams] = regex.exec(sdp) || [null, ''];\n  return { codecName, codecParams };\n}\n\nfunction setIceAggressiveNomination(sdp) {\n  // This only works on Chrome. We don't want any side effects on other browsers\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=1024096\n  // https://issues.corp.twilio.com/browse/CLIENT-6911\n  if (!util.isChrome(window, window.navigator)) {\n    return sdp;\n  }\n\n  return sdp.split('\\n')\n    .filter(line => line.indexOf('a=ice-lite') === -1)\n    .join('\\n');\n}\n\nfunction setMaxAverageBitrate(sdp, maxAverageBitrate) {\n  if (typeof maxAverageBitrate !== 'number'\n      || maxAverageBitrate < BITRATE_MIN\n      || maxAverageBitrate > BITRATE_MAX) {\n    return sdp;\n  }\n\n  const matches = /a=rtpmap:(\\d+) opus/m.exec(sdp);\n  const opusId = matches && matches.length ? matches[1] : defaultOpusId;\n  const regex = new RegExp(`a=fmtp:${opusId}`);\n  const lines = sdp.split('\\n').map(line => regex.test(line)\n    ? line + `;maxaveragebitrate=${maxAverageBitrate}`\n    : line);\n\n  return lines.join('\\n');\n}\n\n/**\n * Return a new SDP string with the re-ordered codec preferences.\n * @param {string} sdp\n * @param {Array<AudioCodec>} preferredCodecs - If empty, the existing order\n *   of audio codecs is preserved\n * @returns {string} Updated SDP string\n */\nfunction setCodecPreferences(sdp, preferredCodecs) {\n  const mediaSections = getMediaSections(sdp);\n  const session = sdp.split('\\r\\nm=')[0];\n  return [session].concat(mediaSections.map(section => {\n    // Codec preferences should not be applied to m=application sections.\n    if (!/^m=(audio|video)/.test(section)) {\n      return section;\n    }\n    const kind = section.match(/^m=(audio|video)/)[1];\n    const codecMap = createCodecMapForMediaSection(section);\n    const payloadTypes = getReorderedPayloadTypes(codecMap, preferredCodecs);\n    const newSection = setPayloadTypesInMediaSection(payloadTypes, section);\n\n    const pcmaPayloadTypes = codecMap.get('pcma') || [];\n    const pcmuPayloadTypes = codecMap.get('pcmu') || [];\n    const fixedBitratePayloadTypes = kind === 'audio'\n      ? new Set(pcmaPayloadTypes.concat(pcmuPayloadTypes))\n      : new Set();\n\n    return fixedBitratePayloadTypes.has(payloadTypes[0])\n      ? newSection.replace(/\\r\\nb=(AS|TIAS):([0-9]+)/g, '')\n      : newSection;\n  })).join('\\r\\n');\n}\n\n/**\n * Get the m= sections of a particular kind and direction from an sdp.\n * @param {string} sdp - SDP string\n * @param {string} [kind] - Pattern for matching kind\n * @param {string} [direction] - Pattern for matching direction\n * @returns {Array<string>} mediaSections\n */\nfunction getMediaSections(sdp, kind, direction) {\n  return sdp.replace(/\\r\\n\\r\\n$/, '\\r\\n').split('\\r\\nm=').slice(1).map(mediaSection => `m=${mediaSection}`).filter(mediaSection => {\n    const kindPattern = new RegExp(`m=${kind || '.*'}`, 'gm');\n    const directionPattern = new RegExp(`a=${direction || '.*'}`, 'gm');\n    return kindPattern.test(mediaSection) && directionPattern.test(mediaSection);\n  });\n}\n\n/**\n * Create a Codec Map for the given m= section.\n * @param {string} section - The given m= section\n * @returns {Map<Codec, Array<PT>>}\n */\nfunction createCodecMapForMediaSection(section) {\n  return Array.from(createPtToCodecName(section)).reduce((codecMap, pair) => {\n    const pt = pair[0];\n    const codecName = pair[1];\n    const pts = codecMap.get(codecName) || [];\n    return codecMap.set(codecName, pts.concat(pt));\n  }, new Map());\n}\n\n/**\n * Create the reordered Codec Payload Types based on the preferred Codec Names.\n * @param {Map<Codec, Array<PT>>} codecMap - Codec Map\n * @param {Array<Codec>} preferredCodecs - Preferred Codec Names\n * @returns {Array<PT>} Reordered Payload Types\n */\nfunction getReorderedPayloadTypes(codecMap, preferredCodecs) {\n  preferredCodecs = preferredCodecs.map(codecName => codecName.toLowerCase());\n\n  const preferredPayloadTypes = util.flatMap(preferredCodecs, codecName => codecMap.get(codecName) || []);\n\n  const remainingCodecs = util.difference(Array.from(codecMap.keys()), preferredCodecs);\n  const remainingPayloadTypes = util.flatMap(remainingCodecs, codecName => codecMap.get(codecName));\n\n  return preferredPayloadTypes.concat(remainingPayloadTypes);\n}\n\n/**\n * Set the given Codec Payload Types in the first line of the given m= section.\n * @param {Array<PT>} payloadTypes - Payload Types\n * @param {string} section - Given m= section\n * @returns {string} - Updated m= section\n */\nfunction setPayloadTypesInMediaSection(payloadTypes, section) {\n  const lines = section.split('\\r\\n');\n  let mLine = lines[0];\n  const otherLines = lines.slice(1);\n  mLine = mLine.replace(/([0-9]+\\s?)+$/, payloadTypes.join(' '));\n  return [mLine].concat(otherLines).join('\\r\\n');\n}\n\n/**\n * Create a Map from PTs to codec names for the given m= section.\n * @param {string} mediaSection - The given m= section.\n * @returns {Map<PT, Codec>} ptToCodecName\n */\nfunction createPtToCodecName(mediaSection) {\n  return getPayloadTypesInMediaSection(mediaSection).reduce((ptToCodecName, pt) => {\n    const rtpmapPattern = new RegExp(`a=rtpmap:${pt} ([^/]+)`);\n    const matches = mediaSection.match(rtpmapPattern);\n    const codecName = matches\n      ? matches[1].toLowerCase()\n      : ptToFixedBitrateAudioCodecName[pt]\n        ? ptToFixedBitrateAudioCodecName[pt].toLowerCase()\n        : '';\n    return ptToCodecName.set(pt, codecName);\n  }, new Map());\n}\n\n/**\n * Get the Codec Payload Types present in the first line of the given m= section\n * @param {string} section - The m= section\n * @returns {Array<PT>} Payload Types\n */\nfunction getPayloadTypesInMediaSection(section) {\n  const mLine = section.split('\\r\\n')[0];\n\n  // In \"m=<kind> <port> <proto> <payload_type_1> <payload_type_2> ... <payload_type_n>\",\n  // the regex matches <port> and the PayloadTypes.\n  const matches = mLine.match(/([0-9]+)/g);\n\n  // This should not happen, but in case there are no PayloadTypes in\n  // the m= line, return an empty array.\n  if (!matches) {\n    return [];\n  }\n\n  // Since only the PayloadTypes are needed, we discard the <port>.\n  return matches.slice(1).map(match => parseInt(match, 10));\n}\n\nexport {\n  getPreferredCodecInfo,\n  setCodecPreferences,\n  setIceAggressiveNomination,\n  setMaxAverageBitrate,\n};\n", "// @ts-nocheck\n// tslint:disable only-arrow-functions\n/* global webkitRTCPeerConnection, mozRTCPeerConnection, mozRTCSessionDescription, mozRTCIceCandidate */\n\nimport Log from '../log';\nimport * as util from '../util';\nimport { setCodecPreferences, setMaxAverageBitrate } from './sdp';\n\nfunction RTCPC(options: { RTCPeerConnection?: any }) {\n  this.log = new Log('RTCPC');\n\n  if (typeof window === 'undefined') {\n    this.log.info('No RTCPeerConnection implementation available. The window object was not found.');\n    return;\n  }\n\n  if (options && options.RTCPeerConnection) {\n    this.RTCPeerConnection = options.RTCPeerConnection;\n  } else if (typeof window.RTCPeerConnection === 'function') {\n    this.RTCPeerConnection = window.RTCPeerConnection;\n  } else if (typeof window.webkitRTCPeerConnection === 'function') {\n    this.RTCPeerConnection = webkitRTCPeerConnection;\n  } else if (typeof window.mozRTCPeerConnection === 'function') {\n    this.RTCPeerConnection = mozRTCPeerConnection;\n    window.RTCSessionDescription = mozRTCSessionDescription;\n    window.RTCIceCandidate = mozRTCIceCandidate;\n  } else {\n    this.log.info('No RTCPeerConnection implementation available');\n  }\n}\n\nRTCPC.prototype.create = function(rtcConfiguration) {\n  this.pc = new this.RTCPeerConnection(rtcConfiguration);\n};\nRTCPC.prototype.createModernConstraints = c => {\n  // createOffer differs between Chrome 23 and Chrome 24+.\n  // See https://groups.google.com/forum/?fromgroups=#!topic/discuss-webrtc/JBDZtrMumyU\n  // Unfortunately I haven't figured out a way to detect which format\n  // is required ahead of time, so we'll first try the old way, and\n  // if we get an exception, then we'll try the new way.\n  if (typeof c === 'undefined') {\n    return null;\n  }\n  // NOTE(mroberts): As of Chrome 38, Chrome still appears to expect\n  // constraints under the 'mandatory' key, and with the first letter of each\n  // constraint capitalized. Firefox, on the other hand, has deprecated the\n  // 'mandatory' key and does not expect the first letter of each constraint\n  // capitalized.\n  const nc = Object.assign({}, c);\n  if (typeof webkitRTCPeerConnection !== 'undefined' && !util.isLegacyEdge()) {\n    nc.mandatory = {};\n    if (typeof c.audio !== 'undefined') {\n      nc.mandatory.OfferToReceiveAudio = c.audio;\n    }\n    if (typeof c.video !== 'undefined') {\n      nc.mandatory.OfferToReceiveVideo = c.video;\n    }\n  } else {\n    if (typeof c.audio !== 'undefined') {\n      nc.offerToReceiveAudio = c.audio;\n    }\n    if (typeof c.video !== 'undefined') {\n      nc.offerToReceiveVideo = c.video;\n    }\n  }\n\n  delete nc.audio;\n  delete nc.video;\n\n  return nc;\n};\nRTCPC.prototype.createOffer = function(maxAverageBitrate, constraints, onSuccess, onError) {\n  constraints = this.createModernConstraints(constraints);\n  return promisifyCreate(this.pc.createOffer, this.pc)(constraints).then(offer => {\n    if (!this.pc) { return Promise.resolve(); }\n\n    const sdp = setMaxAverageBitrate(offer.sdp, maxAverageBitrate);\n\n    return promisifySet(this.pc.setLocalDescription, this.pc)(new RTCSessionDescription({\n      sdp,\n      type: 'offer',\n    }));\n  }).then(onSuccess, onError);\n};\nRTCPC.prototype.createAnswer = function(maxAverageBitrate, constraints, onSuccess, onError) {\n  constraints = this.createModernConstraints(constraints);\n  return promisifyCreate(this.pc.createAnswer, this.pc)(constraints).then(answer => {\n    if (!this.pc) { return Promise.resolve(); }\n    const sdp = setMaxAverageBitrate(answer.sdp, maxAverageBitrate);\n\n    return promisifySet(this.pc.setLocalDescription, this.pc)(new RTCSessionDescription({\n      sdp,\n      type: 'answer',\n    }));\n  }).then(onSuccess, onError);\n};\nRTCPC.prototype.processSDP = function(maxAverageBitrate, codecPreferences, sdp, constraints, onSuccess, onError) {\n  sdp = setCodecPreferences(sdp, codecPreferences);\n  const desc = new RTCSessionDescription({ sdp, type: 'offer' });\n  return promisifySet(this.pc.setRemoteDescription, this.pc)(desc).then(() => {\n    this.createAnswer(maxAverageBitrate, constraints, onSuccess, onError);\n  });\n};\nRTCPC.prototype.getSDP = function() {\n  return this.pc.localDescription.sdp;\n};\nRTCPC.prototype.processAnswer = function(codecPreferences, sdp, onSuccess, onError) {\n  if (!this.pc) { return Promise.resolve(); }\n  sdp = setCodecPreferences(sdp, codecPreferences);\n\n  return promisifySet(this.pc.setRemoteDescription, this.pc)(\n    new RTCSessionDescription({ sdp, type: 'answer' }),\n  ).then(onSuccess, onError);\n};\n/* NOTE(mroberts): Firefox 18 through 21 include a `mozRTCPeerConnection`\n   object, but attempting to instantiate it will throw the error\n\n       Error: PeerConnection not enabled (did you set the pref?)\n\n   unless the `media.peerconnection.enabled` pref is enabled. So we need to test\n   if we can actually instantiate `mozRTCPeerConnection`; however, if the user\n   *has* enabled `media.peerconnection.enabled`, we need to perform the same\n   test that we use to detect Firefox 24 and above, namely:\n\n       typeof (new mozRTCPeerConnection()).getLocalStreams === 'function'\n\n    NOTE(rrowland): We no longer support Legacy Edge as of Sep 1, 2020.\n*/\nRTCPC.test = () => {\n  if (typeof navigator === 'object') {\n    const getUserMedia = (navigator.mediaDevices && navigator.mediaDevices.getUserMedia)\n      || navigator.webkitGetUserMedia\n      || navigator.mozGetUserMedia\n      || navigator.getUserMedia;\n\n    if (util.isLegacyEdge(navigator)) {\n      return false;\n    }\n\n    if (getUserMedia && typeof window.RTCPeerConnection === 'function') {\n      return true;\n    } else if (getUserMedia && typeof window.webkitRTCPeerConnection === 'function') {\n      return true;\n    } else if (getUserMedia && typeof window.mozRTCPeerConnection === 'function') {\n      try {\n        const test = new window.mozRTCPeerConnection();\n        if (typeof test.getLocalStreams !== 'function') {\n          return false;\n        }\n      } catch (e) {\n        return false;\n      }\n      return true;\n    } else if (typeof RTCIceGatherer !== 'undefined') {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction promisify(fn, ctx, areCallbacksFirst, checkRval) {\n  return function() {\n    const args = Array.prototype.slice.call(arguments);\n\n    return new Promise(resolve => {\n      const returnValue = fn.apply(ctx, args);\n      if (!checkRval) {\n        resolve(returnValue);\n        return;\n      }\n      if (typeof returnValue === 'object' && typeof returnValue.then === 'function') {\n        resolve(returnValue);\n      } else {\n        throw new Error();\n      }\n    }).catch(() => new Promise((resolve, reject) => {\n      fn.apply(ctx, areCallbacksFirst\n        ? [resolve, reject].concat(args)\n        : args.concat([resolve, reject]));\n    }));\n  };\n}\n\nfunction promisifyCreate(fn, ctx) {\n  return promisify(fn, ctx, true, true);\n}\n\nfunction promisifySet(fn, ctx) {\n  return promisify(fn, ctx, false, false);\n}\n\nexport default RTCPC;\n", "// @ts-nocheck\nimport {\n  InvalidArgumentError,\n  MediaErrors,\n  NotSupportedError,\n  SignalingErrors,\n} from '../errors';\nimport Log from '../log';\nimport * as util from '../util';\nimport RTCPC from './rtcpc';\nimport { setIceAggressiveNomination } from './sdp';\n\nconst ICE_GATHERING_TIMEOUT = 15000;\nconst ICE_GATHERING_FAIL_NONE = 'none';\nconst ICE_GATHERING_FAIL_TIMEOUT = 'timeout';\nconst INITIAL_ICE_CONNECTION_STATE = 'new';\nconst VOLUME_INTERVAL_MS = 50;\n\n/**\n * @typedef {Object} PeerConnection\n * @param audioHelper\n * @param pstream\n * @param options\n * @return {PeerConnection}\n * @constructor\n */\nfunction PeerConnection(audioHelper, pstream, options) {\n  if (!audioHelper || !pstream) {\n    throw new InvalidArgumentError('Audiohelper, and pstream are required arguments');\n  }\n\n  if (!(this instanceof PeerConnection)) {\n    return new PeerConnection(audioHelper, pstream, options);\n  }\n\n  this._log = new Log('PeerConnection');\n\n  function noop() {\n    this._log.warn('Unexpected noop call in peerconnection');\n  }\n  this.onaudio = noop;\n  this.onopen = noop;\n  this.onerror = noop;\n  this.onclose = noop;\n  this.ondisconnected = noop;\n  this.onfailed = noop;\n  this.onconnected = noop;\n  this.onreconnected = noop;\n  this.onsignalingstatechange = noop;\n  this.ondtlstransportstatechange = noop;\n  this.onicegatheringfailure = noop;\n  this.onicegatheringstatechange = noop;\n  this.oniceconnectionstatechange = noop;\n  this.onpcconnectionstatechange = noop;\n  this.onicecandidate = noop;\n  this.onselectedcandidatepairchange = noop;\n  this.onvolume = noop;\n  this.version = null;\n  this.pstream = pstream;\n  this.stream = null;\n  this.sinkIds = new Set(['default']);\n  this.outputs = new Map();\n  this.status = 'connecting';\n  this.callSid = null;\n  this.isMuted = false;\n\n  const AudioContext = typeof window !== 'undefined'\n    && (window.AudioContext || window.webkitAudioContext);\n  this._isSinkSupported = !!AudioContext &&\n    typeof HTMLAudioElement !== 'undefined' && HTMLAudioElement.prototype.setSinkId;\n  // NOTE(mmalavalli): Since each Connection creates its own AudioContext,\n  // after 6 instances an exception is thrown. Refer https://www.w3.org/2011/audio/track/issues/3.\n  // In order to get around it, we are re-using the Device's AudioContext.\n  this._audioContext = AudioContext && audioHelper._audioContext;\n  this._audioHelper = audioHelper;\n  this._hasIceCandidates = false;\n  this._hasIceGatheringFailures = false;\n  this._iceGatheringTimeoutId = null;\n  this._masterAudio = null;\n  this._masterAudioDeviceId = null;\n  this._mediaStreamSource = null;\n  this._dtmfSender = null;\n  this._dtmfSenderUnsupported = false;\n  this._callEvents = [];\n  this._nextTimeToPublish = Date.now();\n  this._onAnswerOrRinging = noop;\n  this._onHangup = noop;\n  this._remoteStream = null;\n  this._shouldManageStream = true;\n  this._iceState = INITIAL_ICE_CONNECTION_STATE;\n  this._isUnifiedPlan = options.isUnifiedPlan;\n\n  this.options = options = options || {};\n  this.navigator = options.navigator\n    || (typeof navigator !== 'undefined' ? navigator : null);\n  this.util = options.util || util;\n  this.codecPreferences = options.codecPreferences;\n\n  return this;\n}\n\nPeerConnection.prototype.uri = function() {\n  return this._uri;\n};\n\n/**\n * Open the underlying RTCPeerConnection with a MediaStream obtained by\n *   passed constraints. The resulting MediaStream is created internally\n *   and will therefore be managed and destroyed internally.\n * @param {MediaStreamConstraints} constraints\n */\nPeerConnection.prototype.openDefaultDeviceWithConstraints = function(constraints) {\n  return this._audioHelper._openDefaultDeviceWithConstraints(constraints)\n    .then(this._setInputTracksFromStream.bind(this, false));\n};\n\n/**\n * Replace the existing input audio tracks with the audio tracks from the\n *   passed input audio stream. We re-use the existing stream because\n *   the AnalyzerNode is bound to the stream.\n * @param {MediaStream} stream\n */\nPeerConnection.prototype.setInputTracksFromStream = function(stream) {\n  const self = this;\n  return this._setInputTracksFromStream(true, stream).then(() => {\n    self._shouldManageStream = false;\n  });\n};\n\nPeerConnection.prototype._createAnalyser = (audioContext, options) => {\n  options = Object.assign({\n    fftSize: 32,\n    smoothingTimeConstant: 0.3,\n  }, options);\n\n  const analyser = audioContext.createAnalyser();\n  // tslint:disable-next-line\n  for (const field in options) {\n    analyser[field] = options[field];\n  }\n\n  return analyser;\n};\n\nPeerConnection.prototype._setVolumeHandler = function(handler) {\n  this.onvolume = handler;\n};\nPeerConnection.prototype._startPollingVolume = function() {\n  if (!this._audioContext || !this.stream || !this._remoteStream) {\n    return;\n  }\n\n  const audioContext = this._audioContext;\n\n  const inputAnalyser = this._inputAnalyser = this._createAnalyser(audioContext);\n  const inputBufferLength = inputAnalyser.frequencyBinCount;\n  const inputDataArray = new Uint8Array(inputBufferLength);\n  this._inputAnalyser2 = this._createAnalyser(audioContext, {\n    maxDecibels: 0,\n    minDecibels: -127,\n    smoothingTimeConstant: 0,\n  });\n\n  const outputAnalyser = this._outputAnalyser = this._createAnalyser(audioContext);\n  const outputBufferLength = outputAnalyser.frequencyBinCount;\n  const outputDataArray = new Uint8Array(outputBufferLength);\n  this._outputAnalyser2 = this._createAnalyser(audioContext, {\n    maxDecibels: 0,\n    minDecibels: -127,\n    smoothingTimeConstant: 0,\n  });\n\n  this._updateInputStreamSource(this.stream);\n  this._updateOutputStreamSource(this._remoteStream);\n\n  const self = this;\n  setTimeout(function emitVolume() {\n    if (!self._audioContext) {\n      return;\n    } else if (self.status === 'closed') {\n      self._inputAnalyser.disconnect();\n      self._outputAnalyser.disconnect();\n      self._inputAnalyser2.disconnect();\n      self._outputAnalyser2.disconnect();\n      return;\n    }\n\n    self._inputAnalyser.getByteFrequencyData(inputDataArray);\n    const inputVolume = self.util.average(inputDataArray);\n\n    self._inputAnalyser2.getByteFrequencyData(inputDataArray);\n    const inputVolume2 = self.util.average(inputDataArray);\n\n    self._outputAnalyser.getByteFrequencyData(outputDataArray);\n    const outputVolume = self.util.average(outputDataArray);\n\n    self._outputAnalyser2.getByteFrequencyData(outputDataArray);\n    const outputVolume2 = self.util.average(outputDataArray);\n    self.onvolume(inputVolume / 255, outputVolume / 255, inputVolume2, outputVolume2);\n\n    setTimeout(emitVolume, VOLUME_INTERVAL_MS);\n  }, VOLUME_INTERVAL_MS);\n};\n\nPeerConnection.prototype._stopStream = function _stopStream() {\n  // We shouldn't stop the tracks if they were not created inside\n  //   this PeerConnection.\n  if (!this._shouldManageStream) {\n    return;\n  }\n\n  this._audioHelper._stopDefaultInputDeviceStream();\n};\n\n/**\n * Update the stream source with the new input audio stream.\n * @param {MediaStream} stream\n * @private\n */\nPeerConnection.prototype._updateInputStreamSource = function(stream) {\n  if (this._inputStreamSource) {\n    this._inputStreamSource.disconnect();\n  }\n\n  try {\n    this._inputStreamSource = this._audioContext.createMediaStreamSource(stream);\n    this._inputStreamSource.connect(this._inputAnalyser);\n    this._inputStreamSource.connect(this._inputAnalyser2);\n  } catch (ex) {\n    this._log.warn('Unable to update input MediaStreamSource', ex);\n    this._inputStreamSource = null;\n  }\n};\n\n/**\n * Update the stream source with the new ouput audio stream.\n * @param {MediaStream} stream\n * @private\n */\nPeerConnection.prototype._updateOutputStreamSource = function(stream) {\n  if (this._outputStreamSource) {\n    this._outputStreamSource.disconnect();\n  }\n\n  try {\n    this._outputStreamSource = this._audioContext.createMediaStreamSource(stream);\n    this._outputStreamSource.connect(this._outputAnalyser);\n    this._outputStreamSource.connect(this._outputAnalyser2);\n  } catch (ex) {\n    this._log.warn('Unable to update output MediaStreamSource', ex);\n    this._outputStreamSource = null;\n  }\n};\n\n/**\n * Replace the tracks of the current stream with new tracks. We do this rather than replacing the\n *   whole stream because AnalyzerNodes are bound to a stream.\n * @param {Boolean} shouldClone - Whether the stream should be cloned if it is the first\n *   stream, or set directly. As a rule of thumb, streams that are passed in externally may have\n *   their lifecycle managed externally, and should be cloned so that we do not tear it or its tracks\n *   down when the call ends. Streams that we create internally (inside PeerConnection) should be set\n *   directly so that when the call ends it is disposed of.\n * @param {MediaStream} newStream - The new stream to copy the tracks over from.\n * @private\n */\nPeerConnection.prototype._setInputTracksFromStream = function(shouldClone, newStream) {\n  return this._isUnifiedPlan\n    ? this._setInputTracksForUnifiedPlan(shouldClone, newStream)\n    : this._setInputTracksForPlanB(shouldClone, newStream);\n};\n\n/**\n * Replace the tracks of the current stream with new tracks using the 'plan-b' method.\n * @param {Boolean} shouldClone - Whether the stream should be cloned if it is the first\n *   stream, or set directly. As a rule of thumb, streams that are passed in externally may have\n *   their lifecycle managed externally, and should be cloned so that we do not tear it or its tracks\n *   down when the call ends. Streams that we create internally (inside PeerConnection) should be set\n *   directly so that when the call ends it is disposed of.\n * @param {MediaStream} newStream - The new stream to copy the tracks over from.\n * @private\n */\nPeerConnection.prototype._setInputTracksForPlanB = function(shouldClone, newStream) {\n  if (!newStream) {\n    return Promise.reject(new InvalidArgumentError('Can not set input stream to null while in a call'));\n  }\n\n  if (!newStream.getAudioTracks().length) {\n    return Promise.reject(new InvalidArgumentError('Supplied input stream has no audio tracks'));\n  }\n\n  const localStream = this.stream;\n\n  if (!localStream) {\n    // We can't use MediaStream.clone() here because it stopped copying over tracks\n    //   as of Chrome 61. https://bugs.chromium.org/p/chromium/issues/detail?id=770908\n    this.stream = shouldClone ? cloneStream(newStream) : newStream;\n  } else {\n    this._stopStream();\n\n    removeStream(this.version.pc, localStream);\n    localStream.getAudioTracks().forEach(localStream.removeTrack, localStream);\n    newStream.getAudioTracks().forEach(localStream.addTrack, localStream);\n    addStream(this.version.pc, newStream);\n\n    this._updateInputStreamSource(this.stream);\n  }\n\n  // Apply mute settings to new input track\n  this.mute(this.isMuted);\n\n  if (!this.version) {\n    return Promise.resolve(this.stream);\n  }\n\n  return new Promise((resolve, reject) => {\n    this.version.createOffer(this.options.maxAverageBitrate, { audio: true }, () => {\n      this.version.processAnswer(this.codecPreferences, this._answerSdp, () => {\n        resolve(this.stream);\n      }, reject);\n    }, reject);\n  });\n};\n\n/**\n * Replace the tracks of the current stream with new tracks using the 'unified-plan' method.\n * @param {Boolean} shouldClone - Whether the stream should be cloned if it is the first\n *   stream, or set directly. As a rule of thumb, streams that are passed in externally may have\n *   their lifecycle managed externally, and should be cloned so that we do not tear it or its tracks\n *   down when the call ends. Streams that we create internally (inside PeerConnection) should be set\n *   directly so that when the call ends it is disposed of.\n * @param {MediaStream} newStream - The new stream to copy the tracks over from.\n * @private\n */\nPeerConnection.prototype._setInputTracksForUnifiedPlan = function(shouldClone, newStream) {\n  if (!newStream) {\n    return Promise.reject(new InvalidArgumentError('Can not set input stream to null while in a call'));\n  }\n\n  if (!newStream.getAudioTracks().length) {\n    return Promise.reject(new InvalidArgumentError('Supplied input stream has no audio tracks'));\n  }\n\n  const localStream = this.stream;\n  const getStreamPromise = () => {\n    // Apply mute settings to new input track\n    this.mute(this.isMuted);\n    return Promise.resolve(this.stream);\n  };\n\n  if (!localStream) {\n    // We can't use MediaStream.clone() here because it stopped copying over tracks\n    //   as of Chrome 61. https://bugs.chromium.org/p/chromium/issues/detail?id=770908\n    this.stream = shouldClone ? cloneStream(newStream, this.options.MediaStream) : newStream;\n  } else {\n    // If the call was started with gUM, and we are now replacing that track with an\n    // external stream's tracks, we should stop the old managed track.\n    if (this._shouldManageStream) {\n      this._stopStream();\n    }\n\n    if (!this._sender) {\n      this._sender = this.version.pc.getSenders()[0];\n    }\n\n    return this._sender.replaceTrack(newStream.getAudioTracks()[0]).then(() => {\n      this._updateInputStreamSource(newStream);\n      this.stream = shouldClone ? cloneStream(newStream, this.options.MediaStream) : newStream;\n      return getStreamPromise();\n    });\n  }\n\n  return getStreamPromise();\n};\n\nPeerConnection.prototype._onInputDevicesChanged = function() {\n  if (!this.stream) { return; }\n\n  // If all of our active tracks are ended, then our active input was lost\n  const activeInputWasLost = this.stream.getAudioTracks().every(track => track.readyState === 'ended');\n\n  // We only want to act if we manage the stream in PeerConnection (It was created\n  // here, rather than passed in.)\n  if (activeInputWasLost && this._shouldManageStream) {\n    this.openDefaultDeviceWithConstraints({ audio: true });\n  }\n};\n\nPeerConnection.prototype._onIceGatheringFailure = function(type) {\n  this._hasIceGatheringFailures = true;\n  this.onicegatheringfailure(type);\n};\n\nPeerConnection.prototype._onMediaConnectionStateChange = function(newState) {\n  const previousState = this._iceState;\n\n  if (previousState === newState\n    || (newState !== 'connected'\n    && newState !== 'disconnected'\n    && newState !== 'failed')) {\n    return;\n  }\n  this._iceState = newState;\n\n  let message;\n  switch (newState) {\n    case 'connected':\n      if (previousState === 'disconnected' || previousState === 'failed') {\n        message = 'ICE liveliness check succeeded. Connection with Twilio restored';\n        this._log.info(message);\n        this.onreconnected(message);\n      } else {\n        message = 'Media connection established.';\n        this._log.info(message);\n        this.onconnected(message);\n      }\n      this._stopIceGatheringTimeout();\n      this._hasIceGatheringFailures = false;\n      break;\n    case 'disconnected':\n      message = 'ICE liveliness check failed. May be having trouble connecting to Twilio';\n      this._log.warn(message);\n      this.ondisconnected(message);\n      break;\n    case 'failed':\n      message = 'Connection with Twilio was interrupted.';\n      this._log.warn(message);\n      this.onfailed(message);\n      break;\n  }\n};\n\nPeerConnection.prototype._setSinkIds = function(sinkIds) {\n  if (!this._isSinkSupported) {\n    return Promise.reject(new NotSupportedError('Audio output selection is not supported by this browser'));\n  }\n\n  this.sinkIds = new Set(sinkIds.forEach ? sinkIds : [sinkIds]);\n  return this.version\n    ? this._updateAudioOutputs()\n    : Promise.resolve();\n};\n\n/**\n * Start timeout for ICE Gathering\n */\nPeerConnection.prototype._startIceGatheringTimeout = function startIceGatheringTimeout() {\n  this._stopIceGatheringTimeout();\n  this._iceGatheringTimeoutId = setTimeout(() => {\n    this._onIceGatheringFailure(ICE_GATHERING_FAIL_TIMEOUT);\n  }, ICE_GATHERING_TIMEOUT);\n};\n\n/**\n * Stop timeout for ICE Gathering\n */\nPeerConnection.prototype._stopIceGatheringTimeout = function stopIceGatheringTimeout() {\n  clearInterval(this._iceGatheringTimeoutId);\n};\n\nPeerConnection.prototype._updateAudioOutputs = function updateAudioOutputs() {\n  const addedOutputIds = Array.from(this.sinkIds).filter(function(id) {\n    return !this.outputs.has(id);\n  }, this);\n\n  const removedOutputIds = Array.from(this.outputs.keys()).filter(function(id) {\n    return !this.sinkIds.has(id);\n  }, this);\n\n  const self = this;\n  const createOutputPromises = addedOutputIds.map(this._createAudioOutput, this);\n  return Promise.all(createOutputPromises).then(() => Promise.all(removedOutputIds.map(self._removeAudioOutput, self)));\n};\n\nPeerConnection.prototype._createAudio = function createAudio(arr) {\n  const audio = new Audio(arr);\n  this.onaudio(audio);\n  return audio;\n};\n\nPeerConnection.prototype._createAudioOutput = function createAudioOutput(id) {\n  let dest = null;\n  if (this._mediaStreamSource) {\n    dest = this._audioContext.createMediaStreamDestination();\n    this._mediaStreamSource.connect(dest);\n  }\n\n  const audio = this._createAudio();\n  setAudioSource(audio, dest && dest.stream ? dest.stream : this.pcStream);\n\n  const self = this;\n  return audio.setSinkId(id).then(() => audio.play()).then(() => {\n    self.outputs.set(id, {\n      audio,\n      dest,\n    });\n  });\n};\n\nPeerConnection.prototype._removeAudioOutputs = function removeAudioOutputs() {\n  if (this._masterAudio && typeof this._masterAudioDeviceId !== 'undefined') {\n    this._disableOutput(this, this._masterAudioDeviceId);\n    this.outputs.delete(this._masterAudioDeviceId);\n    this._masterAudioDeviceId = null;\n\n    // Release the audio resources before deleting the audio\n    if (!this._masterAudio.paused) {\n      this._masterAudio.pause();\n    }\n    if (typeof this._masterAudio.srcObject !== 'undefined') {\n      this._masterAudio.srcObject = null;\n    } else {\n      this._masterAudio.src = '';\n    }\n    this._masterAudio = null;\n  }\n\n  return Array.from(this.outputs.keys()).map(this._removeAudioOutput, this);\n};\n\nPeerConnection.prototype._disableOutput = function disableOutput(pc, id) {\n  const output = pc.outputs.get(id);\n  if (!output) { return; }\n\n  if (output.audio) {\n    output.audio.pause();\n    output.audio.src = '';\n  }\n\n  if (output.dest) {\n    output.dest.disconnect();\n  }\n};\n\n/**\n * Disable a non-master output, and update the master output to assume its state. This\n *   is called when the device ID assigned to the master output has been removed from\n *   active devices. We can not simply remove the master audio output, so we must\n *   instead reassign it.\n * @private\n * @param {PeerConnection} pc\n * @param {string} masterId - The current device ID assigned to the master audio element.\n */\nPeerConnection.prototype._reassignMasterOutput = function reassignMasterOutput(pc, masterId) {\n  const masterOutput = pc.outputs.get(masterId);\n  pc.outputs.delete(masterId);\n\n  const self = this;\n  const activeDeviceId = Array.from(pc.outputs.keys())[0];\n  // The audio device key could also be '' on Chrome if no media device permissions are allowed\n  const idToReplace = typeof activeDeviceId === 'string' ? activeDeviceId : 'default';\n\n  return masterOutput.audio.setSinkId(idToReplace).then(() => {\n    self._disableOutput(pc, idToReplace);\n\n    pc.outputs.set(idToReplace, masterOutput);\n    pc._masterAudioDeviceId = idToReplace;\n  }).catch(function rollback() {\n    pc.outputs.set(masterId, masterOutput);\n    self._log.info('Could not reassign master output. Attempted to roll back.');\n  });\n};\n\nPeerConnection.prototype._removeAudioOutput = function removeAudioOutput(id) {\n  if (this._masterAudioDeviceId === id) {\n    return this._reassignMasterOutput(this, id);\n  }\n\n  this._disableOutput(this, id);\n  this.outputs.delete(id);\n\n  return Promise.resolve();\n};\n\n/**\n * Use an AudioContext to potentially split our audio output stream to multiple\n *   audio devices. This is only available to browsers with AudioContext and\n *   HTMLAudioElement.setSinkId() available. We save the source stream in\n *   _masterAudio, and use it for one of the active audio devices. We keep\n *   track of its ID because we must replace it if we lose its initial device.\n */\nPeerConnection.prototype._onAddTrack = function onAddTrack(pc, stream) {\n  const audio = pc._masterAudio = this._createAudio();\n  setAudioSource(audio, stream);\n  audio.play();\n\n  // Assign the initial master audio element to a random active output device\n  const activeDeviceId = Array.from(pc.outputs.keys())[0];\n  // The audio device key could also be '' on Chrome if no media device permissions are allowed\n  const deviceId = typeof activeDeviceId === 'string' ? activeDeviceId : 'default';\n  pc._masterAudioDeviceId = deviceId;\n  pc.outputs.set(deviceId, { audio });\n\n  try {\n    pc._mediaStreamSource = pc._audioContext.createMediaStreamSource(stream);\n  } catch (ex) {\n    this._log.warn('Unable to create a MediaStreamSource from onAddTrack', ex);\n    this._mediaStreamSource = null;\n  }\n\n  pc.pcStream = stream;\n  pc._updateAudioOutputs();\n};\n\n/**\n * Use a single audio element to play the audio output stream. This does not\n *   support multiple output devices, and is a fallback for when AudioContext\n *   and/or HTMLAudioElement.setSinkId() is not available to the client.\n */\nPeerConnection.prototype._fallbackOnAddTrack = function fallbackOnAddTrack(pc, stream) {\n  const audio = document && document.createElement('audio');\n  audio.autoplay = true;\n\n  if (!setAudioSource(audio, stream)) {\n    pc._log.info('Error attaching stream to element.');\n  }\n\n  pc.outputs.set('default', { audio });\n};\n\nPeerConnection.prototype._setEncodingParameters = function(enableDscp) {\n  if (!enableDscp\n      || !this._sender\n      || typeof this._sender.getParameters !== 'function'\n      || typeof this._sender.setParameters !== 'function') {\n    return;\n  }\n\n  const params = this._sender.getParameters();\n  if (!params.priority && !(params.encodings && params.encodings.length)) {\n    return;\n  }\n\n  // This is how MDN's RTPSenderParameters defines priority\n  params.priority = 'high';\n\n  // And this is how it's currently implemented in Chrome M72+\n  if (params.encodings && params.encodings.length) {\n    params.encodings.forEach(encoding => {\n      encoding.priority = 'high';\n      encoding.networkPriority = 'high';\n    });\n  }\n\n  this._sender.setParameters(params);\n};\n\nPeerConnection.prototype._setupPeerConnection = function(rtcConfiguration) {\n  const self = this;\n  const version = new (this.options.rtcpcFactory || RTCPC)({ RTCPeerConnection: this.options.RTCPeerConnection });\n  version.create(rtcConfiguration);\n  addStream(version.pc, this.stream);\n\n  const supportedCodecs = RTCRtpReceiver.getCapabilities('audio').codecs;\n  this._log.debug('sorting codecs', supportedCodecs, this.codecPreferences);\n  const sortedCodecs = util.sortByMimeTypes(supportedCodecs, this.codecPreferences);\n  const [transceiver] = version.pc.getTransceivers();\n  this._log.debug('setting sorted codecs', sortedCodecs);\n  transceiver.setCodecPreferences(sortedCodecs);\n\n  const eventName = 'ontrack' in version.pc\n    ? 'ontrack' : 'onaddstream';\n\n  version.pc[eventName] = event => {\n    const stream = self._remoteStream = event.stream || event.streams[0];\n\n    if (typeof version.pc.getSenders === 'function') {\n      this._sender = version.pc.getSenders()[0];\n    }\n\n    if (self._isSinkSupported) {\n      self._onAddTrack(self, stream);\n    } else {\n      self._fallbackOnAddTrack(self, stream);\n    }\n\n    self._startPollingVolume();\n  };\n  return version;\n};\n\nPeerConnection.prototype._maybeSetIceAggressiveNomination = function(sdp) {\n  return this.options.forceAggressiveIceNomination ? setIceAggressiveNomination(sdp) : sdp;\n};\n\nPeerConnection.prototype._setupChannel = function() {\n  const pc = this.version.pc;\n\n  // Chrome 25 supports onopen\n  this.version.pc.onopen = () => {\n    this.status = 'open';\n    this.onopen();\n  };\n\n  // Chrome 26 doesn't support onopen so must detect state change\n  this.version.pc.onstatechange = () => {\n    if (this.version.pc && this.version.pc.readyState === 'stable') {\n      this.status = 'open';\n      this.onopen();\n    }\n  };\n\n  // Chrome 27 changed onstatechange to onsignalingstatechange\n  this.version.pc.onsignalingstatechange = () => {\n    const state = pc.signalingState;\n    this._log.info(`signalingState is \"${state}\"`);\n\n    if (this.version.pc && this.version.pc.signalingState === 'stable') {\n      this.status = 'open';\n      this.onopen();\n    }\n\n    this.onsignalingstatechange(pc.signalingState);\n  };\n\n  // Chrome 72+\n  pc.onconnectionstatechange = event => {\n    let state = pc.connectionState;\n    if (!state && event && event.target) {\n      // VDI environment\n      const targetPc = event.target;\n      state = targetPc.connectionState || targetPc.connectionState_;\n      this._log.info(`pc.connectionState not detected. Using target PC. State=${state}`);\n    }\n    if (!state) {\n      this._log.warn(`onconnectionstatechange detected but state is \"${state}\"`);\n    } else {\n      this._log.info(`pc.connectionState is \"${state}\"`);\n    }\n    this.onpcconnectionstatechange(state);\n    this._onMediaConnectionStateChange(state);\n  };\n\n  pc.onicecandidate =  event => {\n    const { candidate } = event;\n    if (candidate) {\n      this._hasIceCandidates = true;\n      this.onicecandidate(candidate);\n      this._setupRTCIceTransportListener();\n    }\n\n    this._log.info(`ICE Candidate: ${JSON.stringify(candidate)}`);\n  };\n\n  pc.onicegatheringstatechange = () => {\n    const state = pc.iceGatheringState;\n    if (state === 'gathering') {\n      this._startIceGatheringTimeout();\n\n    } else if (state === 'complete') {\n      this._stopIceGatheringTimeout();\n\n      // Fail if no candidates found\n      if (!this._hasIceCandidates) {\n        this._onIceGatheringFailure(ICE_GATHERING_FAIL_NONE);\n      }\n\n      // There was a failure mid-gathering phase. We want to start our timer and issue\n      // an ice restart if we don't get connected after our timeout\n      if (this._hasIceCandidates && this._hasIceGatheringFailures) {\n        this._startIceGatheringTimeout();\n      }\n    }\n\n    this._log.info(`pc.iceGatheringState is \"${pc.iceGatheringState}\"`);\n    this.onicegatheringstatechange(state);\n  };\n\n  pc.oniceconnectionstatechange = () => {\n    this._log.info(`pc.iceConnectionState is \"${pc.iceConnectionState}\"`);\n    this.oniceconnectionstatechange(pc.iceConnectionState);\n    this._onMediaConnectionStateChange(pc.iceConnectionState);\n  };\n};\nPeerConnection.prototype._initializeMediaStream = function(rtcConfiguration) {\n  // if mediastream already open then do nothing\n  if (this.status === 'open') {\n    return false;\n  }\n  if (this.pstream.status === 'disconnected') {\n    this.onerror({ info: {\n      code: 31000,\n      message: 'Cannot establish connection. Client is disconnected',\n      twilioError: new SignalingErrors.ConnectionDisconnected(),\n    } });\n    this.close();\n    return false;\n  }\n  this.version = this._setupPeerConnection(rtcConfiguration);\n  this._setupChannel();\n  return true;\n};\n\n/**\n * Remove reconnection-related listeners\n * @private\n */\nPeerConnection.prototype._removeReconnectionListeners = function() {\n  if (this.pstream) {\n    this.pstream.removeListener('answer', this._onAnswerOrRinging);\n    this.pstream.removeListener('hangup', this._onHangup);\n  }\n};\n\n/**\n * Setup a listener for RTCDtlsTransport to capture state changes events\n * @private\n */\nPeerConnection.prototype._setupRTCDtlsTransportListener = function() {\n  const dtlsTransport = this.getRTCDtlsTransport();\n\n  if (!dtlsTransport || dtlsTransport.onstatechange) {\n    return;\n  }\n\n  const handler = () => {\n    this._log.info(`dtlsTransportState is \"${dtlsTransport.state}\"`);\n    this.ondtlstransportstatechange(dtlsTransport.state);\n  };\n\n  // Publish initial state\n  handler();\n  dtlsTransport.onstatechange = handler;\n};\n\n/**\n * Setup a listener for RTCIceTransport to capture selected candidate pair changes\n * @private\n */\nPeerConnection.prototype._setupRTCIceTransportListener = function() {\n  const iceTransport = this._getRTCIceTransport();\n\n  if (!iceTransport || iceTransport.onselectedcandidatepairchange) {\n    return;\n  }\n\n  iceTransport.onselectedcandidatepairchange = () =>\n    this.onselectedcandidatepairchange(iceTransport.getSelectedCandidatePair());\n};\n\n/**\n * Restarts ICE for the current connection\n * ICE Restart failures are ignored. Retries are managed in Connection\n * @private\n */\nPeerConnection.prototype.iceRestart = function() {\n  this._log.info('Attempting to restart ICE...');\n  this._hasIceCandidates = false;\n  this.version.createOffer(this.options.maxAverageBitrate, { iceRestart: true }).then(() => {\n    this._removeReconnectionListeners();\n\n    this._onAnswerOrRinging = payload => {\n      this._removeReconnectionListeners();\n\n      if (!payload.sdp || this.version.pc.signalingState !== 'have-local-offer') {\n        const message = 'Invalid state or param during ICE Restart:'\n          + `hasSdp:${!!payload.sdp}, signalingState:${this.version.pc.signalingState}`;\n        this._log.warn(message);\n        return;\n      }\n\n      const sdp = this._maybeSetIceAggressiveNomination(payload.sdp);\n      this._answerSdp = sdp;\n      if (this.status !== 'closed') {\n        this.version.processAnswer(this.codecPreferences, sdp, null, err => {\n          const message = err && err.message ? err.message : err;\n          this._log.error(`Failed to process answer during ICE Restart. Error: ${message}`);\n        });\n      }\n    };\n\n    this._onHangup = () => {\n      this._log.info('Received hangup during ICE Restart');\n      this._removeReconnectionListeners();\n    };\n\n    this.pstream.on('answer', this._onAnswerOrRinging);\n    this.pstream.on('hangup', this._onHangup);\n    this.pstream.reinvite(this.version.getSDP(), this.callSid);\n\n  }).catch((err) => {\n    const message = err && err.message ? err.message : err;\n    this._log.error(`Failed to createOffer during ICE Restart. Error: ${message}`);\n    // CreateOffer failures doesn't transition ice state to failed\n    // We need trigger it so it can be picked up by retries\n    this.onfailed(message);\n  });\n};\n\nPeerConnection.prototype.makeOutgoingCall = function(params, signalingReconnectToken, callsid, rtcConfiguration, onMediaStarted) {\n  if (!this._initializeMediaStream(rtcConfiguration)) {\n    return;\n  }\n\n  const self = this;\n  this.callSid = callsid;\n  function onAnswerSuccess() {\n    if (self.options) {\n      self._setEncodingParameters(self.options.dscp);\n    }\n    onMediaStarted(self.version.pc);\n  }\n  function onAnswerError(err) {\n    const errMsg = err.message || err;\n    self.onerror({ info: {\n      code: 31000,\n      message: `Error processing answer: ${errMsg}`,\n      twilioError: new MediaErrors.ClientRemoteDescFailed(),\n    } });\n  }\n  this._onAnswerOrRinging = payload => {\n    if (!payload.sdp) { return; }\n\n    const sdp = this._maybeSetIceAggressiveNomination(payload.sdp);\n    self._answerSdp = sdp;\n    if (self.status !== 'closed') {\n      self.version.processAnswer(this.codecPreferences, sdp, onAnswerSuccess, onAnswerError);\n    }\n    self.pstream.removeListener('answer', self._onAnswerOrRinging);\n    self.pstream.removeListener('ringing', self._onAnswerOrRinging);\n  };\n  this.pstream.on('answer', this._onAnswerOrRinging);\n  this.pstream.on('ringing', this._onAnswerOrRinging);\n\n  function onOfferSuccess() {\n    if (self.status !== 'closed') {\n      if (signalingReconnectToken) {\n        self.pstream.reconnect(self.version.getSDP(), self.callSid, signalingReconnectToken);\n      } else {\n        self.pstream.invite(self.version.getSDP(), self.callSid, params);\n      }\n      self._setupRTCDtlsTransportListener();\n    }\n  }\n\n  function onOfferError(err) {\n    const errMsg = err.message || err;\n    self.onerror({ info: {\n      code: 31000,\n      message: `Error creating the offer: ${errMsg}`,\n      twilioError: new MediaErrors.ClientLocalDescFailed(),\n    } });\n  }\n\n  this.version.createOffer(this.options.maxAverageBitrate, { audio: true }, onOfferSuccess, onOfferError);\n};\nPeerConnection.prototype.answerIncomingCall = function(callSid, sdp, rtcConfiguration, onMediaStarted) {\n  if (!this._initializeMediaStream(rtcConfiguration)) {\n    return;\n  }\n  sdp = this._maybeSetIceAggressiveNomination(sdp);\n  this._answerSdp = sdp.replace(/^a=setup:actpass$/gm, 'a=setup:passive');\n  this.callSid = callSid;\n  const self = this;\n  function onAnswerSuccess() {\n    if (self.status !== 'closed') {\n      self.pstream.answer(self.version.getSDP(), callSid);\n      if (self.options) {\n        self._setEncodingParameters(self.options.dscp);\n      }\n      onMediaStarted(self.version.pc);\n      self._setupRTCDtlsTransportListener();\n    }\n  }\n  function onAnswerError(err) {\n    const errMsg = err.message || err;\n    self.onerror({ info: {\n      code: 31000,\n      message: `Error creating the answer: ${errMsg}`,\n      twilioError: new MediaErrors.ClientRemoteDescFailed(),\n    } });\n  }\n  this.version.processSDP(this.options.maxAverageBitrate, this.codecPreferences, sdp, { audio: true }, onAnswerSuccess, onAnswerError);\n};\nPeerConnection.prototype.close = function() {\n  if (this.version && this.version.pc) {\n    if (this.version.pc.signalingState !== 'closed') {\n      this.version.pc.close();\n    }\n\n    this.version.pc = null;\n  }\n  if (this.stream) {\n    this.mute(false);\n    this._stopStream();\n  }\n  this.stream = null;\n  this._removeReconnectionListeners();\n  this._stopIceGatheringTimeout();\n\n  Promise.all(this._removeAudioOutputs()).catch(() => {\n    // We don't need to alert about failures here.\n  });\n  if (this._mediaStreamSource) {\n    this._mediaStreamSource.disconnect();\n  }\n  if (this._inputAnalyser) {\n    this._inputAnalyser.disconnect();\n  }\n  if (this._outputAnalyser) {\n    this._outputAnalyser.disconnect();\n  }\n  if (this._inputAnalyser2) {\n    this._inputAnalyser2.disconnect();\n  }\n  if (this._outputAnalyser2) {\n    this._outputAnalyser2.disconnect();\n  }\n  this.status = 'closed';\n  this.onclose();\n};\nPeerConnection.prototype.reject = function(callSid) {\n  this.callSid = callSid;\n};\nPeerConnection.prototype.ignore = function(callSid) {\n  this.callSid = callSid;\n};\n/**\n * Mute or unmute input audio. If the stream is not yet present, the setting\n *   is saved and applied to future streams/tracks.\n * @params {boolean} shouldMute - Whether the input audio should\n *   be muted or unmuted.\n */\nPeerConnection.prototype.mute = function(shouldMute) {\n  this.isMuted = shouldMute;\n  if (!this.stream) { return; }\n\n  if (this._sender && this._sender.track) {\n    this._sender.track.enabled = !shouldMute;\n  } else {\n    const audioTracks = typeof this.stream.getAudioTracks === 'function'\n      ? this.stream.getAudioTracks()\n      : this.stream.audioTracks;\n\n    audioTracks.forEach(track => {\n      track.enabled = !shouldMute;\n    });\n  }\n};\n/**\n * Get or create an RTCDTMFSender for the first local audio MediaStreamTrack\n * we can get from the RTCPeerConnection. Return null if unsupported.\n * @instance\n * @returns ?RTCDTMFSender\n */\nPeerConnection.prototype.getOrCreateDTMFSender = function getOrCreateDTMFSender() {\n  if (this._dtmfSender || this._dtmfSenderUnsupported) {\n    return this._dtmfSender || null;\n  }\n\n  const self = this;\n  const pc = this.version.pc;\n  if (!pc) {\n    this._log.warn('No RTCPeerConnection available to call createDTMFSender on');\n    return null;\n  }\n\n  if (typeof pc.getSenders === 'function' && (typeof RTCDTMFSender === 'function' || typeof RTCDtmfSender === 'function')) {\n    const chosenSender = pc.getSenders().find(sender => sender.dtmf);\n    if (chosenSender) {\n      this._log.info('Using RTCRtpSender#dtmf');\n      this._dtmfSender = chosenSender.dtmf;\n      return this._dtmfSender;\n    }\n  }\n\n  if (typeof pc.createDTMFSender === 'function' && typeof pc.getLocalStreams === 'function') {\n    const track = pc.getLocalStreams().map(stream => {\n      const tracks = self._getAudioTracks(stream);\n      return tracks && tracks[0];\n    })[0];\n\n    if (!track) {\n      this._log.warn('No local audio MediaStreamTrack available on the RTCPeerConnection to pass to createDTMFSender');\n      return null;\n    }\n\n    this._log.info('Creating RTCDTMFSender');\n    this._dtmfSender = pc.createDTMFSender(track);\n    return this._dtmfSender;\n  }\n\n  this._log.info('RTCPeerConnection does not support RTCDTMFSender');\n  this._dtmfSenderUnsupported = true;\n  return null;\n};\n\n/**\n * Get the RTCDtlTransport object from the PeerConnection\n * @returns RTCDtlTransport\n */\nPeerConnection.prototype.getRTCDtlsTransport = function getRTCDtlsTransport() {\n  const sender = this.version && this.version.pc\n    && typeof this.version.pc.getSenders === 'function'\n    && this.version.pc.getSenders()[0];\n  return sender && sender.transport || null;\n};\n\nPeerConnection.prototype._canStopMediaStreamTrack = () => typeof MediaStreamTrack.prototype.stop === 'function';\n\nPeerConnection.prototype._getAudioTracks = stream => typeof stream.getAudioTracks === 'function' ?\n  stream.getAudioTracks() : stream.audioTracks;\n\n/**\n * Get the RTCIceTransport object from the PeerConnection\n * @returns RTCIceTransport\n */\nPeerConnection.prototype._getRTCIceTransport = function _getRTCIceTransport() {\n  const dtlsTransport = this.getRTCDtlsTransport();\n  return dtlsTransport && dtlsTransport.iceTransport || null;\n};\n\n// Is PeerConnection.protocol used outside of our SDK? We should remove this if not.\nPeerConnection.protocol = ((() => RTCPC.test() ? new RTCPC() : null))();\n\nfunction addStream(pc, stream) {\n  if (typeof pc.addTrack === 'function') {\n    stream.getAudioTracks().forEach(track => {\n      // The second parameters, stream, should not be necessary per the latest editor's\n      //   draft, but FF requires it. https://bugzilla.mozilla.org/show_bug.cgi?id=1231414\n      pc.addTrack(track, stream);\n    });\n  } else {\n    pc.addStream(stream);\n  }\n}\n\nfunction cloneStream(oldStream, _MediaStream) {\n  let newStream;\n  if (_MediaStream) {\n    newStream = new _MediaStream();\n  } else if (typeof MediaStream !== 'undefined') {\n    newStream = new MediaStream();\n  } else {\n    newStream = new webkitMediaStream();\n  }\n\n  oldStream.getAudioTracks().forEach(newStream.addTrack, newStream);\n  return newStream;\n}\n\nfunction removeStream(pc, stream) {\n  if (typeof pc.removeTrack === 'function') {\n    pc.getSenders().forEach(sender => { pc.removeTrack(sender); });\n  } else {\n    pc.removeStream(stream);\n  }\n}\n\n/**\n * Set the source of an HTMLAudioElement to the specified MediaStream\n * @param {HTMLAudioElement} audio\n * @param {MediaStream} stream\n * @returns {boolean} Whether the audio source was set successfully\n */\nfunction setAudioSource(audio, stream) {\n  if (typeof audio.srcObject !== 'undefined') {\n    audio.srcObject = stream;\n  } else if (typeof audio.mozSrcObject !== 'undefined') {\n    audio.mozSrcObject = stream;\n  } else if (typeof audio.src !== 'undefined') {\n    const _window = audio.options.window || window;\n    audio.src = (_window.URL || _window.webkitURL).createObjectURL(stream);\n  } else {\n    return false;\n  }\n\n  return true;\n}\n\nPeerConnection.enabled = RTCPC.test();\n\nexport default PeerConnection;\n", "// @ts-nocheck\nimport PeerConnection from './peerconnection';\nimport RTCPC from './rtcpc';\n\nfunction enabled() {\n  return RTCPC.test();\n}\n\nfunction getMediaEngine() {\n  return typeof RTCIceGatherer !== 'undefined' ? 'ORTC' : 'WebRTC';\n}\n\nexport {\n  enabled,\n  getMediaEngine,\n  PeerConnection,\n};\n", "// @ts-nocheck\nimport { NotSupportedError } from '../errors';\nimport * as util from '../util';\n\nfunction getUserMedia(constraints, options) {\n  options = options || {};\n  options.util = options.util || util;\n  options.navigator = options.navigator\n    || (typeof navigator !== 'undefined' ? navigator : null);\n\n  return new Promise((resolve, reject) => {\n    if (!options.navigator) {\n      throw new NotSupportedError('getUserMedia is not supported');\n    }\n\n    switch ('function') {\n      case typeof (options.navigator.mediaDevices && options.navigator.mediaDevices.getUserMedia):\n        return resolve(options.navigator.mediaDevices.getUserMedia(constraints));\n      case typeof options.navigator.webkitGetUserMedia:\n        return options.navigator.webkitGetUserMedia(constraints, resolve, reject);\n      case typeof options.navigator.mozGetUserMedia:\n        return options.navigator.mozGetUserMedia(constraints, resolve, reject);\n      case typeof options.navigator.getUserMedia:\n        return options.navigator.getUserMedia(constraints, resolve, reject);\n      default:\n        throw new NotSupportedError('getUserMedia is not supported');\n    }\n  }).catch(e => {\n    throw (options.util.isFirefox() && e.name === 'NotReadableError')\n      ? new NotSupportedError('Firefox does not currently support opening multiple audio input tracks' +\n        'simultaneously, even across different tabs.\\n' +\n        'Related Bugzilla thread: https://bugzilla.mozilla.org/show_bug.cgi?id=1299324')\n      : e;\n  });\n}\n\nexport default getUserMedia;\n", "import { NotSupportedError } from './errors';\n\n/**\n * Generates a 128-bit long random string that is formatted as a 32 long string\n * of characters where each character is from the set:\n * [0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f].\n */\nfunction generateRandomizedString(): string {\n  if (typeof window !== 'object') {\n    throw new NotSupportedError('This platform is not supported.');\n  }\n\n  const { crypto } = window;\n  if (typeof crypto !== 'object') {\n    throw new NotSupportedError(\n      'The `crypto` module is not available on this platform.',\n    );\n  }\n\n  if (typeof crypto.getRandomValues !== 'function') {\n    throw new NotSupportedError(\n      'The function `crypto.getRandomValues` is not available on this ' +\n      'platform.',\n    );\n  }\n\n  if (typeof window.Uint8Array !== 'function') {\n    throw new NotSupportedError(\n      'The `Uint8Array` module is not available on this platform.',\n    );\n  }\n\n  return crypto\n    .getRandomValues(new window.Uint8Array(16))\n    .reduce((r, n) => `${r}${n.toString(16).padStart(2, '0')}`, '');\n}\n\nexport function generateVoiceEventSid() {\n  return `KX${generateRandomizedString()}`;\n}\n", "/**\n * Deferred Promise\n */\nexport default class Deferred {\n  /**\n   * This {@link Deferred} Promise\n   */\n  private readonly _promise: Promise<any>;\n\n  /**\n   * The Promise's reject method.\n   */\n  private _reject: (reason?: any) => void;\n\n  /**\n   * The Promise's resolve method.\n   */\n  private _resolve: (value?: any) => void;\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._promise = new Promise<any>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * @returns The {@link Deferred} Promise\n   */\n  get promise(): Promise<any> {\n    return this._promise;\n  }\n\n  /**\n   * Rejects this promise\n   */\n  reject(reason?: any): void {\n    this._reject(reason);\n  }\n\n  /**\n   * Resolves this promise\n   */\n  resolve(value?: any): void {\n    this._resolve(value);\n  }\n}\n", "import Deferred from './deferred';\n\n/**\n * Queue async operations and executes them synchronously.\n */\nexport class AsyncQueue {\n  /**\n   * The list of async operations in this queue\n   */\n  private _operations: AsyncQueue.Operation[] = [];\n\n  /**\n   * Adds the async operation to the queue\n   * @param callback An async callback that returns a promise\n   * @returns A promise that will get resolved or rejected after executing the callback\n   */\n  enqueue(callback: () => Promise<any>): Promise<any> {\n    const hasPending = !!this._operations.length;\n    const deferred = new Deferred();\n\n    this._operations.push({ deferred, callback });\n\n    if (!hasPending) {\n      this._processQueue();\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * Start processing the queue. This executes the first item and removes it after.\n   * Then do the same for next items until the queue is emptied.\n   */\n  private async _processQueue() {\n    while (this._operations.length) {\n      // Grab first item, don't remove from array yet until it's resolved/rejected\n      const { deferred, callback } = this._operations[0];\n\n      // We want to capture the result/error first so we can remove the item from the queue later\n      let result;\n      let error;\n      // Sometimes result and error are empty. So let's use a separate flag to determine if the promise has resolved\n      let hasResolved;\n      try {\n        result = await callback();\n        hasResolved = true;\n      } catch (e) {\n        error = e;\n      }\n\n      // Remove the item\n      this._operations.shift();\n\n      if (hasResolved) {\n        deferred.resolve(result);\n      } else {\n        deferred.reject(error);\n      }\n    }\n  }\n}\n\nexport namespace AsyncQueue {\n  /**\n   * Represent an [[AsyncQueue]] operation\n   */\n  export interface Operation {\n    /**\n     * An async callback that returns a promise. This will get called once it reaches the queue.\n     */\n    callback: () => Promise<any>;\n\n    /**\n     * A deferred promise that gets resolved or rejected after executing the async callback\n     */\n    deferred: Deferred;\n  }\n}\n", "// @ts-nocheck\nexport default class Deferred<T> {\n  readonly promise: Promise<T>;\n\n  private _reject: (e?: any) => void;\n  get reject() { return this._reject; }\n\n  private _resolve: (t?: T) => void;\n  get resolve() { return this._resolve; }\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n}\n", "// @ts-nocheck\nimport { EventEmitter } from 'events';\n\nexport default class EventTarget {\n  private _eventEmitter: EventEmitter = new EventEmitter();\n\n  addEventListener(name: string, handler: Function): EventEmitter {\n    return this._eventEmitter.addListener(name, handler);\n  }\n\n  dispatchEvent(name: string, ...args: any[]): boolean {\n    return this._eventEmitter.emit(name, ...args);\n  }\n\n  removeEventListener(name: string, handler: Function): EventEmitter {\n    return this._eventEmitter.removeListener(name, handler);\n  }\n}\n", "// @ts-nocheck\nimport Deferred from './deferred';\nimport EventTarget from './eventtarget';\n\nimport ChromeAudioContext, { ChromeHTMLAudioElement, MediaStreamAudioDestinationNode } from './chromeaudiocontext';\n\n/**\n * Options that may be passed to AudioPlayer for dependency injection.\n */\ninterface IAudioPlayerOptions {\n  /**\n   * The factory for Audio.\n   */\n  AudioFactory: any;\n\n  /**\n   * The factory for XMLHttpRequest.\n   */\n  XMLHttpRequestFactory: any;\n}\n\n/**\n * An {@link AudioPlayer} is an HTMLAudioElement-like object that uses AudioContext\n *   to circumvent browser limitations.\n * @private\n */\nclass AudioPlayer extends EventTarget {\n  /**\n   * The AudioContext. This is passed in at construction and used to create\n   *   MediaStreamBuffers and AudioNodes for playing sound through.\n   */\n  private _audioContext: ChromeAudioContext;\n\n  /**\n   * The Audio element that is used to play sound through when a non-default\n   *   sinkId is set.\n   */\n  private _audioElement: ChromeHTMLAudioElement;\n\n  /**\n   * The AudioBufferSourceNode of the actively loaded sound. Null if a sound\n   *   has not been loaded yet. This is re-used for each time the sound is\n   *   played.\n   */\n  private _audioNode: AudioBufferSourceNode|null = null;\n\n  /**\n   * A Promise for the AudioBuffer. Listening for the resolution of this Promise\n   *   delays an operation until after the sound is loaded and ready to be\n   *   played.\n   */\n  private _bufferPromise: Promise<AudioBuffer>;\n\n  /**\n   * The current destination for audio playback. This is set to context.destination\n   *   when default, or a specific MediaStreamAudioDestinationNode when setSinkId\n   *   is set.\n   */\n  private _destination: MediaStreamAudioDestinationNode;\n\n  /**\n   * The GainNode used to control whether the sound is muted.\n   */\n  private _gainNode: GainNode;\n\n  /**\n   * Whether or not the audio element should loop. If disabled during playback,\n   *   playing continues until the sound ends and then stops looping.\n   */\n  private _loop: boolean = false;\n\n  /**\n   * An Array of deferred-like objects for each pending `play` Promise. When\n   *   .pause() is called or .src is set, all pending play Promises are\n   *   immediately rejected.\n   */\n  private _pendingPlayDeferreds: Array<Deferred<AudioBuffer>> = [];\n\n  /**\n   * The current sinkId of the device audio is being played through.\n   */\n  private _sinkId: string = 'default';\n\n  /**\n   * The source URL of the sound to play. When set, the currently playing sound will stop.\n   */\n  private _src: string = '';\n\n  /**\n   * The Factory to use to construct an XMLHttpRequest.\n   */\n  private _XMLHttpRequest: any;\n\n  get destination(): MediaStreamAudioDestinationNode { return this._destination; }\n  get loop(): boolean { return this._loop; }\n  set loop(shouldLoop: boolean) {\n    const self = this;\n    function pauseAfterPlaythrough() {\n      self._audioNode.removeEventListener('ended', pauseAfterPlaythrough);\n      self.pause();\n    }\n    // If a sound is already looping, it should continue playing\n    //   the current playthrough and then stop.\n    if (!shouldLoop && this.loop && !this.paused) {\n      this._audioNode.addEventListener('ended', pauseAfterPlaythrough);\n    }\n\n    this._loop = shouldLoop;\n  }\n\n  /**\n   * Whether the audio element is muted.\n   */\n  get muted(): boolean { return this._gainNode.gain.value === 0; }\n  set muted(shouldBeMuted: boolean) {\n    this._gainNode.gain.value = shouldBeMuted ? 0 : 1;\n  }\n\n  /**\n   * Whether the sound is paused. this._audioNode only exists when sound is playing;\n   *   otherwise AudioPlayer is considered paused.\n   */\n  get paused(): boolean { return this._audioNode === null; }\n  get src(): string { return this._src; }\n  set src(src: string) {\n    this._load(src);\n  }\n\n  /**\n   * The srcObject of the HTMLMediaElement\n   */\n  get srcObject(): MediaStream | MediaSource | Blob | undefined {\n    return this._audioElement.srcObject;\n  }\n  set srcObject(srcObject: MediaStream | MediaSource | Blob | undefined) {\n    this._audioElement.srcObject = srcObject;\n  }\n  get sinkId(): string { return this._sinkId; }\n\n  /**\n   * @param audioContext - The AudioContext to use for controlling sound the through.\n   * @param options\n   */\n  constructor(audioContext: any,\n              options?: IAudioPlayerOptions);\n\n  /**\n   * @param audioContext - The AudioContext to use for controlling sound the through.\n   * @param src - The URL of the sound to load.\n   * @param options\n   */\n  constructor(audioContext: any,\n              src: string,\n              options?: IAudioPlayerOptions);\n\n  /**\n   * @private\n   */\n  constructor(audioContext: any,\n              srcOrOptions: string|IAudioPlayerOptions = { } as IAudioPlayerOptions,\n              options: IAudioPlayerOptions = { } as IAudioPlayerOptions) {\n    super();\n\n    if (typeof srcOrOptions !== 'string') {\n      options = srcOrOptions;\n    }\n\n    this._audioContext = audioContext as ChromeAudioContext;\n    this._audioElement = new (options.AudioFactory || Audio)();\n    this._bufferPromise = this._createPlayDeferred().promise;\n    this._destination = this._audioContext.destination;\n    this._gainNode = this._audioContext.createGain();\n    this._gainNode.connect(this._destination);\n    this._XMLHttpRequest = options.XMLHttpRequestFactory || XMLHttpRequest;\n\n    this.addEventListener('canplaythrough', () => {\n      this._resolvePlayDeferreds();\n    });\n\n    if (typeof srcOrOptions === 'string') {\n      this.src = srcOrOptions;\n    }\n  }\n\n  /**\n   * Stop any ongoing playback and reload the source file.\n   */\n  load(): void {\n    this._load(this._src);\n  }\n\n  /**\n   * Pause the audio coming from this AudioPlayer. This will reject any pending\n   *   play Promises.\n   */\n  pause(): void {\n    if (this.paused) { return; }\n\n    this._audioElement.pause();\n\n    this._audioNode.stop();\n    this._audioNode.disconnect(this._gainNode);\n    this._audioNode = null;\n\n    this._rejectPlayDeferreds(new Error('The play() request was interrupted by a call to pause().'));\n  }\n\n  /**\n   * Play the sound. If the buffer hasn't loaded yet, wait for the buffer to load. If\n   *   the source URL is not set yet, this Promise will remain pending until a source\n   *   URL is set.\n   */\n  async play(): Promise<void> {\n    if (!this.paused) {\n      await this._bufferPromise;\n      if (!this.paused) { return; }\n      throw new Error('The play() request was interrupted by a call to pause().');\n    }\n\n    this._audioNode = this._audioContext.createBufferSource();\n    this._audioNode.loop = this.loop;\n\n    this._audioNode.addEventListener('ended', () => {\n      if (this._audioNode && this._audioNode.loop) { return; }\n      this.dispatchEvent('ended');\n    });\n\n    const buffer: AudioBuffer = await this._bufferPromise;\n\n    if (this.paused) {\n      throw new Error('The play() request was interrupted by a call to pause().');\n    }\n\n    this._audioNode.buffer = buffer;\n    this._audioNode.connect(this._gainNode);\n    this._audioNode.start();\n\n    if (this._audioElement.srcObject) {\n      return this._audioElement.play();\n    }\n  }\n\n  /**\n   * Change which device the sound should play through.\n   * @param sinkId - The sink of the device to play sound through.\n   */\n  async setSinkId(sinkId: string): Promise<void> {\n    if (typeof this._audioElement.setSinkId !== 'function') {\n      throw new Error('This browser does not support setSinkId.');\n    }\n\n    if (sinkId === this.sinkId) {\n      return;\n    }\n\n    if (sinkId === 'default') {\n      if (!this.paused) {\n        this._gainNode.disconnect(this._destination);\n      }\n\n      this._audioElement.srcObject = null;\n      this._destination = this._audioContext.destination;\n      this._gainNode.connect(this._destination);\n      this._sinkId = sinkId;\n      return;\n    }\n\n    await this._audioElement.setSinkId(sinkId);\n    if (this._audioElement.srcObject) { return; }\n\n    this._gainNode.disconnect(this._audioContext.destination);\n    this._destination = this._audioContext.createMediaStreamDestination();\n    this._audioElement.srcObject = this._destination.stream;\n    this._sinkId = sinkId;\n\n    this._gainNode.connect(this._destination);\n  }\n\n  /**\n   * Create a Deferred for a Promise that will be resolved when .src is set or rejected\n   *   when .pause is called.\n   */\n  private _createPlayDeferred(): Deferred<AudioBuffer> {\n    const deferred = new Deferred();\n    this._pendingPlayDeferreds.push(deferred as Deferred<AudioBuffer>);\n    return deferred as Deferred<AudioBuffer>;\n  }\n\n  /**\n   * Stop current playback and load a sound file.\n   * @param src - The source URL of the file to load\n   */\n  private _load(src: string): void {\n    if (this._src && this._src !== src) {\n      this.pause();\n    }\n\n    this._src = src;\n    this._bufferPromise = new Promise(async (resolve, reject) => {\n      if (!src) {\n        return this._createPlayDeferred().promise;\n      }\n\n      const buffer = await bufferSound(this._audioContext, this._XMLHttpRequest, src);\n      this.dispatchEvent('canplaythrough');\n      resolve(buffer);\n    });\n  }\n\n  /**\n   * Reject all deferreds for the Play promise.\n   * @param reason\n   */\n  private _rejectPlayDeferreds(reason?: any): void {\n    const deferreds = this._pendingPlayDeferreds;\n    deferreds.splice(0, deferreds.length).forEach(({ reject }) => reject(reason));\n  }\n\n  /**\n   * Resolve all deferreds for the Play promise.\n   * @param result\n   */\n  private _resolvePlayDeferreds(result?: any): void {\n    const deferreds = this._pendingPlayDeferreds;\n    deferreds.splice(0, deferreds.length).forEach(({ resolve }) => resolve(result));\n  }\n}\n\n/**\n * Use XMLHttpRequest to load the AudioBuffer of a remote audio asset.\n * @private\n * @param context - The AudioContext to use to decode the audio data\n * @param RequestFactory - The XMLHttpRequest factory to build\n * @param src - The URL of the audio asset to load.\n * @returns A Promise containing the decoded AudioBuffer.\n */\n// tslint:disable-next-line:variable-name\nasync function bufferSound(context: any, RequestFactory: any, src: string): Promise<AudioBuffer> {\n  const request: XMLHttpRequest = new RequestFactory();\n  request.open('GET', src, true);\n  request.responseType = 'arraybuffer';\n\n  const event: any = await new Promise(resolve => {\n    request.addEventListener('load', resolve);\n    request.send();\n  });\n\n  // Safari uses a callback here instead of a Promise.\n  try {\n    return context.decodeAudioData(event.target.response);\n  } catch (e) {\n    return new Promise(resolve => {\n      context.decodeAudioData(event.target.response, resolve);\n    }) as Promise<AudioBuffer>;\n  }\n}\n\nexport default AudioPlayer;\n", "// @ts-nocheck\nimport { AsyncQueue } from './asyncQueue';\nimport AudioPlayer from './audioplayer/audioplayer';\nimport { InvalidArgumentError } from './errors';\n\n/**\n * @class\n * @param {string} name - Name of the sound\n * @param {string} url - URL of the sound\n * @param {Sound#ConstructorOptions} options\n * @property {boolean} isPlaying - Whether the Sound is currently playing audio.\n * @property {string} name - Name of the sound\n * @property {string} url - URL of the sound\n * @property {AudioContext} audioContext - The AudioContext to use if available for AudioPlayer.\n */\n/**\n * @typedef {Object} Sound#ConstructorOptions\n * @property {number} [maxDuration=0] - The maximum length of time to play the sound\n *   before stopping it.\n * @property {Boolean} [shouldLoop=false] - Whether the sound should be looped.\n */\nfunction Sound(name, url, options) {\n  if (!(this instanceof Sound)) {\n    return new Sound(name, url, options);\n  }\n\n  if (!name || !url) {\n    throw new InvalidArgumentError('name and url are required arguments');\n  }\n\n  options = Object.assign({\n    AudioFactory: typeof Audio !== 'undefined' ? Audio : null,\n    maxDuration: 0,\n    shouldLoop: false,\n  }, options);\n\n  options.AudioPlayer = options.audioContext\n    ? AudioPlayer.bind(AudioPlayer, options.audioContext)\n    : options.AudioFactory;\n\n  Object.defineProperties(this, {\n    _Audio: { value: options.AudioPlayer },\n    _activeEls: { value: new Map() },\n    _isSinkSupported: {\n      value: options.AudioFactory !== null\n        && typeof options.AudioFactory.prototype.setSinkId === 'function',\n    },\n    _maxDuration: { value: options.maxDuration },\n    _maxDurationTimeout: {\n      value: null,\n      writable: true,\n    },\n    _operations: { value: new AsyncQueue() },\n    _playPromise: {\n      value: null,\n      writable: true,\n    },\n    _shouldLoop: { value: options.shouldLoop },\n    _sinkIds: { value: ['default'] },\n    isPlaying: {\n      enumerable: true,\n      get() {\n        return !!this._playPromise;\n      },\n    },\n    name: {\n      enumerable: true,\n      value: name,\n    },\n    url: {\n      enumerable: true,\n      value: url,\n    },\n  });\n\n  if (this._Audio) {\n    // Play it (muted and should not loop) as soon as possible so that it does not get incorrectly caught by Chrome's\n    // \"gesture requirement for media playback\" feature.\n    // https://plus.google.com/+FrancoisBeaufort/posts/6PiJQqJzGqX\n    this._play(true, false);\n  }\n}\n\nfunction destroyAudioElement(audioElement) {\n  if (audioElement) {\n    audioElement.pause();\n    audioElement.src = '';\n    audioElement.srcObject = null;\n    audioElement.load();\n  }\n}\n\n/**\n * Plays the audio element that was initialized using the speficied sinkId\n */\nSound.prototype._playAudioElement = function _playAudioElement(sinkId, isMuted, shouldLoop) {\n  const audioElement = this._activeEls.get(sinkId);\n\n  if (!audioElement) {\n    throw new InvalidArgumentError(`sinkId: \"${sinkId}\" doesn't have an audio element`);\n  }\n\n  audioElement.muted = !!isMuted;\n  audioElement.loop = !!shouldLoop;\n\n  return audioElement.play()\n    .then(() => audioElement)\n    .catch((reason) => {\n      destroyAudioElement(audioElement);\n      this._activeEls.delete(sinkId);\n      throw reason;\n    });\n};\n\n/**\n * Start playing the sound. Will stop the currently playing sound first.\n * If it exists, the audio element that was initialized for the sinkId will be used\n */\nSound.prototype._play = function _play(forceIsMuted, forceShouldLoop) {\n  if (this.isPlaying) {\n    this._stop();\n  }\n\n  if (this._maxDuration > 0) {\n    this._maxDurationTimeout = setTimeout(this._stop.bind(this), this._maxDuration);\n  }\n\n  forceShouldLoop = typeof forceShouldLoop === 'boolean' ? forceShouldLoop : this._shouldLoop;\n  const self = this;\n  const playPromise = this._playPromise = Promise.all(this._sinkIds.map(function createAudioElement(sinkId) {\n    if (!self._Audio) {\n      return Promise.resolve();\n    }\n\n    let audioElement = self._activeEls.get(sinkId);\n    if (audioElement) {\n      return self._playAudioElement(sinkId, forceIsMuted, forceShouldLoop);\n    }\n\n    audioElement = new self._Audio(self.url);\n\n    // Make sure the browser always retrieves the resource using CORS.\n    // By default when using media tags, origin header is not sent to server\n    // which causes the server to not return CORS headers. When this caches\n    // on the CDN or browser, it causes issues to future requests that needs CORS,\n    // which is true when using AudioContext. Please note that we won't have to do this\n    // once we migrate to CloudFront.\n    if (typeof audioElement.setAttribute === 'function') {\n      audioElement.setAttribute('crossorigin', 'anonymous');\n    }\n\n    /**\n     * (rrowland) Bug in Chrome 53 & 54 prevents us from calling Audio.setSinkId without\n     *   crashing the tab. https://bugs.chromium.org/p/chromium/issues/detail?id=655342\n     */\n    return new Promise(resolve => {\n      audioElement.addEventListener('canplaythrough', resolve);\n    }).then(() => {\n      return (self._isSinkSupported\n          ? audioElement.setSinkId(sinkId)\n          : Promise.resolve()).then(function setSinkIdSuccess() {\n        self._activeEls.set(sinkId, audioElement);\n\n        // Stop has been called, bail out\n        if (!self._playPromise) {\n          return Promise.resolve();\n        }\n        return self._playAudioElement(sinkId, forceIsMuted, forceShouldLoop);\n      });\n    });\n  }));\n\n  return playPromise;\n};\n\n/**\n * Stop playing the sound.\n */\nSound.prototype._stop = function _stop() {\n  this._activeEls.forEach((audioEl, sinkId) => {\n    if (this._sinkIds.includes(sinkId)) {\n      audioEl.pause();\n      audioEl.currentTime = 0;\n    } else {\n      // Destroy the ones that are not used anymore\n      destroyAudioElement(audioEl);\n      this._activeEls.delete(sinkId);\n    }\n  });\n\n  clearTimeout(this._maxDurationTimeout);\n\n  this._playPromise = null;\n  this._maxDurationTimeout = null;\n};\n\n/**\n * Update the sinkIds of the audio output devices this sound should play through.\n */\nSound.prototype.setSinkIds = function setSinkIds(ids) {\n  if (!this._isSinkSupported) { return; }\n\n  ids = ids.forEach ? ids : [ids];\n  [].splice.apply(this._sinkIds, [0, this._sinkIds.length].concat(ids));\n};\n\n/**\n * Add a stop operation to the queue\n */\nSound.prototype.stop = function stop() {\n  this._operations.enqueue(() => {\n    this._stop();\n    return Promise.resolve();\n  });\n};\n\n/**\n * Add a play operation to the queue\n */\nSound.prototype.play = function play() {\n  return this._operations.enqueue(() => this._play());\n};\n\nexport default Sound;\n", "import { EventEmitter } from 'events';\nimport { levels as LogLevels, LogLevelDesc } from 'loglevel';\nimport AudioHelper from './audiohelper';\nimport { AudioProcessorEventObserver } from './audioprocessoreventobserver';\nimport Call from './call';\nimport * as C from './constants';\nimport DialtonePlayer from './dialtonePlayer';\nimport {\n  AuthorizationErrors,\n  ClientErrors,\n  GeneralErrors,\n  getPreciseSignalingErrorByCode,\n  InvalidArgumentError,\n  InvalidStateError,\n  NotSupportedError,\n  TwilioError,\n} from './errors';\nimport Publisher from './eventpublisher';\nimport Log from './log';\nimport { PreflightTest } from './preflight/preflight';\nimport PStream from './pstream';\nimport {\n  createEventGatewayURI,\n  createSignalingEndpointURL,\n  Edge,\n  getChunderURIs,\n  getRegionShortcode,\n  Region,\n  regionToEdge,\n} from './regions';\nimport * as rtc from './rtc';\nimport getUserMedia from './rtc/getusermedia';\nimport { generateVoiceEventSid } from './sid';\nimport Sound from './sound';\nimport {\n  isLegacyEdge,\n  isUnifiedPlanDefault,\n  promisifyEvents,\n  queryToJson,\n} from './util';\n\n// Placeholders until we convert the respective files to TypeScript.\n/**\n * @private\n */\nexport type IPStream = any;\n/**\n * @private\n */\nexport type IPublisher = any;\n/**\n * @private\n */\nexport type ISound = any;\n\nconst REGISTRATION_INTERVAL = 30000;\nconst RINGTONE_PLAY_TIMEOUT = 2000;\nconst PUBLISHER_PRODUCT_NAME = 'twilio-js-sdk';\nconst INVALID_TOKEN_MESSAGE = 'Parameter \"token\" must be of type \"string\".';\n\ndeclare const RTCRtpTransceiver: any;\ndeclare const webkitAudioContext: typeof AudioContext;\n\n/**\n * Options that may be passed to the {@link Device} constructor for internal testing.\n * @private\n */\nexport interface IExtendedDeviceOptions extends Device.Options {\n  /**\n   * Custom {@link AudioHelper} constructor\n   */\n  AudioHelper?: typeof AudioHelper;\n\n  /**\n   * The max amount of time in milliseconds to allow stream (re)-connect\n   * backoffs.\n   */\n  backoffMaxMs?: number;\n\n  /**\n   * Custom {@link Call} constructor\n   */\n  Call?: typeof Call;\n\n  /**\n   * Hostname of the signaling gateway to connect to.\n   */\n  chunderw?: string | string[];\n\n  /**\n   * Hostname of the event gateway to connect to.\n   */\n  eventgw?: string;\n\n  /**\n   * File input stream to use instead of reading from mic\n   */\n  fileInputStream?: MediaStream;\n\n  /**\n   * Ignore browser support, disabling the exception that is thrown when neither WebRTC nor\n   * ORTC are supported.\n   */\n  ignoreBrowserSupport?: boolean;\n\n  /**\n   * Whether this is a preflight call or not\n   */\n  preflight?: boolean;\n\n  /**\n   * Custom PStream constructor\n   */\n  PStream?: IPStream;\n\n  /**\n   * Custom Publisher constructor\n   */\n  Publisher?: IPublisher;\n\n  /**\n   * Whether or not to publish events to insights using {@link Device._publisher}.\n   */\n  publishEvents?: boolean;\n\n  /**\n   * MediaStreamConstraints to pass to getUserMedia when making or accepting a Call.\n   */\n  rtcConstraints?: Call.AcceptOptions['rtcConstraints'];\n\n  /**\n   * Custom Sound constructor\n   */\n  Sound?: ISound;\n\n  /**\n   * Voice event SID generator.\n   */\n  voiceEventSidGenerator?: () => string;\n}\n\n/**\n * A sound definition used to initialize a Sound file.\n * @private\n */\nexport interface ISoundDefinition {\n  /**\n   * Name of the sound file.\n   */\n  filename: string;\n\n  /**\n   * The amount of time this sound file should play before being stopped automatically.\n   */\n  maxDuration?: number;\n\n  /**\n   * Whether or not this sound should loop after playthrough finishes.\n   */\n  shouldLoop?: boolean;\n}\n\n/**\n * Twilio Device. Allows registration for incoming calls, and placing outgoing calls.\n */\nclass Device extends EventEmitter {\n  /**\n   * The AudioContext to be used by {@link Device} instances.\n   * @private\n   */\n  static get audioContext(): AudioContext | undefined {\n    return Device._audioContext;\n  }\n\n  /**\n   * Which sound file extension is supported.\n   * @private\n   */\n  static get extension(): 'mp3' | 'ogg' {\n    // NOTE(mroberts): Node workaround.\n    const a: any = typeof document !== 'undefined'\n      ? document.createElement('audio') : { canPlayType: false };\n\n    let canPlayMp3;\n    try {\n      canPlayMp3 = a.canPlayType && !!a.canPlayType('audio/mpeg').replace(/no/, '');\n    } catch (e) {\n      canPlayMp3 = false;\n    }\n\n    let canPlayVorbis;\n    try {\n      canPlayVorbis = a.canPlayType && !!a.canPlayType('audio/ogg;codecs=\\'vorbis\\'').replace(/no/, '');\n    } catch (e) {\n      canPlayVorbis = false;\n    }\n\n    return (canPlayVorbis && !canPlayMp3) ? 'ogg' : 'mp3';\n  }\n\n  /**\n   * Whether or not this SDK is supported by the current browser.\n   */\n  static get isSupported(): boolean { return rtc.enabled(); }\n\n  /**\n   * Package name of the SDK.\n   */\n  static get packageName(): string { return C.PACKAGE_NAME; }\n\n  /**\n   * Run some tests to identify issues, if any, prohibiting successful calling.\n   * @param token - A Twilio JWT token string\n   * @param options\n   */\n  static runPreflight(token: string, options?: PreflightTest.Options): PreflightTest {\n    return new PreflightTest(token, { audioContext: Device._getOrCreateAudioContext(), ...options });\n  }\n\n  /**\n   * String representation of {@link Device} class.\n   * @private\n   */\n  static toString(): string {\n    return '[Twilio.Device class]';\n  }\n\n  /**\n   * Current SDK version.\n   */\n  static get version(): string { return C.RELEASE_VERSION; }\n\n  /**\n   * An AudioContext to share between {@link Device}s.\n   */\n  private static _audioContext?: AudioContext;\n\n  private static _defaultSounds: Record<string, ISoundDefinition> = {\n    disconnect: { filename: 'disconnect', maxDuration: 3000 },\n    dtmf0: { filename: 'dtmf-0', maxDuration: 1000 },\n    dtmf1: { filename: 'dtmf-1', maxDuration: 1000 },\n    dtmf2: { filename: 'dtmf-2', maxDuration: 1000 },\n    dtmf3: { filename: 'dtmf-3', maxDuration: 1000 },\n    dtmf4: { filename: 'dtmf-4', maxDuration: 1000 },\n    dtmf5: { filename: 'dtmf-5', maxDuration: 1000 },\n    dtmf6: { filename: 'dtmf-6', maxDuration: 1000 },\n    dtmf7: { filename: 'dtmf-7', maxDuration: 1000 },\n    dtmf8: { filename: 'dtmf-8', maxDuration: 1000 },\n    dtmf9: { filename: 'dtmf-9', maxDuration: 1000 },\n    dtmfh: { filename: 'dtmf-hash', maxDuration: 1000 },\n    dtmfs: { filename: 'dtmf-star', maxDuration: 1000 },\n    incoming: { filename: 'incoming', shouldLoop: true },\n    outgoing: { filename: 'outgoing', maxDuration: 3000 },\n  };\n\n  /**\n   * A DialtonePlayer to play mock DTMF sounds through.\n   */\n  private static _dialtonePlayer?: DialtonePlayer;\n\n  /**\n   * Whether or not the browser uses unified-plan SDP by default.\n   */\n  private static _isUnifiedPlanDefault: boolean | undefined;\n\n  /**\n   * Initializes the AudioContext instance shared across the Voice SDK,\n   * or returns the existing instance if one has already been initialized.\n   */\n  private static _getOrCreateAudioContext(): AudioContext | undefined {\n    if (!Device._audioContext) {\n      if (typeof AudioContext !== 'undefined') {\n        Device._audioContext = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Device._audioContext = new webkitAudioContext();\n      }\n    }\n    return Device._audioContext;\n  }\n\n  /**\n   * The currently active {@link Call}, if there is one.\n   */\n  private _activeCall: Call | null = null;\n\n  /**\n   * The AudioHelper instance associated with this {@link Device}.\n   */\n  private _audio: AudioHelper | null = null;\n\n  /**\n   * The AudioProcessorEventObserver instance to use\n   */\n  private _audioProcessorEventObserver: AudioProcessorEventObserver | null = null;\n\n  /**\n   * {@link Device._confirmClose} bound to the specific {@link Device} instance.\n   */\n  private _boundConfirmClose: typeof Device.prototype._confirmClose;\n\n  /**\n   * {@link Device.destroy} bound to the specific {@link Device} instance.\n   */\n  private _boundDestroy: typeof Device.prototype.destroy;\n\n  /**\n   * An audio input MediaStream to pass to new {@link Call} instances.\n   */\n  private _callInputStream: MediaStream | null = null;\n\n  /**\n   * An array of {@link Call}s. Though only one can be active, multiple may exist when there\n   * are multiple incoming, unanswered {@link Call}s.\n   */\n  private _calls: Call[] = [];\n\n  /**\n   * An array of {@link Device} IDs to be used to play sounds through, to be passed to\n   * new {@link Call} instances.\n   */\n  private _callSinkIds: string[] = ['default'];\n\n  /**\n   * The list of chunder URIs that will be passed to PStream\n   */\n  private _chunderURIs: string[] = [];\n\n  /**\n   * Default options used by {@link Device}.\n   */\n  private readonly _defaultOptions: IExtendedDeviceOptions = {\n    allowIncomingWhileBusy: false,\n    closeProtection: false,\n    codecPreferences: [Call.Codec.PCMU, Call.Codec.Opus],\n    dscp: true,\n    enableImprovedSignalingErrorPrecision: false,\n    forceAggressiveIceNomination: false,\n    logLevel: LogLevels.ERROR,\n    maxCallSignalingTimeoutMs: 0,\n    preflight: false,\n    sounds: { },\n    tokenRefreshMs: 10000,\n    voiceEventSidGenerator: generateVoiceEventSid,\n  };\n\n  /**\n   * The name of the edge the {@link Device} is connected to.\n   */\n  private _edge: string | null = null;\n\n  /**\n   * The name of the home region the {@link Device} is connected to.\n   */\n  private _home: string | null = null;\n\n  /**\n   * The identity associated with this Device.\n   */\n  private _identity: string | null = null;\n\n  /**\n   * Whether SDK is run as a browser extension\n   */\n  private _isBrowserExtension: boolean;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = new Log('Device');\n\n  /**\n   * The internal promise created when calling {@link Device.makeCall}.\n   */\n  private _makeCallPromise: Promise<any> | null = null;\n\n  /**\n   * Network related information\n   * See https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API\n   */\n  private _networkInformation: any;\n\n  /**\n   * The options passed to {@link Device} constructor or {@link Device.updateOptions}.\n   */\n  private _options: IExtendedDeviceOptions = { };\n\n  /**\n   * The preferred URI to (re)-connect signaling to.\n   */\n  private _preferredURI: string | null = null;\n\n  /**\n   * An Insights Event Publisher.\n   */\n  private _publisher: IPublisher | null = null;\n\n  /**\n   * The region the {@link Device} is connected to.\n   */\n  private _region: string | null = null;\n\n  /**\n   * A timeout ID for a setTimeout schedule to re-register the {@link Device}.\n   */\n  private _regTimer: NodeJS.Timeout | null = null;\n\n  /**\n   * Boolean representing whether or not the {@link Device} was registered when\n   * receiving a signaling `offline`. Determines if the {@link Device} attempts\n   * a `re-register` once signaling is re-established when receiving a\n   * `connected` event from the stream.\n   */\n  private _shouldReRegister: boolean = false;\n\n  /**\n   * A Map of Sounds to play.\n   */\n  private _soundcache: Map<Device.SoundName, ISound> = new Map();\n\n  /**\n   * The current status of the {@link Device}.\n   */\n  private _state: Device.State = Device.State.Unregistered;\n\n  /**\n   * A map from {@link Device.State} to {@link Device.EventName}.\n   */\n  private readonly _stateEventMapping: Record<Device.State, Device.EventName> = {\n    [Device.State.Destroyed]: Device.EventName.Destroyed,\n    [Device.State.Unregistered]: Device.EventName.Unregistered,\n    [Device.State.Registering]: Device.EventName.Registering,\n    [Device.State.Registered]: Device.EventName.Registered,\n  };\n\n  /**\n   * The Signaling stream.\n   */\n  private _stream: IPStream | null = null;\n\n  /**\n   * A promise that will resolve when the Signaling stream is ready.\n   */\n  private _streamConnectedPromise: Promise<IPStream> | null = null;\n\n  /**\n   * The JWT string currently being used to authenticate this {@link Device}.\n   */\n  private _token: string;\n\n  /**\n   * A timeout to track when the current AccessToken will expire.\n   */\n  private _tokenWillExpireTimeout: NodeJS.Timeout | null = null;\n\n  /**\n   * Construct a {@link Device} instance. The {@link Device} can be registered\n   * to make and listen for calls using {@link Device.register}.\n   * @param options\n   */\n  constructor(token: string, options: Device.Options = { }) {\n    super();\n\n    // Setup loglevel asap to avoid missed logs\n    this._setupLoglevel(options.logLevel);\n    this._logOptions('constructor', options);\n\n    this.updateToken(token);\n\n    if (isLegacyEdge()) {\n      throw new NotSupportedError(\n        'Microsoft Edge Legacy (https://support.microsoft.com/en-us/help/4533505/what-is-microsoft-edge-legacy) ' +\n        'is deprecated and will not be able to connect to Twilio to make or receive calls after September 1st, 2020. ' +\n        'Please see this documentation for a list of supported browsers ' +\n        'https://www.twilio.com/docs/voice/client/javascript#supported-browsers',\n      );\n    }\n\n    if (!Device.isSupported && (options as IExtendedDeviceOptions).ignoreBrowserSupport) {\n      if (window && window.location && window.location.protocol === 'http:') {\n        throw new NotSupportedError(`twilio.js wasn't able to find WebRTC browser support. \\\n          This is most likely because this page is served over http rather than https, \\\n          which does not support WebRTC in many browsers. Please load this page over https and \\\n          try again.`);\n      }\n\n      throw new NotSupportedError(`twilio.js 1.3+ SDKs require WebRTC browser support. \\\n        For more information, see <https://www.twilio.com/docs/api/client/twilio-js>. \\\n        If you have any questions about this announcement, please contact \\\n        Twilio Support at <help@twilio.com>.`);\n    }\n\n    const root: any = globalThis as any;\n    const browser: any = root.msBrowser || root.browser || root.chrome;\n\n    this._isBrowserExtension = (!!browser && !!browser.runtime && !!browser.runtime.id)\n      || (!!root.safari && !!root.safari.extension);\n\n    if (this._isBrowserExtension) {\n      this._log.info('Running as browser extension.');\n    }\n\n    if (navigator) {\n      const n = navigator as any;\n      this._networkInformation = n.connection\n        || n.mozConnection\n        || n.webkitConnection;\n    }\n\n    if (this._networkInformation && typeof this._networkInformation.addEventListener === 'function') {\n      this._networkInformation.addEventListener('change', this._publishNetworkChange);\n    }\n\n    Device._getOrCreateAudioContext();\n\n    if (Device._audioContext) {\n      if (!Device._dialtonePlayer) {\n        Device._dialtonePlayer = new DialtonePlayer(Device._audioContext);\n      }\n    }\n\n    if (typeof Device._isUnifiedPlanDefault === 'undefined') {\n      Device._isUnifiedPlanDefault = typeof window !== 'undefined'\n        && typeof RTCPeerConnection !== 'undefined'\n        && typeof RTCRtpTransceiver !== 'undefined'\n      ? isUnifiedPlanDefault(window, window.navigator, RTCPeerConnection, RTCRtpTransceiver)\n      : false;\n    }\n\n    this._boundDestroy = this.destroy.bind(this);\n    this._boundConfirmClose = this._confirmClose.bind(this);\n\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('unload', this._boundDestroy);\n      window.addEventListener('pagehide', this._boundDestroy);\n    }\n\n    this.updateOptions(options);\n  }\n\n  /**\n   * Return the {@link AudioHelper} used by this {@link Device}.\n   */\n  get audio(): AudioHelper | null {\n    return this._audio;\n  }\n\n  /**\n   * Make an outgoing Call.\n   * @param options\n   */\n  async connect(options: Device.ConnectOptions = { }): Promise<Call> {\n    this._log.debug('.connect', JSON.stringify(options));\n    this._throwIfDestroyed();\n    if (this._activeCall) {\n      throw new InvalidStateError('A Call is already active');\n    }\n\n    let customParameters;\n    let parameters;\n    let signalingReconnectToken;\n\n    if (options.connectToken) {\n      try {\n        const connectTokenParts = JSON.parse(decodeURIComponent(atob(options.connectToken)));\n        customParameters = connectTokenParts.customParameters;\n        parameters = connectTokenParts.parameters;\n        signalingReconnectToken = connectTokenParts.signalingReconnectToken;\n      } catch {\n        throw new InvalidArgumentError('Cannot parse connectToken');\n      }\n\n      if (!parameters || !parameters.CallSid || !signalingReconnectToken) {\n        throw new InvalidArgumentError('Invalid connectToken');\n      }\n    }\n\n    let isReconnect = false;\n    let twimlParams: Record<string, string> = {};\n    const callOptions: Call.Options = {\n      enableImprovedSignalingErrorPrecision:\n      !!this._options.enableImprovedSignalingErrorPrecision,\n      rtcConfiguration: options.rtcConfiguration,\n      voiceEventSidGenerator: this._options.voiceEventSidGenerator,\n    };\n\n    if (signalingReconnectToken && parameters) {\n      isReconnect = true;\n      callOptions.callParameters = parameters;\n      callOptions.reconnectCallSid = parameters.CallSid;\n      callOptions.reconnectToken = signalingReconnectToken;\n      twimlParams = customParameters || twimlParams;\n    } else {\n      twimlParams = options.params || twimlParams;\n    }\n\n    let activeCall;\n    this._makeCallPromise = this._makeCall(twimlParams, callOptions, isReconnect);\n    try {\n      activeCall = this._activeCall = await this._makeCallPromise;\n    } finally {\n      this._makeCallPromise = null;\n    }\n\n    // Make sure any incoming calls are ignored\n    this._calls.splice(0).forEach(call => call.ignore());\n\n    // Stop the incoming sound if it's playing\n    this._soundcache.get(Device.SoundName.Incoming).stop();\n\n    activeCall.accept({ rtcConstraints: options.rtcConstraints });\n    this._publishNetworkChange();\n    return activeCall;\n  }\n\n  /**\n   * Return the calls that this {@link Device} is maintaining.\n   */\n  get calls(): Call[] {\n    return this._calls;\n  }\n\n  /**\n   * Destroy the {@link Device}, freeing references to be garbage collected.\n   */\n  destroy(): void {\n    this._log.debug('.destroy');\n\n    this._log.debug('Rejecting any incoming calls');\n    const calls = this._calls.slice(0);\n    calls.forEach((call: Call) => call.reject());\n\n    this.disconnectAll();\n    this._stopRegistrationTimer();\n\n    this._destroyStream();\n    this._destroyAudioHelper();\n    this._audioProcessorEventObserver?.destroy();\n    this._destroyPublisher();\n\n    if (this._networkInformation && typeof this._networkInformation.removeEventListener === 'function') {\n      this._networkInformation.removeEventListener('change', this._publishNetworkChange);\n    }\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('beforeunload', this._boundConfirmClose);\n      window.removeEventListener('unload', this._boundDestroy);\n      window.removeEventListener('pagehide', this._boundDestroy);\n    }\n\n    this._setState(Device.State.Destroyed);\n    EventEmitter.prototype.removeAllListeners.call(this);\n  }\n\n  /**\n   * Disconnect all {@link Call}s.\n   */\n  disconnectAll(): void {\n    this._log.debug('.disconnectAll');\n    const calls = this._calls.splice(0);\n    calls.forEach((call: Call) => call.disconnect());\n\n    if (this._activeCall) {\n      this._activeCall.disconnect();\n    }\n  }\n\n  /**\n   * Returns the {@link Edge} value the {@link Device} is currently connected\n   * to. The value will be `null` when the {@link Device} is offline.\n   */\n  get edge(): string | null {\n    return this._edge;\n  }\n\n  /**\n   * Returns the home value the {@link Device} is currently connected\n   * to. The value will be `null` when the {@link Device} is offline.\n   */\n  get home(): string | null {\n    return this._home;\n  }\n\n  /**\n   * Returns the identity associated with the {@link Device} for incoming calls. Only\n   * populated when registered.\n   */\n  get identity(): string | null {\n    return this._identity;\n  }\n\n  /**\n   * Whether the Device is currently on an active Call.\n   */\n  get isBusy(): boolean {\n    return !!this._activeCall;\n  }\n\n  /**\n   * Register the `Device` to the Twilio backend, allowing it to receive calls.\n   */\n  async register(): Promise<void> {\n    this._log.debug('.register');\n    if (this.state !== Device.State.Unregistered) {\n      throw new InvalidStateError(\n        `Attempt to register when device is in state \"${this.state}\". ` +\n        `Must be \"${Device.State.Unregistered}\".`,\n      );\n    }\n\n    this._shouldReRegister = false;\n    this._setState(Device.State.Registering);\n\n    await (this._streamConnectedPromise || this._setupStream());\n    await this._sendPresence(true);\n    await promisifyEvents(this, Device.State.Registered, Device.State.Unregistered);\n  }\n\n  /**\n   * Get the state of this {@link Device} instance\n   */\n  get state(): Device.State {\n    return this._state;\n  }\n\n  /**\n   * Get the token used by this {@link Device}.\n   */\n  get token(): string | null {\n    return this._token;\n  }\n\n  /**\n   * String representation of {@link Device} instance.\n   * @private\n   */\n  toString() {\n    return '[Twilio.Device instance]';\n  }\n\n  /**\n   * Unregister the `Device` to the Twilio backend, disallowing it to receive\n   * calls.\n   */\n  async unregister(): Promise<void> {\n    this._log.debug('.unregister');\n    if (this.state !== Device.State.Registered) {\n      throw new InvalidStateError(\n        `Attempt to unregister when device is in state \"${this.state}\". ` +\n        `Must be \"${Device.State.Registered}\".`,\n      );\n    }\n\n    this._shouldReRegister = false;\n\n    const stream = await this._streamConnectedPromise;\n    const streamOfflinePromise = new Promise(resolve => {\n      stream.on('offline', resolve);\n    });\n    await this._sendPresence(false);\n    await streamOfflinePromise;\n  }\n\n  /**\n   * Set the options used within the {@link Device}.\n   * @param options\n   */\n  updateOptions(options: Device.Options = { }): void {\n    this._logOptions('updateOptions', options);\n    if (this.state === Device.State.Destroyed) {\n      throw new InvalidStateError(\n        `Attempt to \"updateOptions\" when device is in state \"${this.state}\".`,\n      );\n    }\n\n    this._options = { ...this._defaultOptions, ...this._options, ...options };\n\n    const originalChunderURIs: Set<string> = new Set(this._chunderURIs);\n\n    const newChunderURIs = this._chunderURIs = (\n      this._getChunderws() || getChunderURIs(this._options.edge)\n    ).map(createSignalingEndpointURL);\n\n    let hasChunderURIsChanged = originalChunderURIs.size !== newChunderURIs.length;\n\n    if (!hasChunderURIsChanged) {\n      for (const uri of newChunderURIs) {\n        if (!originalChunderURIs.has(uri)) {\n          hasChunderURIsChanged = true;\n          break;\n        }\n      }\n    }\n\n    if (this.isBusy && hasChunderURIsChanged) {\n      throw new InvalidStateError('Cannot change Edge while on an active Call');\n    }\n\n    this._setupLoglevel(this._options.logLevel);\n\n    for (const name of Object.keys(Device._defaultSounds)) {\n      const soundDef: ISoundDefinition = Device._defaultSounds[name];\n\n      const defaultUrl: string = `${C.SOUNDS_BASE_URL}/${soundDef.filename}.${Device.extension}`\n        + `?cache=${C.RELEASE_VERSION}`;\n\n      const soundUrl: string = this._options.sounds && this._options.sounds[name as Device.SoundName] || defaultUrl;\n      const sound: any = new (this._options.Sound || Sound)(name, soundUrl, {\n        audioContext: this._options.disableAudioContextSounds ? null : Device.audioContext,\n        maxDuration: soundDef.maxDuration,\n        shouldLoop: soundDef.shouldLoop,\n      });\n\n      this._soundcache.set(name as Device.SoundName, sound);\n    }\n\n    this._setupAudioHelper();\n    this._setupPublisher();\n\n    if (hasChunderURIsChanged && this._streamConnectedPromise) {\n      this._setupStream();\n    }\n\n    // Setup close protection and make sure we clean up ongoing calls on unload.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener === 'function' &&\n      this._options.closeProtection\n    ) {\n      window.removeEventListener('beforeunload', this._boundConfirmClose);\n      window.addEventListener('beforeunload', this._boundConfirmClose);\n    }\n  }\n\n  /**\n   * Update the token used by this {@link Device} to connect to Twilio.\n   * It is recommended to call this API after [[Device.tokenWillExpireEvent]] is emitted,\n   * and before or after a call to prevent a potential ~1s audio loss during the update process.\n   * @param token\n   */\n  updateToken(token: string) {\n    this._log.debug('.updateToken');\n    if (this.state === Device.State.Destroyed) {\n      throw new InvalidStateError(\n        `Attempt to \"updateToken\" when device is in state \"${this.state}\".`,\n      );\n    }\n\n    if (typeof token !== 'string') {\n      throw new InvalidArgumentError(INVALID_TOKEN_MESSAGE);\n    }\n\n    this._token = token;\n\n    if (this._stream) {\n      this._stream.setToken(this._token);\n    }\n\n    if (this._publisher) {\n      this._publisher.setToken(this._token);\n    }\n  }\n\n  /**\n   * Called on window's beforeunload event if closeProtection is enabled,\n   * preventing users from accidentally navigating away from an active call.\n   * @param event\n   */\n  private _confirmClose(event: any): string {\n    if (!this._activeCall) { return ''; }\n\n    const closeProtection: boolean | string = this._options.closeProtection || false;\n    const confirmationMsg: string = typeof closeProtection !== 'string'\n      ? 'A call is currently in-progress. Leaving or reloading this page will end the call.'\n      : closeProtection;\n\n    (event || window.event).returnValue = confirmationMsg;\n    return confirmationMsg;\n  }\n\n  /**\n   * Create the default Insights payload\n   * @param call\n   */\n  private _createDefaultPayload = (call?: Call): Record<string, any> => {\n    const payload: Record<string, any> = {\n      aggressive_nomination: this._options.forceAggressiveIceNomination,\n      browser_extension: this._isBrowserExtension,\n      dscp: !!this._options.dscp,\n      ice_restart_enabled: true,\n      platform: rtc.getMediaEngine(),\n      sdk_version: C.RELEASE_VERSION,\n    };\n\n    function setIfDefined(propertyName: string, value: string | undefined | null) {\n      if (value) { payload[propertyName] = value; }\n    }\n\n    if (call) {\n      const callSid = call.parameters.CallSid;\n      setIfDefined('call_sid', /^TJ/.test(callSid) ? undefined : callSid);\n      setIfDefined('temp_call_sid', call.outboundConnectionId);\n      setIfDefined('audio_codec', call.codec);\n      payload.direction = call.direction;\n    }\n\n    setIfDefined('gateway', this._stream && this._stream.gateway);\n    setIfDefined('region', this._stream && this._stream.region);\n\n    return payload;\n  }\n\n  /**\n   * Destroy the AudioHelper.\n   */\n  private _destroyAudioHelper() {\n    if (!this._audio) { return; }\n    this._audio._destroy();\n    this._audio = null;\n  }\n\n  /**\n   * Destroy the publisher.\n   */\n  private _destroyPublisher() {\n    // Attempt to destroy non-existent publisher.\n    if (!this._publisher) { return; }\n\n    this._publisher = null;\n  }\n\n  /**\n   * Destroy the connection to the signaling server.\n   */\n  private _destroyStream() {\n    if (this._stream) {\n      this._stream.removeListener('close', this._onSignalingClose);\n      this._stream.removeListener('connected', this._onSignalingConnected);\n      this._stream.removeListener('error', this._onSignalingError);\n      this._stream.removeListener('invite', this._onSignalingInvite);\n      this._stream.removeListener('offline', this._onSignalingOffline);\n      this._stream.removeListener('ready', this._onSignalingReady);\n\n      this._stream.destroy();\n      this._stream = null;\n    }\n\n    this._onSignalingOffline();\n\n    this._streamConnectedPromise = null;\n  }\n\n  /**\n   * Find a {@link Call} by its CallSid.\n   * @param callSid\n   */\n  private _findCall(callSid: string): Call | null {\n    return this._calls.find(call => call.parameters.CallSid === callSid\n      || call.outboundConnectionId === callSid) || null;\n  }\n\n  /**\n   * Get chunderws array from the chunderw param\n   */\n  private _getChunderws(): string[] | null {\n    return typeof this._options.chunderw === 'string' ? [this._options.chunderw]\n      : Array.isArray(this._options.chunderw) ? this._options.chunderw : null;\n  }\n\n  /**\n   * Utility function to log device options\n   */\n  private _logOptions(caller: string, options: Device.Options = { }): void {\n    // Selectively log options that users can modify.\n    // Also, convert user overrides.\n    // This prevents potential app crash when calling JSON.stringify\n    // and when sending log strings remotely\n    const userOptions = [\n      'allowIncomingWhileBusy',\n      'appName',\n      'appVersion',\n      'closeProtection',\n      'codecPreferences',\n      'disableAudioContextSounds',\n      'dscp',\n      'edge',\n      'enableImprovedSignalingErrorPrecision',\n      'forceAggressiveIceNomination',\n      'logLevel',\n      'maxAverageBitrate',\n      'maxCallSignalingTimeoutMs',\n      'sounds',\n      'tokenRefreshMs',\n    ];\n    const userOptionOverrides = [\n      'RTCPeerConnection',\n      'enumerateDevices',\n      'getUserMedia',\n      'MediaStream',\n    ];\n    if (typeof options === 'object') {\n      const toLog: any = { ...options };\n      Object.keys(toLog).forEach((key: string) => {\n        if (!userOptions.includes(key) && !userOptionOverrides.includes(key)) {\n          delete toLog[key];\n        }\n        if (userOptionOverrides.includes(key)) {\n          toLog[key] = true;\n        }\n      });\n      this._log.debug(`.${caller}`, JSON.stringify(toLog));\n    }\n  }\n\n  /**\n   * Create a new {@link Call}.\n   * @param twimlParams - A flat object containing key:value pairs to be sent to the TwiML app.\n   * @param options - Options to be used to instantiate the {@link Call}.\n   */\n  private async _makeCall(twimlParams: Record<string, string>, options?: Call.Options, isReconnect: boolean = false): Promise<Call> {\n    if (typeof Device._isUnifiedPlanDefault === 'undefined') {\n      throw new InvalidStateError('Device has not been initialized.');\n    }\n\n    // Wait for the input device if it's set by the user\n    const inputDevicePromise = this._audio?._getInputDevicePromise();\n    if (inputDevicePromise) {\n      this._log.debug('inputDevicePromise detected, waiting...');\n      await inputDevicePromise;\n      this._log.debug('inputDevicePromise resolved');\n    }\n\n    const config: Call.Config = {\n      audioHelper: this._audio,\n      isUnifiedPlanDefault: Device._isUnifiedPlanDefault,\n      onIgnore: (): void => {\n        this._soundcache.get(Device.SoundName.Incoming).stop();\n      },\n      pstream: await (this._streamConnectedPromise || this._setupStream()),\n      publisher: this._publisher,\n      soundcache: this._soundcache,\n    };\n\n    options = Object.assign({\n      MediaStream: this._options.MediaStream,\n      RTCPeerConnection: this._options.RTCPeerConnection,\n      beforeAccept: (currentCall: Call) => {\n        if (!this._activeCall || this._activeCall === currentCall) {\n          return;\n        }\n\n        this._activeCall.disconnect();\n        this._removeCall(this._activeCall);\n      },\n      codecPreferences: this._options.codecPreferences,\n      customSounds: this._options.sounds,\n      dialtonePlayer: Device._dialtonePlayer,\n      dscp: this._options.dscp,\n      // TODO(csantos): Remove forceAggressiveIceNomination option in 3.x\n      forceAggressiveIceNomination: this._options.forceAggressiveIceNomination,\n      getInputStream: (): MediaStream | null => this._options.fileInputStream || this._callInputStream,\n      getSinkIds: (): string[] => this._callSinkIds,\n      maxAverageBitrate: this._options.maxAverageBitrate,\n      preflight: this._options.preflight,\n      rtcConstraints: this._options.rtcConstraints,\n      shouldPlayDisconnect: () => this._audio?.disconnect(),\n      twimlParams,\n      voiceEventSidGenerator: this._options.voiceEventSidGenerator,\n    }, options);\n\n    const maybeUnsetPreferredUri = () => {\n      if (!this._stream) {\n        this._log.warn('UnsetPreferredUri called without a stream');\n        return;\n      }\n      if (this._activeCall === null && this._calls.length === 0) {\n        this._stream.updatePreferredURI(null);\n      }\n    };\n\n    const call = new (this._options.Call || Call)(config, options);\n\n    this._publisher.info('settings', 'init', {\n      MediaStream: !!this._options.MediaStream,\n      RTCPeerConnection: !!this._options.RTCPeerConnection,\n      enumerateDevices: !!this._options.enumerateDevices,\n      getUserMedia: !!this._options.getUserMedia,\n    }, call);\n\n    call.once('accept', () => {\n      this._stream.updatePreferredURI(this._preferredURI);\n      this._removeCall(call);\n      this._activeCall = call;\n      if (this._audio) {\n        this._audio._maybeStartPollingVolume();\n      }\n\n      if (call.direction === Call.CallDirection.Outgoing && this._audio?.outgoing() && !isReconnect) {\n        this._soundcache.get(Device.SoundName.Outgoing).play();\n      }\n\n      const data: any = { edge: this._edge || this._region };\n      if (this._options.edge) {\n        data['selected_edge'] = Array.isArray(this._options.edge)\n          ? this._options.edge\n          : [this._options.edge];\n      }\n\n      this._publisher.info('settings', 'edge', data, call);\n\n      if (this._audio?.processedStream) {\n        this._audioProcessorEventObserver?.emit('enabled');\n      }\n    });\n\n    call.addListener('error', (error: TwilioError) => {\n      if (call.status() === 'closed') {\n        this._removeCall(call);\n        maybeUnsetPreferredUri();\n      }\n      if (this._audio) {\n        this._audio._maybeStopPollingVolume();\n      }\n      this._maybeStopIncomingSound();\n    });\n\n    call.once('cancel', () => {\n      this._log.info(`Canceled: ${call.parameters.CallSid}`);\n      this._removeCall(call);\n      maybeUnsetPreferredUri();\n      if (this._audio) {\n        this._audio._maybeStopPollingVolume();\n      }\n      this._maybeStopIncomingSound();\n    });\n\n    call.once('disconnect', () => {\n      if (this._audio) {\n        this._audio._maybeStopPollingVolume();\n      }\n      this._removeCall(call);\n      maybeUnsetPreferredUri();\n      /**\n       * NOTE(kamalbennani): We need to stop the incoming sound when the call is\n       * disconnected right after the user has accepted the call (activeCall.accept()), and before\n       * the call has been fully connected (i.e. before the `pstream.answer` event)\n       */\n      this._maybeStopIncomingSound();\n    });\n\n    call.once('reject', () => {\n      this._log.info(`Rejected: ${call.parameters.CallSid}`);\n      if (this._audio) {\n        this._audio._maybeStopPollingVolume();\n      }\n      this._removeCall(call);\n      maybeUnsetPreferredUri();\n      this._maybeStopIncomingSound();\n    });\n\n    call.on('transportClose', () => {\n      if (call.status() !== Call.State.Pending) {\n        return;\n      }\n      if (this._audio) {\n        this._audio._maybeStopPollingVolume();\n      }\n      this._removeCall(call);\n      /**\n       * NOTE(mhuynh): We don't want to call `maybeUnsetPreferredUri` because\n       * a `transportClose` will happen during signaling reconnection.\n       */\n      this._maybeStopIncomingSound();\n    });\n\n    return call;\n  }\n\n  /**\n   * Stop the incoming sound if no {@link Call}s remain.\n   */\n  private _maybeStopIncomingSound(): void {\n    if (!this._calls.length) {\n      this._soundcache.get(Device.SoundName.Incoming).stop();\n    }\n  }\n\n  /**\n   * Called when a 'close' event is received from the signaling stream.\n   */\n  private _onSignalingClose = () => {\n    this._stream = null;\n    this._streamConnectedPromise = null;\n  }\n\n  /**\n   * Called when a 'connected' event is received from the signaling stream.\n   */\n  private _onSignalingConnected = (payload: Record<string, any>) => {\n    const region = getRegionShortcode(payload.region);\n    this._edge = payload.edge || regionToEdge[region as Region] || payload.region;\n    this._region = region || payload.region;\n    this._home = payload.home;\n    this._publisher?.setHost(createEventGatewayURI(payload.home));\n\n    if (payload.token) {\n      this._identity = payload.token.identity;\n      if (\n        typeof payload.token.ttl === 'number' &&\n        typeof this._options.tokenRefreshMs === 'number'\n      ) {\n        const ttlMs: number = payload.token.ttl * 1000;\n        const timeoutMs: number = Math.max(0, ttlMs - this._options.tokenRefreshMs);\n        this._tokenWillExpireTimeout = setTimeout(() => {\n          this._log.debug('#tokenWillExpire');\n          this.emit('tokenWillExpire', this);\n          if (this._tokenWillExpireTimeout) {\n            clearTimeout(this._tokenWillExpireTimeout);\n            this._tokenWillExpireTimeout = null;\n          }\n        }, timeoutMs);\n      }\n    }\n\n    const preferredURIs = this._getChunderws() || getChunderURIs(this._edge as Edge);\n    if (preferredURIs.length > 0) {\n      const [preferredURI] = preferredURIs;\n      this._preferredURI = createSignalingEndpointURL(preferredURI);\n    } else {\n      this._log.warn('Could not parse a preferred URI from the stream#connected event.');\n    }\n\n    // The signaling stream emits a `connected` event after reconnection, if the\n    // device was registered before this, then register again.\n    if (this._shouldReRegister) {\n      this.register();\n    }\n  }\n\n  /**\n   * Called when an 'error' event is received from the signaling stream.\n   */\n  private _onSignalingError = (payload: Record<string, any>) => {\n    if (typeof payload !== 'object') {\n      this._log.warn('Invalid signaling error payload', payload);\n      return;\n    }\n\n    const { error: originalError, callsid, voiceeventsid } = payload;\n\n    // voiceeventsid is for call message events which are handled in the call object\n    // missing originalError shouldn't be possible but check here to fail properly\n    if (typeof originalError !== 'object' || !!voiceeventsid) {\n      this._log.warn('Ignoring signaling error payload', { originalError, voiceeventsid });\n      return;\n    }\n\n    const call: Call | undefined =\n      (typeof callsid === 'string' && this._findCall(callsid)) || undefined;\n\n    const { code, message: customMessage } = originalError;\n    let { twilioError } = originalError;\n\n    if (typeof code === 'number') {\n      if (code === 31201) {\n        twilioError = new AuthorizationErrors.AuthenticationFailed(originalError);\n      } else if (code === 31204) {\n        twilioError = new AuthorizationErrors.AccessTokenInvalid(originalError);\n      } else if (code === 31205) {\n        // Stop trying to register presence after token expires\n        this._stopRegistrationTimer();\n        twilioError = new AuthorizationErrors.AccessTokenExpired(originalError);\n      } else {\n        const errorConstructor = getPreciseSignalingErrorByCode(\n          !!this._options.enableImprovedSignalingErrorPrecision,\n          code,\n        );\n        if (typeof errorConstructor !== 'undefined') {\n          twilioError = new errorConstructor(originalError);\n        }\n      }\n    }\n\n    if (!twilioError) {\n      this._log.error('Unknown signaling error: ', originalError);\n      twilioError = new GeneralErrors.UnknownError(customMessage, originalError);\n    }\n\n    this._log.error('Received error: ', twilioError);\n    this._log.debug('#error', originalError);\n    this.emit(Device.EventName.Error, twilioError, call);\n  }\n\n  /**\n   * Called when an 'invite' event is received from the signaling stream.\n   */\n  private _onSignalingInvite = async (payload: Record<string, any>) => {\n    const wasBusy = !!this._activeCall;\n    if (wasBusy && !this._options.allowIncomingWhileBusy) {\n      this._log.info('Device busy; ignoring incoming invite');\n      return;\n    }\n\n    if (!payload.callsid || !payload.sdp) {\n      this._log.debug('#error', payload);\n      this.emit(Device.EventName.Error, new ClientErrors.BadRequest('Malformed invite from gateway'));\n      return;\n    }\n\n    const callParameters = payload.parameters || { };\n    callParameters.CallSid = callParameters.CallSid || payload.callsid;\n\n    const customParameters = Object.assign({ }, queryToJson(callParameters.Params));\n\n    this._makeCallPromise = this._makeCall(\n      customParameters,\n      {\n        callParameters,\n        enableImprovedSignalingErrorPrecision:\n          !!this._options.enableImprovedSignalingErrorPrecision,\n        offerSdp: payload.sdp,\n        reconnectToken: payload.reconnect,\n        voiceEventSidGenerator: this._options.voiceEventSidGenerator,\n      },\n    );\n\n    let call;\n    try {\n      call = await this._makeCallPromise;\n    } finally {\n      this._makeCallPromise = null;\n    }\n\n    this._calls.push(call);\n\n    call.once('accept', () => {\n      this._soundcache.get(Device.SoundName.Incoming).stop();\n      this._publishNetworkChange();\n    });\n\n    const play = (this._audio?.incoming() && !wasBusy)\n      ? () => this._soundcache.get(Device.SoundName.Incoming).play()\n      : () => Promise.resolve();\n\n    this._showIncomingCall(call, play);\n  }\n\n  /**\n   * Called when an 'offline' event is received from the signaling stream.\n   */\n  private _onSignalingOffline = () => {\n    this._log.info('Stream is offline');\n\n    this._edge = null;\n    this._region = null;\n\n    this._shouldReRegister = this.state !== Device.State.Unregistered;\n\n    this._setState(Device.State.Unregistered);\n  }\n\n  /**\n   * Called when a 'ready' event is received from the signaling stream.\n   */\n  private _onSignalingReady = () => {\n    this._log.info('Stream is ready');\n\n    this._setState(Device.State.Registered);\n  }\n\n  /**\n   * Publish a NetworkInformation#change event to Insights if there's an active {@link Call}.\n   */\n  private _publishNetworkChange = () => {\n    if (!this._activeCall) {\n      return;\n    }\n\n    if (this._networkInformation) {\n      this._publisher.info('network-information', 'network-change', {\n        connection_type: this._networkInformation.type,\n        downlink: this._networkInformation.downlink,\n        downlinkMax: this._networkInformation.downlinkMax,\n        effective_type: this._networkInformation.effectiveType,\n        rtt: this._networkInformation.rtt,\n      }, this._activeCall);\n    }\n  }\n\n  /**\n   * Remove a {@link Call} from device.calls by reference\n   * @param call\n   */\n  private _removeCall(call: Call): void {\n    if (this._activeCall === call) {\n      this._activeCall = null;\n      this._makeCallPromise = null;\n    }\n\n    for (let i = this._calls.length - 1; i >= 0; i--) {\n      if (call === this._calls[i]) {\n        this._calls.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Register with the signaling server.\n   */\n  private async _sendPresence(presence: boolean): Promise<void> {\n    const stream = await this._streamConnectedPromise;\n\n    if (!stream) { return; }\n\n    stream.register({ audio: presence });\n    if (presence) {\n      this._startRegistrationTimer();\n    } else {\n      this._stopRegistrationTimer();\n    }\n  }\n\n  /**\n   * Helper function that sets and emits the state of the device.\n   * @param state The new state of the device.\n   */\n   private _setState(state: Device.State): void {\n    if (state === this.state) {\n      return;\n    }\n\n    this._state = state;\n    const name = this._stateEventMapping[state];\n    this._log.debug(`#${name}`);\n    this.emit(name);\n  }\n\n  /**\n   * Set up an audio helper for usage by this {@link Device}.\n   */\n  private _setupAudioHelper(): void {\n    if (!this._audioProcessorEventObserver) {\n      this._audioProcessorEventObserver = new AudioProcessorEventObserver();\n      this._audioProcessorEventObserver.on('event', ({ name, group }) => {\n        this._publisher.info(group, name, {}, this._activeCall);\n      });\n    }\n\n    const audioOptions: AudioHelper.Options = {\n      audioContext: Device.audioContext,\n      audioProcessorEventObserver: this._audioProcessorEventObserver,\n      beforeSetInputDevice: () => {\n        if (this._makeCallPromise) {\n          this._log.debug('beforeSetInputDevice pause detected');\n          return this._makeCallPromise;\n        } else {\n          this._log.debug('beforeSetInputDevice pause not detected, setting default');\n          return Promise.resolve();\n        }\n      },\n      enumerateDevices: this._options.enumerateDevices,\n      getUserMedia: this._options.getUserMedia || getUserMedia,\n    };\n\n    if (this._audio) {\n      this._log.info('Found existing audio helper; updating options...');\n      this._audio._updateUserOptions(audioOptions);\n      return;\n    }\n\n    this._audio = new (this._options.AudioHelper || AudioHelper)(\n      this._updateSinkIds,\n      this._updateInputStream,\n      audioOptions,\n    );\n\n    this._audio.on('deviceChange', (lostActiveDevices: MediaDeviceInfo[]) => {\n      const activeCall: Call | null = this._activeCall;\n      const deviceIds: string[] = lostActiveDevices.map((device: MediaDeviceInfo) => device.deviceId);\n\n      this._publisher.info('audio', 'device-change', {\n        lost_active_device_ids: deviceIds,\n      }, activeCall);\n\n      if (activeCall) {\n        activeCall['_mediaHandler']._onInputDevicesChanged();\n      }\n    });\n  }\n\n  /**\n   * Setup logger's loglevel\n   */\n  private _setupLoglevel(logLevel?: LogLevelDesc): void {\n    const level = typeof logLevel === 'number' ||\n      typeof logLevel === 'string' ?\n      logLevel : LogLevels.ERROR;\n\n    this._log.setDefaultLevel(level);\n    this._log.info('Set logger default level to', level);\n  }\n\n  /**\n   * Create and set a publisher for the {@link Device} to use.\n   */\n  private _setupPublisher(): IPublisher {\n    if (this._publisher) {\n      this._log.info('Found existing publisher; destroying...');\n      this._destroyPublisher();\n    }\n\n    const publisherOptions = {\n      defaultPayload: this._createDefaultPayload,\n      metadata: {\n        app_name: this._options.appName,\n        app_version: this._options.appVersion,\n      },\n    } as any;\n\n    if (this._options.eventgw) {\n      publisherOptions.host = this._options.eventgw;\n    }\n\n    if (this._home) {\n      publisherOptions.host = createEventGatewayURI(this._home);\n    }\n\n    this._publisher = new (this._options.Publisher || Publisher)(PUBLISHER_PRODUCT_NAME, this.token, publisherOptions);\n\n    if (this._options.publishEvents === false) {\n      this._publisher.disable();\n    } else {\n      this._publisher.on('error', (error: Error) => {\n        this._log.warn('Cannot connect to insights.', error);\n      });\n    }\n\n    return this._publisher;\n  }\n\n  /**\n   * Set up the connection to the signaling server. Tears down an existing\n   * stream if called while a stream exists.\n   */\n  private _setupStream(): Promise<IPStream> {\n    if (this._stream) {\n      this._log.info('Found existing stream; destroying...');\n      this._destroyStream();\n    }\n\n    this._log.info('Setting up VSP');\n    this._stream = new (this._options.PStream || PStream)(\n      this.token,\n      this._chunderURIs,\n      {\n        backoffMaxMs: this._options.backoffMaxMs,\n        maxPreferredDurationMs: this._options.maxCallSignalingTimeoutMs,\n      },\n    );\n\n    this._stream.addListener('close', this._onSignalingClose);\n    this._stream.addListener('connected', this._onSignalingConnected);\n    this._stream.addListener('error', this._onSignalingError);\n    this._stream.addListener('invite', this._onSignalingInvite);\n    this._stream.addListener('offline', this._onSignalingOffline);\n    this._stream.addListener('ready', this._onSignalingReady);\n\n    return this._streamConnectedPromise =\n      promisifyEvents(this._stream, 'connected', 'close').then(() => this._stream);\n  }\n\n  /**\n   * Start playing the incoming ringtone, and subsequently emit the incoming event.\n   * @param call\n   * @param play - The function to be used to play the sound. Must return a Promise.\n   */\n  private _showIncomingCall(call: Call, play: Function): Promise<void> {\n    let timeout: NodeJS.Timeout;\n    return Promise.race([\n      play(),\n      new Promise((resolve, reject) => {\n        timeout = setTimeout(() => {\n          const msg = 'Playing incoming ringtone took too long; it might not play. Continuing execution...';\n          reject(new Error(msg));\n        }, RINGTONE_PLAY_TIMEOUT);\n      }),\n    ]).catch(reason => {\n      this._log.warn(reason.message);\n    }).then(() => {\n      clearTimeout(timeout);\n      this._log.debug('#incoming', JSON.stringify({\n        customParameters: call.customParameters,\n        parameters: call.parameters,\n      }));\n      this.emit(Device.EventName.Incoming, call);\n    });\n  }\n\n  /**\n   * Set a timeout to send another register message to the signaling server.\n   */\n  private _startRegistrationTimer(): void {\n    this._stopRegistrationTimer();\n    this._regTimer = setTimeout(() => {\n      this._sendPresence(true);\n    }, REGISTRATION_INTERVAL);\n  }\n\n  /**\n   * Stop sending registration messages to the signaling server.\n   */\n  private _stopRegistrationTimer(): void {\n    if (this._regTimer) {\n      clearTimeout(this._regTimer);\n    }\n  }\n\n  /**\n   * Throw an error if the {@link Device} is destroyed.\n   */\n  private _throwIfDestroyed(): void {\n    if (this.state === Device.State.Destroyed) {\n      throw new InvalidStateError('Device has been destroyed.');\n    }\n  }\n\n  /**\n   * Update the input stream being used for calls so that any current call and all future calls\n   * will use the new input stream.\n   * @param inputStream\n   */\n  private _updateInputStream = (inputStream: MediaStream | null): Promise<void> => {\n    const call: Call | null = this._activeCall;\n\n    if (call && !inputStream) {\n      return Promise.reject(new InvalidStateError('Cannot unset input device while a call is in progress.'));\n    }\n\n    this._callInputStream = inputStream;\n    return call\n      ? call._setInputTracksFromStream(inputStream)\n      : Promise.resolve();\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play the incoming ringtone through.\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateRingtoneSinkIds(sinkIds: string[]): Promise<void> {\n    return Promise.resolve(this._soundcache.get(Device.SoundName.Incoming).setSinkIds(sinkIds));\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play sounds through.\n   * @param type - Whether to update ringtone or speaker sounds\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateSinkIds = (type: 'ringtone' | 'speaker', sinkIds: string[]): Promise<void> => {\n    const promise: Promise<void> = type === 'ringtone'\n      ? this._updateRingtoneSinkIds(sinkIds)\n      : this._updateSpeakerSinkIds(sinkIds);\n\n    return promise.then(() => {\n      this._publisher.info('audio', `${type}-devices-set`, {\n        audio_device_ids: sinkIds,\n      }, this._activeCall);\n    }, error => {\n      this._publisher.error('audio', `${type}-devices-set-failed`, {\n        audio_device_ids: sinkIds,\n        message: error.message,\n      }, this._activeCall);\n\n      throw error;\n    });\n  }\n\n  /**\n   * Update the device IDs of output devices being used to play the non-ringtone sounds\n   * and Call audio through.\n   * @param sinkIds - An array of device IDs\n   */\n  private _updateSpeakerSinkIds(sinkIds: string[]): Promise<void> {\n    Array.from(this._soundcache.entries())\n      .filter(entry => entry[0] !== Device.SoundName.Incoming)\n      .forEach(entry => entry[1].setSinkIds(sinkIds));\n\n    this._callSinkIds = sinkIds;\n    const call = this._activeCall;\n    return call\n      ? call._setSinkIds(sinkIds)\n      : Promise.resolve();\n  }\n}\n\n/**\n * @mergeModuleWith Device\n */\nnamespace Device {\n  /**\n   * Emitted when the {@link Device} has been destroyed.\n   * @event\n   * @example\n   * ```ts\n   * device.on('destroyed', () => { });\n   * ```\n   */\n  export declare function destroyedEvent(): void;\n\n  /**\n   * Emitted when the {@link Device} receives an error.\n   * @event\n   * @param error\n   * @example\n   * ```ts\n   * device.on('error', call => { });\n   * ```\n   */\n  export declare function errorEvent(error: TwilioError, call?: Call): void;\n\n  /**\n   * Emitted when an incoming {@link Call} is received. You can interact with the call object\n   * using its public APIs, or you can forward it to a different {@link Device} using\n   * {@link Device.connect} and {@link Call.connectToken}, enabling your application to\n   * receive multiple incoming calls for the same identity.\n   *\n   * **Important:** When forwarding a call, the token for target device instance needs to have\n   * the same identity as the token used in the device that originally received the call.\n   * The target device instance must also have the same edge as the device that\n   * originally received the call.\n   *\n   * @event\n   * @param call - The incoming {@link Call}.\n   * @example\n   * ```js\n   * const receiverDevice = new Device(token, options);\n   * await receiverDevice.register();\n   *\n   * receiverDevice.on('incoming', (call) => {\n   *   // Forward this call to a new Device instance using the call.connectToken string.\n   *   forwardCall(call.connectToken, receiverDevice.edge);\n   * });\n   *\n   * // The forwardCall function may look something like the following.\n   * async function forwardCall(connectToken, edge) {\n   *   // For every incoming call, we create a new Device instance which we can\n   *   // interact with, without affecting other calls.\n   *   // IMPORTANT: The token for this new device needs to have the same identity\n   *   // as the token used in the receiverDevice.\n   *   // The device must also be connected to the same edge as the receiverDevice.\n   *   const options = { ..., edge };\n   *   const device = new Device(token, options);\n   *   const call = await device.connect({ connectToken });\n   *\n   *   // Destroy the device after the call is completed\n   *   call.on('disconnect', () => device.destroy());\n   * }\n   * ```\n   */\n  export declare function incomingEvent(call: Call): void;\n\n  /**\n   * Emitted when the {@link Device} is unregistered.\n   * @event\n   * @example\n   * ```ts\n   * device.on('unregistered', () => { });\n   * ```\n   */\n  export declare function unregisteredEvent(): void;\n\n  /**\n   * Emitted when the {@link Device} is registering.\n   * @event\n   * @example\n   * ```ts\n   * device.on('registering', () => { });\n   * ```\n   */\n  export declare function registeringEvent(): void;\n\n  /**\n   * Emitted when the {@link Device} is registered.\n   * @event\n   * @example\n   * ```ts\n   * device.on('registered', () => { });\n   * ```\n   */\n  export declare function registeredEvent(): void;\n\n  /**\n   * Emitted when the {@link Device}'s token is about to expire. Use DeviceOptions.refreshTokenMs\n   * to set a custom warning time. Default is 10000 (10 seconds) prior to the token expiring.\n   * @event\n   * @param device\n   * @example\n   * ```ts\n   * device.on('tokenWillExpire', device => {\n   *   const token = getNewTokenViaAjax();\n   *   device.updateToken(token);\n   * });\n   * ```\n   */\n  export declare function tokenWillExpireEvent(device: Device): void;\n\n  /**\n   * All valid {@link Device} event names.\n   */\n  export enum EventName {\n    Error = 'error',\n    Incoming = 'incoming',\n    Destroyed = 'destroyed',\n    Unregistered = 'unregistered',\n    Registering = 'registering',\n    Registered = 'registered',\n    TokenWillExpire = 'tokenWillExpire',\n  }\n\n  /**\n   * All possible {@link Device} states.\n   */\n  export enum State {\n    Destroyed = 'destroyed',\n    Unregistered = 'unregistered',\n    Registering = 'registering',\n    Registered = 'registered',\n  }\n\n  /**\n   * Names of all sounds handled by the {@link Device}.\n   */\n  export enum SoundName {\n    Incoming = 'incoming',\n    Outgoing = 'outgoing',\n    Disconnect = 'disconnect',\n    Dtmf0 = 'dtmf0',\n    Dtmf1 = 'dtmf1',\n    Dtmf2 = 'dtmf2',\n    Dtmf3 = 'dtmf3',\n    Dtmf4 = 'dtmf4',\n    Dtmf5 = 'dtmf5',\n    Dtmf6 = 'dtmf6',\n    Dtmf7 = 'dtmf7',\n    Dtmf8 = 'dtmf8',\n    Dtmf9 = 'dtmf9',\n    DtmfS = 'dtmfs',\n    DtmfH = 'dtmfh',\n  }\n\n  /**\n   * Names of all togglable sounds.\n   */\n  export type ToggleableSound = Device.SoundName.Incoming | Device.SoundName.Outgoing | Device.SoundName.Disconnect;\n\n  /**\n   * Options to be passed to {@link Device.connect}.\n   */\n  export interface ConnectOptions extends Call.AcceptOptions {\n    /**\n     * The {@link Call.connectToken} to use to manually reconnect to an existing call.\n     * A call can be manually reconnected if it was previously received (incoming)\n     * or created (outgoing) from a {@link Device} instance.\n     * A call is considered manually reconnected if it was created using the {@link Call.connectToken}.\n     * It will always have a {@link Call.direction} property set to {@link Call.CallDirection.Outgoing}.\n     *\n     * **Warning: Only unanswered incoming calls can be manually reconnected at this time.**\n     * **Invoking this method to an already answered call may introduce unexpected behavior.**\n     *\n     * See {@link Device.incomingEvent} for an example.\n     */\n    connectToken?: string;\n\n    /**\n     * A flat object containing key:value pairs to be sent to the TwiML app.\n     */\n    params?: Record<string, string>;\n  }\n\n  /**\n   * Options that may be passed to the {@link Device} constructor, or Device.setup via public API\n   */\n  export interface Options {\n    /**\n     * Whether the Device should raise the {@link incomingEvent} event when a new call invite is\n     * received while already on an active call. Default behavior is false.\n     */\n    allowIncomingWhileBusy?: boolean;\n\n    /**\n     * A name for the application that is instantiating the {@link Device}. This is used to improve logging\n     * in Insights by associating Insights data with a specific application, particularly in the case where\n     * one account may be connected to by multiple applications.\n     */\n    appName?: string;\n\n    /**\n     * A version for the application that is instantiating the {@link Device}. This is used to improve logging\n     * in Insights by associating Insights data with a specific version of the given application. This can help\n     * track down when application-level bugs were introduced.\n     */\n    appVersion?: string;\n\n    /**\n     * Whether to enable close protection, to prevent users from accidentally\n     * navigating away from the page during a call. If string, the value will\n     * be used as a custom message.\n     */\n    closeProtection?: boolean | string;\n\n    /**\n     * An ordered array of codec names, from most to least preferred.\n     */\n    codecPreferences?: Call.Codec[];\n\n    /**\n     * Whether AudioContext sounds should be disabled. Useful for trouble shooting sound issues\n     * that may be caused by AudioContext-specific sounds. If set to true, will fall back to\n     * HTMLAudioElement sounds.\n     */\n    disableAudioContextSounds?: boolean;\n\n    /**\n     * Whether to use googDscp in RTC constraints.\n     */\n    dscp?: boolean;\n\n    /**\n     * The edge value corresponds to the geographic location that the client\n     * will use to connect to Twilio infrastructure. The default value is\n     * \"roaming\" which automatically selects an edge based on the latency of the\n     * client relative to available edges.\n     */\n    edge?: string[] | string;\n\n    /**\n     * Enhance the precision of errors emitted by `Device` and `Call` objects.\n     *\n     * The default value of this option is `false`.\n     *\n     * When this flag is enabled, some errors that would have been described\n     * with a generic error code, namely `53000` and `31005`, are now described\n     * with a more precise error code. With this feature, the following errors\n     * now have their own error codes. Please see this\n     * [page](https://www.twilio.com/docs/api/errors) for more details about\n     * each error.\n     *\n     * - Device Error Changes\n     *\n     * @example\n     * ```ts\n     * const device = new Device(token, {\n     *   enableImprovedSignalingErrorPrecision: true,\n     * });\n     * device.on('error', (deviceError) => {\n     *   // the following table describes how deviceError will change with this feature flag\n     * });\n     * ```\n     *\n     * | Device Error Name | Device Error Code with Feature Flag Enabled | Device Error Code with Feature Flag Disabled |\n     * | --- | --- | --- |\n     * | `GeneralErrors.ApplicationNotFoundError` | `31001` | `53000` |\n     * | `GeneralErrors.ConnectionDeclinedError` | `31002` | `53000` |\n     * | `GeneralErrors.ConnectionTimeoutError` | `31003` | `53000` |\n     * | `MalformedRequestErrors.MissingParameterArrayError` | `31101` | `53000` |\n     * | `MalformedRequestErrors.AuthorizationTokenMissingError` | `31102` | `53000` |\n     * | `MalformedRequestErrors.MaxParameterLengthExceededError` | `31103` | `53000` |\n     * | `MalformedRequestErrors.InvalidBridgeTokenError` | `31104` | `53000` |\n     * | `MalformedRequestErrors.InvalidClientNameError` | `31105` | `53000` |\n     * | `MalformedRequestErrors.ReconnectParameterInvalidError` | `31107` | `53000` |\n     * | `SignatureValidationErrors.AccessTokenSignatureValidationFailed` | `31202` | `53000` |\n     * | `AuthorizationErrors.NoValidAccountError` | `31203` | `53000` |\n     * | `AuthorizationErrors.JWTTokenExpirationTooLongError` | `31207` | `53000` |\n     * | `ClientErrors.NotFound` | `31404` | `53000` |\n     * | `ClientErrors.TemporarilyUnavilable` | `31480` | `53000` |\n     * | `ClientErrors.BusyHere` | `31486` | `53000` |\n     * | `SIPServerErrors.Decline` | `31603` | `53000` |\n     *\n     * - Call Error Changes\n     *\n     * @example\n     * ```ts\n     * const device = new Device(token, {\n     *   enableImprovedSignalingErrorPrecision: true,\n     * });\n     * const call = device.connect(...);\n     * call.on('error', (callError) => {\n     *   // the following table describes how callError will change with this feature flag\n     * });\n     * ```\n     *\n     * | Call Error Name | Call Error Code with Feature Flag Enabled | Call Error Code with Feature Flag Disabled |\n     * | --- | --- | --- |\n     * | `GeneralErrors.ConnectionDeclinedError` | `31002` | `31005` |\n     * | `AuthorizationErrors.InvalidJWTTokenError` | `31204` | `31005` |\n     * | `AuthorizationErrors.JWTTokenExpiredError` | `31205` | `31005` |\n     *\n     */\n    enableImprovedSignalingErrorPrecision?: boolean;\n\n    /**\n     * Overrides the native MediaDevices.enumerateDevices API.\n     */\n    enumerateDevices?: any;\n\n    /**\n     * Experimental feature.\n     * Whether to use ICE Aggressive nomination.\n     */\n    forceAggressiveIceNomination?: boolean;\n\n    /**\n     * Overrides the native MediaDevices.getUserMedia API.\n     */\n    getUserMedia?: any;\n\n    /**\n     * Sets the log level.\n     *\n     * Possible values include any of the following numbers:\n     * <br/>0 = trace, 1 = debug, 2 = info, 3 = warn, 4 = error, 5 = silent\n     *\n     * Or any of the following strings:\n     * <br/>'trace', 'debug', 'info', 'warn', 'error', 'silent'\n     * <br/>'TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'SILENT'\n     */\n    logLevel?: LogLevelDesc;\n\n    /**\n     * The maximum average audio bitrate to use, in bits per second (bps) based on\n     * [RFC-7587 7.1](https://tools.ietf.org/html/rfc7587#section-7.1). By default, the setting\n     * is not used. If you specify 0, then the setting is not used. Any positive integer is allowed,\n     * but values outside the range 6000 to 510000 are ignored and treated as 0. The recommended\n     * bitrate for speech is between 8000 and 40000 bps as noted in\n     * [RFC-7587 3.1.1](https://tools.ietf.org/html/rfc7587#section-3.1.1).\n     */\n    maxAverageBitrate?: number;\n\n    /**\n     * The maximum duration to attempt to reconnect to a preferred URI.\n     * This is used by signaling reconnection in that during the existence of\n     * any call, edge-fallback is disabled until this length of time has\n     * elapsed.\n     *\n     * Using a value of 30000 as an example: while a call exists, the Device\n     * will attempt to reconnect to the edge that the call was established on\n     * for approximately 30 seconds. After the next failure to connect, the\n     * Device will use edge-fallback.\n     *\n     * This feature is opt-in, and will not work until a number greater than 0\n     * is explicitly specified within the Device options.\n     *\n     * Read more about edge fallback and signaling reconnection on the\n     * [Edge Locations page](https://www.twilio.com/docs/voice/sdks/javascript/edges#edge-fallback-and-signaling-reconnection).\n     *\n     * **Note:** Setting this option to a value greater than zero means Twilio will not terminate the\n     * call until the timeout has expired. Please take this into consideration if your application\n     * contains webhooks that relies on [call status callbacks](https://www.twilio.com/docs/voice/twiml#callstatus-values).\n     */\n    maxCallSignalingTimeoutMs?: number;\n\n    /**\n     * Overrides the native MediaStream class.\n     */\n    MediaStream?: any;\n\n    /**\n     * Overrides the native RTCPeerConnection class.\n     *\n     * By default, the SDK will use the `unified-plan` SDP format if the browser supports it.\n     * Unexpected behavior may happen if the `RTCPeerConnection` parameter uses an SDP format\n     * that is different than what the SDK uses.\n     *\n     * For example, if the browser supports `unified-plan` and the `RTCPeerConnection`\n     * parameter uses `plan-b` by default, the SDK will use `unified-plan`\n     * which will cause conflicts with the usage of the `RTCPeerConnection`.\n     *\n     * In order to avoid this issue, you need to explicitly set the SDP format that you want\n     * the SDK to use with the `RTCPeerConnection` via [[Device.ConnectOptions.rtcConfiguration]] for outgoing calls.\n     * Or [[Call.AcceptOptions.rtcConfiguration]] for incoming calls.\n     *\n     * See the example below. Assuming the `RTCPeerConnection` you provided uses `plan-b` by default, the following\n     * code sets the SDP format to `unified-plan` instead.\n     *\n     * ```ts\n     * // Outgoing calls\n     * const call = await device.connect({\n     *   rtcConfiguration: {\n     *     sdpSemantics: 'unified-plan'\n     *   }\n     *   // Other options\n     * });\n     *\n     * // Incoming calls\n     * device.on('incoming', call => {\n     *   call.accept({\n     *     rtcConfiguration: {\n     *       sdpSemantics: 'unified-plan'\n     *     }\n     *     // Other options\n     *   });\n     * });\n     * ```\n     */\n    RTCPeerConnection?: any;\n\n    /**\n     * A mapping of custom sound URLs by sound name.\n     */\n    sounds?: Partial<Record<Device.SoundName, string>>;\n\n    /**\n     * Number of milliseconds fewer than the token's TTL to emit the tokenWillExpire event.\n     * Default is 10000 (10 seconds).\n     */\n    tokenRefreshMs?: number;\n  }\n}\n\nexport default Device;\n", "/**\n * Payload object we send to insights\n * @private\n */\ninterface RTCIceCandidatePayload {\n  candidate_type: string;\n  // Deprecated by newer browsers. Will likely not show on most recent versions of browsers.\n  deleted: boolean;\n  ip: string;\n  is_remote: boolean;\n  'network-cost': number | undefined;\n  port: number;\n  priority: number;\n  protocol: string;\n  related_address: string;\n  related_port: number;\n  tcp_type: string;\n  transport_id: string;\n}\n\n/**\n * Represents an ICE candidate coming from the browser\n * https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate\n * @private\n */\nexport type RTCIceCandidate = any;\n\n/**\n * {@link RTCIceCandidate} parses an ICE candidate gathered by the browser\n * and returns a IceCandidate object\n */\nexport class IceCandidate {\n  /**\n   * Candidate's type\n   * https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateType\n   */\n  private candidateType: string;\n\n  /**\n   * Whether this is deleted from the list of candidate gathered\n   */\n  private deleted: boolean = false;\n\n  /**\n   * Candidate's IP address\n   */\n  private ip: string;\n\n  /**\n   * Whether this is a remote candidate\n   */\n  private isRemote: boolean;\n\n  /**\n   * A number from 0 to 999 indicating the cost of network\n   * where larger values indicate a stronger preference for not using that network\n   */\n  private networkCost: number | undefined;\n\n  /**\n   * Candidate's port number\n   */\n  private port: number;\n\n  /**\n   * A number indicating candidate's priority\n   */\n  private priority: number;\n\n  /**\n   * Candidate's protocol - udp or tcp\n   */\n  private protocol: string;\n\n  /**\n   * The host candidate's IP address if the candidate is derived from another candidate,\n   */\n  private relatedAddress: string;\n\n  /**\n   * The port number of the candidate from which this\n   * candidate is derived, such as a relay or reflexive candidate.\n   */\n  private relatedPort: number;\n\n  /**\n   * Represents the type of TCP candidate.\n   */\n  private tcpType: string;\n\n  /**\n   * Also known as sdpMid, specifying the candidate's media stream identification tag which uniquely\n   * identifies the media stream within the component with which the candidate is associated\n   */\n  private transportId: string;\n\n  /**\n   * @constructor\n   * @param iceCandidate RTCIceCandidate coming from the browser\n   */\n  constructor(iceCandidate: RTCIceCandidate, isRemote: boolean = false) {\n    let cost;\n    const parts = iceCandidate.candidate.split('network-cost ');\n\n    if (parts[1]) {\n      cost = parseInt(parts[1], 10);\n    }\n\n    this.candidateType = iceCandidate.type;\n    this.ip = iceCandidate.ip || iceCandidate.address;\n    this.isRemote = isRemote;\n    this.networkCost = cost;\n    this.port = iceCandidate.port;\n    this.priority = iceCandidate.priority;\n    this.protocol = iceCandidate.protocol;\n    this.relatedAddress = iceCandidate.relatedAddress;\n    this.relatedPort = iceCandidate.relatedPort;\n    this.tcpType = iceCandidate.tcpType;\n    this.transportId = iceCandidate.sdpMid;\n  }\n\n  /**\n   * Get the payload object for insights\n   */\n  toPayload(): RTCIceCandidatePayload {\n    return {\n      'candidate_type': this.candidateType,\n      'deleted': this.deleted,\n      'ip': this.ip,\n      'is_remote': this.isRemote,\n      'network-cost': this.networkCost,\n      'port': this.port,\n      'priority': this.priority,\n      'protocol': this.protocol,\n      'related_address': this.relatedAddress,\n      'related_port': this.relatedPort,\n      'tcp_type': this.tcpType,\n      'transport_id': this.transportId,\n    };\n  }\n}\n", "const r0 = 94.768; // Constant used in computing \"rFactor\".\n\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost.\n * Calculated by packetsLost / totalPackets\n * @return {number | null} mos - Calculated MOS, `1.0` through roughly `4.5`.\n * Returns `null` when any of the input parameters are not a `non-negative`\n * number.\n */\nexport function calculate(\n  rtt: any,\n  jitter: any,\n  fractionLost: any,\n): number | null {\n  if (\n    typeof rtt !== 'number' ||\n    typeof jitter !== 'number' ||\n    typeof fractionLost !== 'number' ||\n    !isNonNegativeNumber(rtt) ||\n    !isNonNegativeNumber(jitter) ||\n    !isNonNegativeNumber(fractionLost)\n  ) {\n    return null;\n  }\n\n  // Compute the effective latency.\n  const effectiveLatency: number = rtt + (jitter * 2) + 10;\n\n  // Compute the initial \"rFactor\" from effective latency.\n  let rFactor: number = 0;\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = r0 - (effectiveLatency / 40);\n      break;\n    case effectiveLatency < 1000:\n      rFactor = r0 - ((effectiveLatency - 120) / 10);\n      break;\n  }\n\n  // Adjust \"rFactor\" with the fraction of packets lost.\n  switch (true) {\n    case fractionLost <= (rFactor / 2.5):\n      rFactor = Math.max(rFactor - fractionLost * 2.5, 6.52);\n      break;\n    default:\n      rFactor = 0;\n      break;\n  }\n\n  // Compute MOS from \"rFactor\".\n  const mos: number = 1 +\n    (0.035 * rFactor) +\n    (0.000007 * rFactor) *\n    (rFactor - 60) *\n    (100 - rFactor);\n\n  return mos;\n}\n\n/**\n * Returns true if and only if the parameter passed is a number, is not `NaN`,\n * is finite, and is greater than or equal to `0`.\n * @param n\n */\nexport function isNonNegativeNumber(n: any): boolean {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\n\nexport default {\n  calculate,\n  isNonNegativeNumber,\n};\n", "import { EventEmitter } from 'events';\nimport { InvalidArgumentError } from './errors';\nimport Mos from './rtc/mos';\nimport RTCSample from './rtc/sample';\nimport { getRTCStats } from './rtc/stats';\nimport RTCWarning from './rtc/warning';\nimport { average } from './util';\n\n// How many samples we use when testing metric thresholds\nconst SAMPLE_COUNT_METRICS = 5;\n\n// How many samples that need to cross the threshold to\n// raise or clear a warning.\nconst SAMPLE_COUNT_CLEAR = 0;\nconst SAMPLE_COUNT_RAISE = 3;\n\nconst SAMPLE_INTERVAL = 1000;\nconst WARNING_TIMEOUT = 5 * 1000;\n\nconst DEFAULT_THRESHOLDS: StatsMonitor.ThresholdOptions = {\n  audioInputLevel: { minStandardDeviation: 327.67, sampleCount: 10 },\n  audioOutputLevel: { minStandardDeviation: 327.67, sampleCount: 10 },\n  bytesReceived: { clearCount: 2, min: 1, raiseCount: 3, sampleCount: 3 },\n  bytesSent: { clearCount: 2, min: 1, raiseCount: 3, sampleCount: 3 },\n  jitter: { max: 30 },\n  mos: { min: 3 },\n  packetsLostFraction: [{\n    max: 1,\n  }, {\n    clearValue: 1,\n    maxAverage: 3,\n    sampleCount: 7,\n  }],\n  rtt: { max: 400 },\n};\n\n// Placeholders until we convert the respective files to TypeScript.\n/**\n * @private\n */\nexport type IPeerConnection = any;\n\n/**\n * @private\n */\nexport type IRTCStats = any;\n\n/**\n * @private\n */\nexport type IMos = typeof Mos;\n\n/**\n * Count the number of values that cross the max threshold.\n * @private\n * @param max - The max allowable value.\n * @param values - The values to iterate over.\n * @returns The amount of values in which the stat crossed the threshold.\n */\nfunction countHigh(max: number, values: number[]): number {\n  return values.reduce((highCount, value) => highCount += (value > max) ? 1 : 0, 0);\n}\n\n/**\n * Count the number of values that cross the min threshold.\n * @private\n * @param min - The minimum allowable value.\n * @param values - The values to iterate over.\n * @returns The amount of values in which the stat crossed the threshold.\n */\nfunction countLow(min: number, values: number[]): number {\n  return values.reduce((lowCount, value) => lowCount += (value < min) ? 1 : 0, 0);\n}\n\n/**\n * Calculate the standard deviation from a list of numbers.\n * @private\n * @param values The list of numbers to calculate the standard deviation from.\n * @returns The standard deviation of a list of numbers.\n */\nfunction calculateStandardDeviation(values: number[]): number | null {\n  if (values.length <= 0) {\n    return null;\n  }\n\n  const valueAverage: number = values.reduce(\n    (partialSum: number, value: number) => partialSum + value,\n    0,\n  ) / values.length;\n\n  const diffSquared: number[] = values.map(\n    (value: number) => Math.pow(value - valueAverage, 2),\n  );\n\n  const stdDev: number = Math.sqrt(diffSquared.reduce(\n    (partialSum: number, value: number) => partialSum + value,\n    0,\n  ) / diffSquared.length);\n\n  return stdDev;\n}\n\n/**\n * Flatten a set of numerical sample sets into a single array of samples.\n * @param sampleSets\n */\nfunction flattenSamples(sampleSets: number[][]): number[] {\n  return sampleSets.reduce(\n    (flat: number[], current: number[]) => [...flat, ...current],\n    [],\n  );\n}\n\n/**\n * {@link StatsMonitor} polls a peerConnection via PeerConnection.getStats\n * and emits warnings when stats cross the specified threshold values.\n */\nclass StatsMonitor extends EventEmitter {\n  /**\n   * A map of warnings with their raised time\n   */\n  private _activeWarnings: Map<string, StatsMonitor.WarningTimestamp> = new Map();\n\n  /**\n   * A map of stats with the number of exceeded thresholds\n   */\n  private _currentStreaks: Map<string, number> = new Map();\n\n  /**\n   * Method to get stats from a PeerConnection object. Overrides getRTCStats library\n   */\n  private _getRTCStats: (peerConnection: IPeerConnection, options?: any) => IRTCStats;\n\n  /**\n   * Keeps track of input volumes in the last second\n   */\n  private _inputVolumes: number[] = [];\n\n  /**\n   * How many samples we use when testing metric thresholds.\n   */\n  private _maxSampleCount: number;\n\n  /**\n   * For calculating Mos. Overrides Mos library\n   */\n  private _mos: IMos;\n\n  /**\n   * Keeps track of output volumes in the last second\n   */\n  private _outputVolumes: number[] = [];\n\n  /**\n   * The PeerConnection to monitor.\n   */\n  private _peerConnection: IPeerConnection;\n\n  /**\n   * Sample buffer. Saves most recent samples\n   */\n  private _sampleBuffer: RTCSample[] = [];\n\n  /**\n   * The setInterval id for fetching samples.\n   */\n  private _sampleInterval?: NodeJS.Timeout;\n\n  /**\n   * Keeps track of supplemental sample values.\n   *\n   * Currently used for constant audio detection. Contains an array of volume\n   * samples for each sample interval.\n   */\n  private _supplementalSampleBuffers: Record<string, number[][]> = {\n    audioInputLevel: [],\n    audioOutputLevel: [],\n  };\n\n  /**\n   * Threshold values for {@link StatsMonitor}\n   */\n  private _thresholds: StatsMonitor.ThresholdOptions;\n\n  /**\n   * Whether warnings should be enabled\n   */\n  private _warningsEnabled: boolean = true;\n\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  constructor(options?: StatsMonitor.Options) {\n    super();\n\n    options = options || {};\n    this._getRTCStats = options.getRTCStats || getRTCStats;\n    this._mos = options.Mos || Mos;\n    this._peerConnection = options.peerConnection;\n    this._thresholds = {...DEFAULT_THRESHOLDS, ...options.thresholds};\n\n    const thresholdSampleCounts = Object.values(this._thresholds)\n      .map((threshold: StatsMonitor.ThresholdOptions) => threshold.sampleCount)\n      .filter((sampleCount: number | undefined) => !!sampleCount);\n\n    this._maxSampleCount = Math.max(SAMPLE_COUNT_METRICS, ...thresholdSampleCounts);\n\n    if (this._peerConnection) {\n      this.enable(this._peerConnection);\n    }\n  }\n\n  /**\n   * Called when a volume sample is available\n   * @param inputVolume - Input volume level from 0 to 32767\n   * @param outputVolume - Output volume level from 0 to 32767\n   */\n  addVolumes(inputVolume: number, outputVolume: number): void {\n    this._inputVolumes.push(inputVolume);\n    this._outputVolumes.push(outputVolume);\n  }\n\n  /**\n   * Stop sampling RTC statistics for this {@link StatsMonitor}.\n   * @returns The current {@link StatsMonitor}.\n   */\n  disable(): this {\n    if (this._sampleInterval) {\n      clearInterval(this._sampleInterval);\n      delete this._sampleInterval;\n    }\n    return this;\n  }\n\n  /**\n   * Disable warnings for this {@link StatsMonitor}.\n   * @returns The current {@link StatsMonitor}.\n   */\n  disableWarnings(): this {\n    if (this._warningsEnabled) {\n      this._activeWarnings.clear();\n    }\n\n    this._warningsEnabled = false;\n    return this;\n  }\n\n  /**\n   * Start sampling RTC statistics for this {@link StatsMonitor}.\n   * @param peerConnection - A PeerConnection to monitor.\n   * @returns The current {@link StatsMonitor}.\n   */\n  enable(peerConnection: IPeerConnection): this {\n    if (peerConnection) {\n      if (this._peerConnection && peerConnection !== this._peerConnection) {\n        throw new InvalidArgumentError('Attempted to replace an existing PeerConnection in StatsMonitor.enable');\n      }\n      this._peerConnection = peerConnection;\n    }\n\n    if (!this._peerConnection) {\n      throw new InvalidArgumentError('Can not enable StatsMonitor without a PeerConnection');\n    }\n\n    this._sampleInterval = this._sampleInterval ||\n      setInterval(this._fetchSample.bind(this), SAMPLE_INTERVAL);\n\n    return this;\n  }\n\n  /**\n   * Enable warnings for this {@link StatsMonitor}.\n   * @returns The current {@link StatsMonitor}.\n   */\n  enableWarnings(): this {\n    this._warningsEnabled = true;\n    return this;\n  }\n\n  /**\n   * Check if there is an active warning for a specific stat and threshold\n   * @param statName - The name of the stat to check\n   * @param thresholdName - The name of the threshold to check\n   * @returns Whether there is an active warning for a specific stat and threshold\n   */\n  hasActiveWarning(statName: string, thresholdName: string): boolean {\n    const warningId = `${statName}:${thresholdName}`;\n    return !!this._activeWarnings.get(warningId);\n  }\n\n  /**\n   * Add a sample to our sample buffer and remove the oldest if we are over the limit.\n   * @param sample - Sample to add\n   */\n  private _addSample(sample: RTCSample): void {\n    const samples = this._sampleBuffer;\n    samples.push(sample);\n\n    // We store 1 extra sample so that we always have (current, previous)\n    // available for all {sampleBufferSize} threshold validations.\n    if (samples.length > this._maxSampleCount) {\n      samples.splice(0, samples.length - this._maxSampleCount);\n    }\n  }\n\n  /**\n   * Clear an active warning.\n   * @param statName - The name of the stat to clear.\n   * @param thresholdName - The name of the threshold to clear\n   * @param [data] - Any relevant sample data.\n   */\n  private _clearWarning(statName: string, thresholdName: string, data?: RTCWarning): void {\n    const warningId = `${statName}:${thresholdName}`;\n    const activeWarning = this._activeWarnings.get(warningId);\n\n    if (!activeWarning || Date.now() - activeWarning.timeRaised < WARNING_TIMEOUT) { return; }\n    this._activeWarnings.delete(warningId);\n\n    this.emit('warning-cleared', {\n      ...data,\n      name: statName,\n      threshold: {\n        name: thresholdName,\n        value: this._thresholds[statName][thresholdName],\n      },\n    });\n  }\n\n  /**\n   * Create a sample object from a stats object using the previous sample, if available.\n   * @param stats - Stats retrieved from getStatistics\n   * @param [previousSample=null] - The previous sample to use to calculate deltas.\n   * @returns A universally-formatted version of RTC stats.\n   */\n  private _createSample(stats: IRTCStats, previousSample: RTCSample | null): RTCSample {\n    const previousBytesSent = previousSample && previousSample.totals.bytesSent || 0;\n    const previousBytesReceived = previousSample && previousSample.totals.bytesReceived || 0;\n    const previousPacketsSent = previousSample && previousSample.totals.packetsSent || 0;\n    const previousPacketsReceived = previousSample && previousSample.totals.packetsReceived || 0;\n    const previousPacketsLost = previousSample && previousSample.totals.packetsLost || 0;\n\n    const currentBytesSent = stats.bytesSent - previousBytesSent;\n    const currentBytesReceived = stats.bytesReceived - previousBytesReceived;\n    const currentPacketsSent = stats.packetsSent - previousPacketsSent;\n    const currentPacketsReceived = stats.packetsReceived - previousPacketsReceived;\n    const currentPacketsLost = stats.packetsLost - previousPacketsLost;\n    const currentInboundPackets = currentPacketsReceived + currentPacketsLost;\n    const currentPacketsLostFraction = (currentInboundPackets > 0) ?\n      (currentPacketsLost / currentInboundPackets) * 100 : 0;\n\n    const totalInboundPackets = stats.packetsReceived + stats.packetsLost;\n    const totalPacketsLostFraction = (totalInboundPackets > 0) ?\n      (stats.packetsLost / totalInboundPackets) * 100 : 100;\n\n    const rttValue = (typeof stats.rtt === 'number' || !previousSample) ? stats.rtt : previousSample.rtt;\n\n    const audioInputLevelValues = this._inputVolumes.splice(0);\n    this._supplementalSampleBuffers.audioInputLevel.push(audioInputLevelValues);\n\n    const audioOutputLevelValues = this._outputVolumes.splice(0);\n    this._supplementalSampleBuffers.audioOutputLevel.push(audioOutputLevelValues);\n\n    return {\n      audioInputLevel: Math.round(average(audioInputLevelValues)),\n      audioOutputLevel: Math.round(average(audioOutputLevelValues)),\n      bytesReceived: currentBytesReceived,\n      bytesSent: currentBytesSent,\n      codecName: stats.codecName,\n      jitter: stats.jitter,\n      mos: this._mos.calculate(rttValue, stats.jitter, previousSample && currentPacketsLostFraction),\n      packetsLost: currentPacketsLost,\n      packetsLostFraction: currentPacketsLostFraction,\n      packetsReceived: currentPacketsReceived,\n      packetsSent: currentPacketsSent,\n      rtt: rttValue,\n      timestamp: stats.timestamp,\n      totals: {\n        bytesReceived: stats.bytesReceived,\n        bytesSent: stats.bytesSent,\n        packetsLost: stats.packetsLost,\n        packetsLostFraction: totalPacketsLostFraction,\n        packetsReceived: stats.packetsReceived,\n        packetsSent: stats.packetsSent,\n      },\n    };\n  }\n\n  /**\n   * Get stats from the PeerConnection and add it to our list of samples.\n   */\n  private _fetchSample(): void {\n    this._getSample().then(sample => {\n      this._addSample(sample);\n      this._raiseWarnings();\n      this.emit('sample', sample);\n    }).catch(error => {\n      this.disable();\n      // We only bubble up any errors coming from pc.getStats()\n      // No need to attach a twilioError\n      this.emit('error', error);\n    });\n  }\n\n  /**\n   * Get stats from the PeerConnection.\n   * @returns A universally-formatted version of RTC stats.\n   */\n  private _getSample(): Promise<RTCSample> {\n    return this._getRTCStats(this._peerConnection).then((stats: IRTCStats) => {\n      let previousSample = null;\n      if (this._sampleBuffer.length) {\n        previousSample = this._sampleBuffer[this._sampleBuffer.length - 1];\n      }\n\n      return this._createSample(stats, previousSample);\n    });\n  }\n\n  /**\n   * Raise a warning and log its raised time.\n   * @param statName - The name of the stat to raise.\n   * @param thresholdName - The name of the threshold to raise\n   * @param [data] - Any relevant sample data.\n   */\n  private _raiseWarning(statName: string, thresholdName: string, data?: RTCWarning): void {\n    const warningId = `${statName}:${thresholdName}`;\n\n    if (this._activeWarnings.has(warningId)) { return; }\n    this._activeWarnings.set(warningId, { timeRaised: Date.now() });\n\n    const thresholds: StatsMonitor.ThresholdOption | StatsMonitor.ThresholdOption[] =\n      this._thresholds[statName];\n\n    let thresholdValue;\n\n    if (Array.isArray(thresholds)) {\n      const foundThreshold = thresholds.find(threshold => thresholdName in threshold);\n      if (foundThreshold) {\n        thresholdValue = foundThreshold[thresholdName as keyof StatsMonitor.ThresholdOption];\n      }\n    } else {\n      thresholdValue = this._thresholds[statName][thresholdName];\n    }\n\n    this.emit('warning', {\n      ...data,\n      name: statName,\n      threshold: {\n        name: thresholdName,\n        value: thresholdValue,\n      },\n    });\n  }\n\n  /**\n   * Apply our thresholds to our array of RTCStat samples.\n   */\n  private _raiseWarnings(): void {\n    if (!this._warningsEnabled) { return; }\n\n    Object.keys(this._thresholds).forEach(name => this._raiseWarningsForStat(name));\n  }\n\n  /**\n   * Apply thresholds for a given stat name to our array of\n   * RTCStat samples and raise or clear any associated warnings.\n   * @param statName - Name of the stat to compare.\n   */\n  private _raiseWarningsForStat(statName: string): void {\n    const limits: StatsMonitor.ThresholdOptions[] =\n      Array.isArray(this._thresholds[statName])\n        ? this._thresholds[statName]\n        : [this._thresholds[statName]];\n\n    limits.forEach((limit: StatsMonitor.ThresholdOptions) => {\n      const samples = this._sampleBuffer;\n\n      const clearCount = limit.clearCount || SAMPLE_COUNT_CLEAR;\n      const raiseCount = limit.raiseCount || SAMPLE_COUNT_RAISE;\n      const sampleCount = limit.sampleCount || this._maxSampleCount;\n\n      let relevantSamples = samples.slice(-sampleCount);\n      const values = relevantSamples.map(sample => sample[statName]);\n\n      // (rrowland) If we have a bad or missing value in the set, we don't\n      // have enough information to throw or clear a warning. Bail out.\n      const containsNull = values.some(value => typeof value === 'undefined' || value === null);\n\n      if (containsNull) {\n        return;\n      }\n\n      let count;\n      if (typeof limit.max === 'number') {\n        count = countHigh(limit.max, values);\n        if (count >= raiseCount) {\n          this._raiseWarning(statName, 'max', { values, samples: relevantSamples });\n        } else if (count <= clearCount) {\n          this._clearWarning(statName, 'max', { values, samples: relevantSamples });\n        }\n      }\n\n      if (typeof limit.min === 'number') {\n        count = countLow(limit.min, values);\n        if (count >= raiseCount) {\n          this._raiseWarning(statName, 'min', { values, samples: relevantSamples });\n        } else if (count <= clearCount) {\n          this._clearWarning(statName, 'min', { values, samples: relevantSamples });\n        }\n      }\n\n      if (typeof limit.maxDuration === 'number' && samples.length > 1) {\n        relevantSamples = samples.slice(-2);\n        const prevValue = relevantSamples[0][statName];\n        const curValue = relevantSamples[1][statName];\n\n        const prevStreak = this._currentStreaks.get(statName) || 0;\n        const streak = (prevValue === curValue) ? prevStreak + 1 : 0;\n\n        this._currentStreaks.set(statName, streak);\n\n        if (streak >= limit.maxDuration) {\n          this._raiseWarning(statName, 'maxDuration', { value: streak });\n        } else if (streak === 0) {\n          this._clearWarning(statName, 'maxDuration', { value: prevStreak });\n        }\n      }\n\n      if (typeof limit.minStandardDeviation === 'number') {\n        const sampleSets: number[][] = this._supplementalSampleBuffers[statName];\n        if (!sampleSets || sampleSets.length < limit.sampleCount) {\n          return;\n        }\n        if (sampleSets.length > limit.sampleCount) {\n          sampleSets.splice(0, sampleSets.length - limit.sampleCount);\n        }\n        const flatSamples: number[] = flattenSamples(sampleSets.slice(-sampleCount));\n        const stdDev: number | null = calculateStandardDeviation(flatSamples);\n\n        if (typeof stdDev !== 'number') {\n          return;\n        }\n\n        if (stdDev < limit.minStandardDeviation) {\n          this._raiseWarning(statName, 'minStandardDeviation', { value: stdDev });\n        } else {\n          this._clearWarning(statName, 'minStandardDeviation', { value: stdDev });\n        }\n      }\n\n      ([\n        ['maxAverage', (x: number, y: number) => x > y],\n        ['minAverage', (x: number, y: number) => x < y],\n      ] as const).forEach(([thresholdName, comparator]) => {\n        if (typeof limit[thresholdName] === 'number' && values.length >= sampleCount) {\n          const avg: number = average(values);\n\n          if (comparator(avg, limit[thresholdName])) {\n            this._raiseWarning(statName, thresholdName, { values, samples: relevantSamples });\n          } else if (!comparator(avg, limit.clearValue || limit[thresholdName])) {\n            this._clearWarning(statName, thresholdName, { values, samples: relevantSamples });\n          }\n        }\n      });\n    });\n  }\n}\n\nnamespace StatsMonitor {\n  /**\n   * Config options to be passed to the {@link StatsMonitor} constructor.\n   * @private\n   */\n  export interface Options {\n    /**\n     * Method to get stats from a PeerConnection object\n     */\n    getRTCStats?: (peerConnection: IPeerConnection) => IRTCStats;\n\n    /**\n     * For calculating Mos. Overrides Mos library\n     */\n    Mos?: IMos;\n\n    /**\n     * The PeerConnection to monitor.\n     */\n    peerConnection?: IPeerConnection;\n\n    /**\n     * Optional custom threshold values.\n     */\n    thresholds?: ThresholdOptions;\n  }\n\n  /**\n   * Speficic threshold value for {@link ThresholdOptions}\n   * @private\n   */\n  export interface ThresholdOption {\n    /**\n     * How many samples that need to cross the threshold to clear a warning.\n     * Overrides SAMPLE_COUNT_CLEAR\n     */\n    clearCount?: number;\n\n    /**\n     * Used with the `minAverage` and `maxAverage` options. If `maxAverage` is\n     * used, then the warning will be cleared when at or below this value. If\n     * `minAverage` is used, then the warning will be cleared at or above this\n     * value.\n     */\n    clearValue?: number;\n\n    /**\n     * Warning will be raised if tracked metric rises above this value.\n     */\n    max?: number;\n\n    /**\n     * Warning will be raised based on the average over `sampleCount` samples.\n     * The warning is raised if the average is above the `raiseValue` amount and\n     * is cleared when below the `clearValue` amount.\n     */\n    maxAverage?: number;\n\n    /**\n     * Warning will be raised if tracked metric stays constant for\n     * the specified number of consequent samples.\n     */\n    maxDuration?: number;\n\n    /**\n     * Warning will be raised if tracked metric falls below this value.\n     */\n    min?: number;\n\n    /**\n     * Warning will be raised based on the average over `sampleCount` samples.\n     * The warning is raised if the average is below the `raiseValue` amount and\n     * is cleared when above the `clearValue` amount.\n     */\n    minAverage?: number;\n\n    /**\n     * Warning will be raised if the standard deviation of the tracked metric\n     * does not exceed this value.\n     */\n    minStandardDeviation?: number;\n\n    /**\n     * How many samples that need to cross the threshold to raise a warning.\n     * Overrides SAMPLE_COUNT_RAISE\n     */\n    raiseCount?: number;\n\n    /**\n     * How many samples we use when testing metric thresholds.\n     * Overrides _maxSampleCount\n     */\n    sampleCount?: number;\n  }\n\n  /**\n   * Threshold values for {@link StatsMonitor}\n   * @private\n   */\n  export interface ThresholdOptions {\n    [key: string]: any;\n\n    /**\n     * Audio input level between 0 and 32767, representing -100 to -30 dB.\n     */\n    audioInputLevel?: ThresholdOption;\n\n    /**\n     * Audio output level between 0 and 32767, representing -100 to -30 dB.\n     */\n    audioOutputLevel?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.jitter\n     */\n    jitter?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.mos\n     */\n    mos?: ThresholdOption;\n\n    /**\n     * Rules to apply to sample.packetsLostFraction\n     */\n    packetsLostFraction?: ThresholdOption[];\n\n    /**\n     * Rules to apply to sample.rtt\n     */\n    rtt?: ThresholdOption;\n  }\n\n  /**\n   * Timestamp for raised warnings\n   * @private\n   */\n  export interface WarningTimestamp {\n    /**\n     * Timestamp in milliseconds\n     */\n    timeRaised: number;\n  }\n}\n\nexport default StatsMonitor;\n", "import { EventEmitter } from 'events';\nimport Backoff from './backoff';\nimport Device from './device';\nimport DialtonePlayer from './dialtonePlayer';\nimport {\n  GeneralErrors,\n  getPreciseSignalingErrorByCode,\n  InvalidArgumentError,\n  InvalidStateError,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n  UserMediaErrors,\n} from './errors';\nimport Log from './log';\nimport { PeerConnection } from './rtc';\nimport { IceCandidate, RTCIceCandidate } from './rtc/icecandidate';\nimport RTCSample from './rtc/sample';\nimport { getPreferredCodecInfo } from './rtc/sdp';\nimport RTCWarning from './rtc/warning';\nimport { generateVoiceEventSid } from './sid';\nimport StatsMonitor from './statsMonitor';\nimport { isChrome } from './util';\n\nimport { RELEASE_VERSION } from './constants';\n\n// Placeholders until we convert the respective files to TypeScript.\nexport type IAudioHelper = any;\nexport type IPStream = any;\nexport type IPeerConnection = any;\nexport type IPublisher = any;\nexport type ISound = any;\n\nconst BACKOFF_CONFIG = {\n  factor: 1.1,\n  jitter: 0.5,\n  max: 30000,\n  min: 1,\n};\n\nconst DTMF_INTER_TONE_GAP: number = 70;\nconst DTMF_PAUSE_DURATION: number = 500;\nconst DTMF_TONE_DURATION: number = 160;\n\nconst METRICS_BATCH_SIZE: number = 10;\nconst METRICS_DELAY: number = 5000;\n\nconst MEDIA_DISCONNECT_ERROR = {\n  disconnect: true,\n  info: {\n    code: 31003,\n    message: 'Connection with Twilio was interrupted.',\n    twilioError: new MediaErrors.ConnectionError(),\n  },\n};\n\nconst MULTIPLE_THRESHOLD_WARNING_NAMES: Record<string, Record<string, string>> = {\n  // The stat `packetsLostFraction` is monitored by two separate thresholds,\n  // `maxAverage` and `max`. Each threshold emits a different warning name.\n  packetsLostFraction: {\n    max: 'packet-loss',\n    maxAverage: 'packets-lost-fraction',\n  },\n};\n\nconst WARNING_NAMES: Record<string, string> = {\n  audioInputLevel: 'audio-input-level',\n  audioOutputLevel: 'audio-output-level',\n  bytesReceived: 'bytes-received',\n  bytesSent: 'bytes-sent',\n  jitter: 'jitter',\n  mos: 'mos',\n  rtt: 'rtt',\n};\n\nconst WARNING_PREFIXES: Record<string, string> = {\n  max: 'high-',\n  maxAverage: 'high-',\n  maxDuration: 'constant-',\n  min: 'low-',\n  minStandardDeviation: 'constant-',\n};\n\n/**\n * A {@link Call} represents a media and signaling connection to a TwiML application.\n */\nclass Call extends EventEmitter {\n  /**\n   * String representation of the {@link Call} class.\n   */\n  static toString = () => '[Twilio.Call class]';\n\n  /**\n   * Returns caller verification information about the caller.\n   * If no caller verification information is available this will return null.\n   */\n  readonly callerInfo: Call.CallerInfo | null;\n\n  /**\n   * The custom parameters sent to (outgoing) or received by (incoming) the TwiML app.\n   */\n  readonly customParameters: Map<string, string>;\n\n  /**\n   * Whether this {@link Call} is incoming or outgoing.\n   */\n  get direction(): Call.CallDirection {\n    return this._direction;\n  }\n\n  /**\n   * Audio codec used for this {@link Call}. Expecting {@link Call.Codec} but\n   * will copy whatever we get from RTC stats.\n   */\n  get codec(): string {\n    return this._codec;\n  }\n\n  /**\n   * The connect token is available as soon as the call is established\n   * and connected to Twilio. Use this token to reconnect to a call via the {@link Device.connect}\n   * method.\n   *\n   * For incoming calls, it is available in the call object after the {@link Device.incomingEvent} is emitted.\n   * For outgoing calls, it is available after the {@link Call.acceptEvent} is emitted.\n   */\n  get connectToken(): string | undefined {\n    const signalingReconnectToken = this._signalingReconnectToken;\n    const callSid = this.parameters && this.parameters.CallSid ? this.parameters.CallSid : undefined;\n\n    if (!signalingReconnectToken || !callSid) {\n      return;\n    }\n\n    const customParameters = this.customParameters && typeof this.customParameters.keys === 'function' ?\n    Array.from(this.customParameters.keys()).reduce((result: Record<string, string>, key: string) => {\n      result[key] = this.customParameters.get(key)!;\n      return result;\n    }, {}) : {};\n\n    const parameters = this.parameters || {};\n\n    return btoa(encodeURIComponent(JSON.stringify({\n      customParameters,\n      parameters,\n      signalingReconnectToken,\n    })));\n  }\n\n  /**\n   * The temporary CallSid for this call, if it's outbound.\n   */\n  readonly outboundConnectionId?: string;\n\n  /**\n   * Call parameters received from Twilio for an incoming call.\n   */\n  parameters: Record<string, string> = { };\n\n  /**\n   * Audio codec used for this {@link Call}. Expecting {@link Call.Codec} but\n   * will copy whatever we get from RTC stats.\n   */\n  private _codec: string;\n\n  /**\n   * Whether this {@link Call} is incoming or outgoing.\n   */\n  private readonly _direction: Call.CallDirection;\n\n  /**\n   * The number of times input volume has been the same consecutively.\n   */\n  private _inputVolumeStreak: number = 0;\n\n  /**\n   * Whether the call has been answered.\n   */\n  private _isAnswered: boolean = false;\n\n  /**\n   * Whether the call has been cancelled.\n   */\n  private _isCancelled: boolean = false;\n\n  /**\n   * Whether the call has been rejected\n   */\n  private _isRejected: boolean = false;\n\n  /**\n   * Whether or not the browser uses unified-plan SDP by default.\n   */\n  private readonly _isUnifiedPlanDefault: boolean | undefined;\n\n  /**\n   * The most recent public input volume value. 0 -> 1 representing -100 to -30 dB.\n   */\n  private _latestInputVolume: number = 0;\n\n  /**\n   * The most recent public output volume value. 0 -> 1 representing -100 to -30 dB.\n   */\n  private _latestOutputVolume: number = 0;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = new Log('Call');\n\n  /**\n   * The MediaHandler (Twilio PeerConnection) this {@link Call} is using for\n   * media signaling.\n   */\n  private _mediaHandler: IPeerConnection;\n\n  /**\n   * An instance of Backoff for media reconnection\n   */\n  private _mediaReconnectBackoff: any;\n\n  /**\n   * Timestamp for the initial media reconnection\n   */\n  private _mediaReconnectStartTime: number;\n\n  /**\n   * State of the {@link Call}'s media.\n   */\n  private _mediaStatus: Call.State = Call.State.Pending;\n\n  /**\n   * A map of messages sent via sendMessage API using voiceEventSid as the key.\n   * The message will be deleted once an 'ack' or an error is received from the server.\n   */\n  private _messages: Map<string, Call.Message> = new Map();\n\n  /**\n   * A batch of metrics samples to send to Insights. Gets cleared after\n   * each send and appended to on each new sample.\n   */\n  private readonly _metricsSamples: Call.CallMetrics[] = [];\n\n  /**\n   * An instance of StatsMonitor.\n   */\n  private readonly _monitor: StatsMonitor;\n\n  /**\n   * Method to be run after {@link Call.ignore} is called.\n   */\n  private _onIgnore: () => void;\n\n  /**\n   * Options passed to this {@link Call}.\n   */\n  private _options: Call.Options = {\n    MediaHandler: PeerConnection,\n    MediaStream: null,\n    enableImprovedSignalingErrorPrecision: false,\n    offerSdp: null,\n    shouldPlayDisconnect: () => true,\n    voiceEventSidGenerator: generateVoiceEventSid,\n  };\n\n  /**\n   * The number of times output volume has been the same consecutively.\n   */\n  private _outputVolumeStreak: number = 0;\n\n  /**\n   * The PStream instance to use for Twilio call signaling.\n   */\n  private readonly _pstream: IPStream;\n\n  /**\n   * An instance of EventPublisher.\n   */\n  private readonly _publisher: IPublisher;\n\n  /**\n   * Whether the {@link Call} should send a hangup on disconnect.\n   */\n  private _shouldSendHangup: boolean = true;\n\n  /**\n   * The signaling reconnection token used to re-establish a lost signaling connection.\n   */\n  private _signalingReconnectToken: string | undefined;\n\n  /**\n   * State of the {@link Call}'s signaling.\n   */\n  private _signalingStatus: Call.State = Call.State.Pending;\n\n  /**\n   * A Map of Sounds to play.\n   */\n  private readonly _soundcache: Map<Device.SoundName, ISound> = new Map();\n\n  /**\n   * State of the {@link Call}.\n   */\n  private _status: Call.State = Call.State.Pending;\n\n  /**\n   * Voice event SID generator, creates a unique voice event SID.\n   */\n  private _voiceEventSidGenerator: () => string;\n\n  /**\n   * Whether the {@link Call} has been connected. Used to determine if we are reconnected.\n   */\n  private _wasConnected: boolean = false;\n\n  /**\n   * @internal\n   * @param config - Mandatory configuration options\n   * @param options - Optional settings\n   */\n  constructor(config: Call.Config, options?: Call.Options) {\n    super();\n\n    this._isUnifiedPlanDefault = config.isUnifiedPlanDefault;\n    this._soundcache = config.soundcache;\n\n    if (typeof config.onIgnore === 'function') {\n      this._onIgnore = config.onIgnore;\n    }\n\n    const message = options && options.twimlParams || { };\n    this.customParameters = new Map(\n      Object.entries(message).map(([key, val]: [string, any]): [string, string] => [key, String(val)]));\n\n    Object.assign(this._options, options);\n\n    if (this._options.callParameters) {\n      this.parameters = this._options.callParameters;\n    }\n\n    if (this._options.reconnectToken) {\n      this._signalingReconnectToken = this._options.reconnectToken;\n    }\n\n    this._voiceEventSidGenerator =\n      this._options.voiceEventSidGenerator || generateVoiceEventSid;\n\n    this._direction = this.parameters.CallSid && !this._options.reconnectCallSid ?\n      Call.CallDirection.Incoming : Call.CallDirection.Outgoing;\n\n    if (this.parameters) {\n      this.callerInfo = this.parameters.StirStatus\n        ? { isVerified: this.parameters.StirStatus === 'TN-Validation-Passed-A' }\n        : null;\n    } else {\n      this.callerInfo = null;\n    }\n\n    this._mediaReconnectBackoff = new Backoff(BACKOFF_CONFIG);\n    this._mediaReconnectBackoff.on('ready', () => this._mediaHandler.iceRestart());\n\n    // temporary call sid to be used for outgoing calls\n    this.outboundConnectionId = generateTempCallSid();\n\n    const publisher = this._publisher = config.publisher;\n\n    if (this._direction === Call.CallDirection.Incoming) {\n      publisher.info('connection', 'incoming', null, this);\n    } else {\n      publisher.info('connection', 'outgoing', {\n        preflight: this._options.preflight,\n        reconnect: !!this._options.reconnectCallSid,\n      }, this);\n    }\n\n    const monitor = this._monitor = new (this._options.StatsMonitor || StatsMonitor)();\n    monitor.on('sample', this._onRTCSample);\n\n    // First 20 seconds or so are choppy, so let's not bother with these warnings.\n    monitor.disableWarnings();\n    setTimeout(() => monitor.enableWarnings(), METRICS_DELAY);\n\n    monitor.on('warning', (data: RTCWarning, wasCleared?: boolean) => {\n      if (data.name === 'bytesSent' || data.name === 'bytesReceived') {\n        this._onMediaFailure(Call.MediaFailure.LowBytes);\n      }\n      this._reemitWarning(data, wasCleared);\n    });\n    monitor.on('warning-cleared', (data: RTCWarning) => {\n      this._reemitWarningCleared(data);\n    });\n\n    this._mediaHandler = new (this._options.MediaHandler)\n      (config.audioHelper, config.pstream, {\n        MediaStream: this._options.MediaStream,\n        RTCPeerConnection: this._options.RTCPeerConnection,\n        codecPreferences: this._options.codecPreferences,\n        dscp: this._options.dscp,\n        forceAggressiveIceNomination: this._options.forceAggressiveIceNomination,\n        isUnifiedPlan: this._isUnifiedPlanDefault,\n        maxAverageBitrate: this._options.maxAverageBitrate,\n      });\n\n    this.on('volume', (inputVolume: number, outputVolume: number): void => {\n      this._inputVolumeStreak = this._checkVolume(\n        inputVolume, this._inputVolumeStreak, this._latestInputVolume, 'input');\n      this._outputVolumeStreak = this._checkVolume(\n        outputVolume, this._outputVolumeStreak, this._latestOutputVolume, 'output');\n      this._latestInputVolume = inputVolume;\n      this._latestOutputVolume = outputVolume;\n    });\n\n    this._mediaHandler.onaudio = (remoteAudio: typeof Audio) => {\n      this._log.debug('#audio');\n      this.emit('audio', remoteAudio);\n    };\n\n    this._mediaHandler.onvolume = (inputVolume: number, outputVolume: number,\n                                   internalInputVolume: number, internalOutputVolume: number) => {\n      // (rrowland) These values mock the 0 -> 32767 format used by legacy getStats. We should look into\n      // migrating to a newer standard, either 0.0 -> linear or -127 to 0 in dB, matching the range\n      // chosen below.\n      monitor.addVolumes((internalInputVolume / 255) * 32767, (internalOutputVolume / 255) * 32767);\n\n      // (rrowland) 0.0 -> 1.0 linear\n      this.emit('volume', inputVolume, outputVolume);\n    };\n\n    this._mediaHandler.ondtlstransportstatechange = (state: string): void => {\n      const level = state === 'failed' ? 'error' : 'debug';\n      this._publisher.post(level, 'dtls-transport-state', state, null, this);\n    };\n\n    this._mediaHandler.onpcconnectionstatechange = (state: string): void => {\n      let level = 'debug';\n      const dtlsTransport = this._mediaHandler.getRTCDtlsTransport();\n\n      if (state === 'failed') {\n        level = dtlsTransport && dtlsTransport.state === 'failed' ? 'error' : 'warning';\n      }\n      this._publisher.post(level, 'pc-connection-state', state, null, this);\n    };\n\n    this._mediaHandler.onicecandidate = (candidate: RTCIceCandidate): void => {\n      const payload = new IceCandidate(candidate).toPayload();\n      this._publisher.debug('ice-candidate', 'ice-candidate', payload, this);\n    };\n\n    this._mediaHandler.onselectedcandidatepairchange = (pair: RTCIceCandidatePair): void => {\n      const localCandidatePayload = new IceCandidate(pair.local).toPayload();\n      const remoteCandidatePayload = new IceCandidate(pair.remote, true).toPayload();\n\n      this._publisher.debug('ice-candidate', 'selected-ice-candidate-pair', {\n        local_candidate: localCandidatePayload,\n        remote_candidate: remoteCandidatePayload,\n      }, this);\n    };\n\n    this._mediaHandler.oniceconnectionstatechange = (state: string): void => {\n      const level = state === 'failed' ? 'error' : 'debug';\n      this._publisher.post(level, 'ice-connection-state', state, null, this);\n    };\n\n    this._mediaHandler.onicegatheringfailure = (type: Call.IceGatheringFailureReason): void => {\n      this._publisher.warn('ice-gathering-state', type, null, this);\n      this._onMediaFailure(Call.MediaFailure.IceGatheringFailed);\n    };\n\n    this._mediaHandler.onicegatheringstatechange = (state: string): void => {\n      this._publisher.debug('ice-gathering-state', state, null, this);\n    };\n\n    this._mediaHandler.onsignalingstatechange = (state: string): void => {\n      this._publisher.debug('signaling-state', state, null, this);\n    };\n\n    this._mediaHandler.ondisconnected = (msg: string): void => {\n      this._log.warn(msg);\n      this._publisher.warn('network-quality-warning-raised', 'ice-connectivity-lost', {\n        message: msg,\n      }, this);\n      this._log.debug('#warning', 'ice-connectivity-lost');\n      this.emit('warning', 'ice-connectivity-lost');\n\n      this._onMediaFailure(Call.MediaFailure.ConnectionDisconnected);\n    };\n\n    this._mediaHandler.onfailed = (msg: string): void => {\n      this._onMediaFailure(Call.MediaFailure.ConnectionFailed);\n    };\n\n    this._mediaHandler.onconnected = (): void => {\n      // First time _mediaHandler is connected, but ICE Gathering issued an ICE restart and succeeded.\n      if (this._status === Call.State.Reconnecting) {\n        this._onMediaReconnected();\n      }\n    };\n\n    this._mediaHandler.onreconnected = (msg: string): void => {\n      this._log.info(msg);\n      this._publisher.info('network-quality-warning-cleared', 'ice-connectivity-lost', {\n        message: msg,\n      }, this);\n      this._log.debug('#warning-cleared', 'ice-connectivity-lost');\n      this.emit('warning-cleared', 'ice-connectivity-lost');\n      this._onMediaReconnected();\n    };\n\n    this._mediaHandler.onerror = (e: any): void => {\n      if (e.disconnect === true) {\n        this._disconnect(e.info && e.info.message);\n      }\n\n      const error = e.info.twilioError || new GeneralErrors.UnknownError(e.info.message);\n      this._log.error('Received an error from MediaStream:', e);\n      this._log.debug('#error', error);\n      this.emit('error', error);\n    };\n\n    this._mediaHandler.onopen = () => {\n      // NOTE(mroberts): While this may have been happening in previous\n      // versions of Chrome, since Chrome 45 we have seen the\n      // PeerConnection's onsignalingstatechange handler invoked multiple\n      // times in the same signalingState 'stable'. When this happens, we\n      // invoke this onopen function. If we invoke it twice without checking\n      // for _status 'open', we'd accidentally close the PeerConnection.\n      //\n      // See <https://code.google.com/p/webrtc/issues/detail?id=4996>.\n      if (this._status === Call.State.Open || this._status === Call.State.Reconnecting) {\n        return;\n      } else if (this._status === Call.State.Ringing || this._status === Call.State.Connecting) {\n        this.mute(this._mediaHandler.isMuted);\n        this._mediaStatus = Call.State.Open;\n        this._maybeTransitionToOpen();\n      } else {\n        // call was probably canceled sometime before this\n        this._mediaHandler.close();\n      }\n    };\n\n    this._mediaHandler.onclose = () => {\n      this._status = Call.State.Closed;\n      if (this._options.shouldPlayDisconnect && this._options.shouldPlayDisconnect()\n        // Don't play disconnect sound if this was from a cancel event. i.e. the call\n        // was ignored or hung up even before it was answered.\n        // Similarly, don't play disconnect sound if the call was rejected.\n        && !this._isCancelled && !this._isRejected) {\n\n        this._soundcache.get(Device.SoundName.Disconnect).play();\n      }\n\n      monitor.disable();\n      this._publishMetrics();\n\n      if (!this._isCancelled && !this._isRejected) {\n        // tslint:disable no-console\n        this._log.debug('#disconnect');\n        this.emit('disconnect', this);\n      }\n    };\n\n    this._pstream = config.pstream;\n    this._pstream.on('ack', this._onAck);\n    this._pstream.on('cancel', this._onCancel);\n    this._pstream.on('error', this._onSignalingError);\n    this._pstream.on('ringing', this._onRinging);\n    this._pstream.on('transportClose', this._onTransportClose);\n    this._pstream.on('connected', this._onConnected);\n    this._pstream.on('message', this._onMessageReceived);\n\n    this.on('error', error => {\n      this._publisher.error('connection', 'error', {\n        code: error.code, message: error.message,\n      }, this);\n\n      if (this._pstream && this._pstream.status === 'disconnected') {\n        this._cleanupEventListeners();\n      }\n    });\n\n    this.on('disconnect', () => {\n      this._cleanupEventListeners();\n    });\n  }\n\n  /**\n   * Set the audio input tracks from a given stream.\n   * @internal\n   * @param stream\n   */\n  _setInputTracksFromStream(stream: MediaStream | null): Promise<void> {\n    return this._mediaHandler.setInputTracksFromStream(stream);\n  }\n\n  /**\n   * Set the audio output sink IDs.\n   * @internal\n   * @param sinkIds\n   */\n  _setSinkIds(sinkIds: string[]): Promise<void> {\n    return this._mediaHandler._setSinkIds(sinkIds);\n  }\n\n  /**\n   * Accept the incoming {@link Call}.\n   * @param [options]\n   */\n  accept(options?: Call.AcceptOptions): void {\n    this._log.debug('.accept', options);\n    if (this._status !== Call.State.Pending) {\n      this._log.debug(`.accept noop. status is '${this._status}'`);\n      return;\n    }\n\n    options = options || { };\n    const rtcConfiguration = options.rtcConfiguration || this._options.rtcConfiguration;\n    const rtcConstraints = options.rtcConstraints || this._options.rtcConstraints || { };\n    const audioConstraints = {\n      audio: typeof rtcConstraints.audio !== 'undefined' ? rtcConstraints.audio : true,\n    };\n\n    this._status = Call.State.Connecting;\n\n    const connect = () => {\n      if (this._status !== Call.State.Connecting) {\n        // call must have been canceled\n        this._cleanupEventListeners();\n        this._mediaHandler.close();\n        return;\n      }\n\n      const onAnswer = (pc: RTCPeerConnection) => {\n        // Report that the call was answered, and directionality\n        const eventName = this._direction === Call.CallDirection.Incoming\n          ? 'accepted-by-local'\n          : 'accepted-by-remote';\n        this._publisher.info('connection', eventName, null, this);\n\n        // Report the preferred codec and params as they appear in the SDP\n        const { codecName, codecParams } = getPreferredCodecInfo(this._mediaHandler.version.getSDP());\n        this._publisher.info('settings', 'codec', {\n          codec_params: codecParams,\n          selected_codec: codecName,\n        }, this);\n\n        // Enable RTC monitoring\n        this._monitor.enable(pc);\n      };\n\n      const sinkIds = typeof this._options.getSinkIds === 'function' && this._options.getSinkIds();\n      if (Array.isArray(sinkIds)) {\n        this._mediaHandler._setSinkIds(sinkIds).catch(() => {\n          // (rrowland) We don't want this to throw to console since the customer\n          // can't control this. This will most commonly be rejected on browsers\n          // that don't support setting sink IDs.\n        });\n      }\n\n      this._pstream.addListener('hangup', this._onHangup);\n\n      if (this._direction === Call.CallDirection.Incoming) {\n        this._isAnswered = true;\n        this._pstream.on('answer', this._onAnswer);\n        this._mediaHandler.answerIncomingCall(this.parameters.CallSid,\n          this._options.offerSdp, rtcConfiguration, onAnswer);\n      } else {\n        const params = Array.from(this.customParameters.entries()).map(pair =>\n         `${encodeURIComponent(pair[0])}=${encodeURIComponent(pair[1])}`).join('&');\n        this._pstream.on('answer', this._onAnswer);\n        this._mediaHandler.makeOutgoingCall(params, this._signalingReconnectToken,\n          this._options.reconnectCallSid || this.outboundConnectionId, rtcConfiguration, onAnswer);\n      }\n    };\n\n    if (this._options.beforeAccept) {\n      this._options.beforeAccept(this);\n    }\n\n    const inputStream = typeof this._options.getInputStream === 'function' && this._options.getInputStream();\n\n    const promise = inputStream\n      ? this._mediaHandler.setInputTracksFromStream(inputStream)\n      : this._mediaHandler.openDefaultDeviceWithConstraints(audioConstraints);\n\n    promise.then(() => {\n      this._publisher.info('get-user-media', 'succeeded', {\n        data: { audioConstraints },\n      }, this);\n\n      connect();\n    }, (error: Record<string, any>) => {\n      let twilioError;\n\n      if (error.code === 31208\n        || ['PermissionDeniedError', 'NotAllowedError'].indexOf(error.name) !== -1) {\n        twilioError = new UserMediaErrors.PermissionDeniedError();\n        this._publisher.error('get-user-media', 'denied', {\n          data: {\n            audioConstraints,\n            error,\n          },\n        }, this);\n      } else {\n        twilioError = new UserMediaErrors.AcquisitionFailedError();\n\n        this._publisher.error('get-user-media', 'failed', {\n          data: {\n            audioConstraints,\n            error,\n          },\n        }, this);\n      }\n\n      this._disconnect();\n      this._log.debug('#error', error);\n      this.emit('error', twilioError);\n    });\n  }\n\n  /**\n   * Disconnect from the {@link Call}.\n   */\n  disconnect(): void {\n    this._log.debug('.disconnect');\n    this._disconnect();\n  }\n\n  /**\n   * Get the local MediaStream, if set.\n   */\n  getLocalStream(): MediaStream | undefined {\n    return this._mediaHandler && this._mediaHandler.stream;\n  }\n\n  /**\n   * Get the remote MediaStream, if set.\n   */\n  getRemoteStream(): MediaStream | undefined {\n    return this._mediaHandler && this._mediaHandler._remoteStream;\n  }\n\n  /**\n   * Ignore the incoming {@link Call}.\n   */\n  ignore(): void {\n    this._log.debug('.ignore');\n    if (this._status !== Call.State.Pending) {\n      this._log.debug(`.ignore noop. status is '${this._status}'`);\n      return;\n    }\n\n    this._status = Call.State.Closed;\n    this._mediaHandler.ignore(this.parameters.CallSid);\n    this._publisher.info('connection', 'ignored-by-local', null, this);\n\n    if (this._onIgnore) {\n      this._onIgnore();\n    }\n  }\n\n  /**\n   * Check whether call is muted\n   */\n  isMuted(): boolean {\n    return this._mediaHandler.isMuted;\n  }\n\n  /**\n   * Mute incoming audio.\n   * @param shouldMute - Whether the incoming audio should be muted. Defaults to true.\n   */\n  mute(shouldMute: boolean = true): void {\n    this._log.debug('.mute', shouldMute);\n    const wasMuted = this._mediaHandler.isMuted;\n    this._mediaHandler.mute(shouldMute);\n\n    const isMuted = this._mediaHandler.isMuted;\n    if (wasMuted !== isMuted) {\n      this._publisher.info('connection', isMuted ? 'muted' : 'unmuted', null, this);\n      this._log.debug('#mute', isMuted);\n      this.emit('mute', isMuted, this);\n    }\n  }\n\n  /**\n   * Post an event to Endpoint Analytics indicating that the end user\n   *   has given call quality feedback. Called without a score, this\n   *   will report that the customer declined to give feedback.\n   * @param score - The end-user's rating of the call; an\n   *   integer 1 through 5. Or undefined if the user declined to give\n   *   feedback.\n   * @param issue - The primary issue the end user\n   *   experienced on the call. Can be: ['one-way-audio', 'choppy-audio',\n   *   'dropped-call', 'audio-latency', 'noisy-call', 'echo']\n   */\n  postFeedback(score?: Call.FeedbackScore, issue?: Call.FeedbackIssue): Promise<void> {\n    if (typeof score === 'undefined' || score === null) {\n      return this._postFeedbackDeclined();\n    }\n\n    if (!Object.values(Call.FeedbackScore).includes(score)) {\n      throw new InvalidArgumentError(`Feedback score must be one of: ${Object.values(Call.FeedbackScore)}`);\n    }\n\n    if (typeof issue !== 'undefined' && issue !== null && !Object.values(Call.FeedbackIssue).includes(issue)) {\n      throw new InvalidArgumentError(`Feedback issue must be one of: ${Object.values(Call.FeedbackIssue)}`);\n    }\n\n    return this._publisher.info('feedback', 'received', {\n      issue_name: issue,\n      quality_score: score,\n    }, this, true);\n  }\n\n  /**\n   * Reject the incoming {@link Call}.\n   */\n  reject(): void {\n    this._log.debug('.reject');\n    if (this._status !== Call.State.Pending) {\n      this._log.debug(`.reject noop. status is '${this._status}'`);\n      return;\n    }\n\n    this._isRejected = true;\n    this._pstream.reject(this.parameters.CallSid);\n    this._mediaHandler.reject(this.parameters.CallSid);\n    this._publisher.info('connection', 'rejected-by-local', null, this);\n    this._cleanupEventListeners();\n    this._mediaHandler.close();\n    this._status = Call.State.Closed;\n    this._log.debug('#reject');\n    this.emit('reject');\n  }\n\n  /**\n   * Send a string of digits.\n   * @param digits\n   */\n  sendDigits(digits: string): void {\n    this._log.debug('.sendDigits', digits);\n    if (digits.match(/[^0-9*#w]/)) {\n      throw new InvalidArgumentError('Illegal character passed into sendDigits');\n    }\n\n    const customSounds = this._options.customSounds || {};\n    const sequence: string[] = [];\n    digits.split('').forEach((digit: string) => {\n      let dtmf = (digit !== 'w') ? `dtmf${digit}` : '';\n      if (dtmf === 'dtmf*') { dtmf = 'dtmfs'; }\n      if (dtmf === 'dtmf#') { dtmf = 'dtmfh'; }\n      sequence.push(dtmf);\n    });\n\n    const playNextDigit = () => {\n      const digit = sequence.shift() as Device.SoundName | undefined;\n      if (digit) {\n        if (this._options.dialtonePlayer && !customSounds[digit]) {\n          this._options.dialtonePlayer.play(digit);\n        } else {\n          this._soundcache.get(digit).play();\n        }\n      }\n      if (sequence.length) {\n        setTimeout(() => playNextDigit(), 200);\n      }\n    };\n    playNextDigit();\n\n    const dtmfSender = this._mediaHandler.getOrCreateDTMFSender();\n\n    function insertDTMF(dtmfs: string[]) {\n      if (!dtmfs.length) { return; }\n      const dtmf: string | undefined = dtmfs.shift();\n\n      if (dtmf && dtmf.length) {\n        dtmfSender.insertDTMF(dtmf, DTMF_TONE_DURATION, DTMF_INTER_TONE_GAP);\n      }\n\n      setTimeout(insertDTMF.bind(null, dtmfs), DTMF_PAUSE_DURATION);\n    }\n\n    if (dtmfSender) {\n      if (!('canInsertDTMF' in dtmfSender) || dtmfSender.canInsertDTMF) {\n        this._log.info('Sending digits using RTCDTMFSender');\n        // NOTE(mroberts): We can't just map 'w' to ',' since\n        // RTCDTMFSender's pause duration is 2 s and Twilio's is more\n        // like 500 ms. Instead, we will fudge it with setTimeout.\n        insertDTMF(digits.split('w'));\n        return;\n      }\n\n      this._log.info('RTCDTMFSender cannot insert DTMF');\n    }\n\n    // send pstream message to send DTMF\n    this._log.info('Sending digits over PStream');\n\n    if (this._pstream !== null && this._pstream.status !== 'disconnected') {\n      this._pstream.dtmf(this.parameters.CallSid, digits);\n    } else {\n      const error = new GeneralErrors.ConnectionError('Could not send DTMF: Signaling channel is disconnected');\n      this._log.debug('#error', error);\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Send a message to Twilio. Your backend application can listen for these\n   * messages to allow communication between your frontend and backend applications.\n   * <br/><br/>This feature is currently in Beta.\n   * @param message - The message object to send.\n   * @returns A voice event sid that uniquely identifies the message that was sent.\n   */\n  sendMessage(message: Call.Message): string {\n    this._log.debug('.sendMessage', JSON.stringify(message));\n    const { content, contentType, messageType } = message;\n\n    if (typeof content === 'undefined' || content === null) {\n      throw new InvalidArgumentError('`content` is empty');\n    }\n\n    if (typeof messageType !== 'string') {\n      throw new InvalidArgumentError(\n        '`messageType` must be a string.',\n      );\n    }\n\n    if (messageType.length === 0) {\n      throw new InvalidArgumentError(\n        '`messageType` must be a non-empty string.',\n      );\n    }\n\n    if (this._pstream === null) {\n      throw new InvalidStateError(\n        'Could not send CallMessage; Signaling channel is disconnected',\n      );\n    }\n\n    const callSid = this.parameters.CallSid;\n    if (typeof this.parameters.CallSid === 'undefined') {\n      throw new InvalidStateError(\n        'Could not send CallMessage; Call has no CallSid',\n      );\n    }\n\n    const voiceEventSid = this._voiceEventSidGenerator();\n    this._messages.set(voiceEventSid, { content, contentType, messageType, voiceEventSid });\n    this._pstream.sendMessage(callSid, content, contentType, messageType, voiceEventSid);\n    return voiceEventSid;\n  }\n\n  /**\n   * Get the current {@link Call} status.\n   */\n  status(): Call.State {\n    return this._status;\n  }\n\n  /**\n   * String representation of {@link Call} instance.\n   * @internal\n   */\n  toString = () => '[Twilio.Call instance]';\n\n  /**\n   * Check the volume passed, emitting a warning if one way audio is detected or cleared.\n   * @param currentVolume - The current volume for this direction\n   * @param streakFieldName - The name of the field on the {@link Call} object that tracks how many times the\n   *   current value has been repeated consecutively.\n   * @param lastValueFieldName - The name of the field on the {@link Call} object that tracks the most recent\n   *   volume for this direction\n   * @param direction - The directionality of this audio track, either 'input' or 'output'\n   * @returns The current streak; how many times in a row the same value has been polled.\n   */\n  private _checkVolume(currentVolume: number, currentStreak: number,\n                       lastValue: number, direction: 'input'|'output'): number {\n    const wasWarningRaised: boolean = currentStreak >= 10;\n    let newStreak: number = 0;\n\n    if (lastValue === currentVolume) {\n      newStreak = currentStreak;\n    }\n\n    if (newStreak >= 10) {\n      this._emitWarning('audio-level-', `constant-audio-${direction}-level`, 10, newStreak, false);\n    } else if (wasWarningRaised) {\n      this._emitWarning('audio-level-', `constant-audio-${direction}-level`, 10, newStreak, true);\n    }\n\n    return newStreak;\n  }\n\n  /**\n   * Clean up event listeners.\n   */\n  private _cleanupEventListeners(): void {\n    const cleanup = () => {\n      if (!this._pstream) { return; }\n\n      this._pstream.removeListener('ack', this._onAck);\n      this._pstream.removeListener('answer', this._onAnswer);\n      this._pstream.removeListener('cancel', this._onCancel);\n      this._pstream.removeListener('error', this._onSignalingError);\n      this._pstream.removeListener('hangup', this._onHangup);\n      this._pstream.removeListener('ringing', this._onRinging);\n      this._pstream.removeListener('transportClose', this._onTransportClose);\n      this._pstream.removeListener('connected', this._onConnected);\n      this._pstream.removeListener('message', this._onMessageReceived);\n    };\n\n    // This is kind of a hack, but it lets us avoid rewriting more code.\n    // Basically, there's a sequencing problem with the way PeerConnection raises\n    // the\n    //\n    //   Cannot establish call. SDK is disconnected\n    //\n    // error in Call#accept. It calls PeerConnection#onerror, which emits\n    // the error event on Call. An error handler on Call then calls\n    // cleanupEventListeners, but then control returns to Call#accept. It's\n    // at this point that we add a listener for the answer event that never gets\n    // removed. setTimeout will allow us to rerun cleanup again, _after_\n    // Call#accept returns.\n    cleanup();\n    setTimeout(cleanup, 0);\n  }\n\n  /**\n   * Create the payload wrapper for a batch of metrics to be sent to Insights.\n   */\n  private _createMetricPayload(): Partial<Record<string, string|boolean>> {\n    const payload: Partial<Record<string, string|boolean>> = {\n      call_sid: this.parameters.CallSid,\n      dscp: !!this._options.dscp,\n      sdk_version: RELEASE_VERSION,\n    };\n\n    if (this._options.gateway) {\n      payload.gateway = this._options.gateway;\n    }\n\n    payload.direction = this._direction;\n    return payload;\n  }\n\n  /**\n   * Disconnect the {@link Call}.\n   * @param message - A message explaining why the {@link Call} is being disconnected.\n   * @param wasRemote - Whether the disconnect was triggered locally or remotely.\n   */\n  private _disconnect(message?: string | null, wasRemote?: boolean): void {\n    message = typeof message === 'string' ? message : null;\n\n    if (this._status !== Call.State.Open\n        && this._status !== Call.State.Connecting\n        && this._status !== Call.State.Reconnecting\n        && this._status !== Call.State.Ringing) {\n      return;\n    }\n\n    this._log.info('Disconnecting...');\n\n    // send pstream hangup message\n    if (this._pstream !== null && this._pstream.status !== 'disconnected' && this._shouldSendHangup) {\n      const callsid: string | undefined = this.parameters.CallSid || this.outboundConnectionId;\n      if (callsid) {\n        this._pstream.hangup(callsid, message);\n      }\n    }\n\n    this._cleanupEventListeners();\n    this._mediaHandler.close();\n\n    if (!wasRemote) {\n      this._publisher.info('connection', 'disconnected-by-local', null, this);\n    }\n  }\n\n  private _emitWarning = (groupPrefix: string, warningName: string, threshold: number,\n                          value: number|number[], wasCleared?: boolean, warningData?: RTCWarning): void => {\n    const groupSuffix = wasCleared ? '-cleared' : '-raised';\n    const groupName = `${groupPrefix}warning${groupSuffix}`;\n\n    // Ignore constant input if the Call is muted (Expected)\n    if (warningName === 'constant-audio-input-level' && this.isMuted()) {\n      return;\n    }\n\n    let level = wasCleared ? 'info' : 'warning';\n\n    // Avoid throwing false positives as warnings until we refactor volume metrics\n    if (warningName === 'constant-audio-output-level') {\n      level = 'info';\n    }\n\n    const payloadData: Record<string, any> = { threshold };\n\n    if (value) {\n      if (value instanceof Array) {\n        payloadData.values = value.map((val: any) => {\n          if (typeof val === 'number') {\n            return Math.round(val * 100) / 100;\n          }\n\n          return value;\n        });\n      } else {\n        payloadData.value = value;\n      }\n    }\n\n    this._publisher.post(level, groupName, warningName, { data: payloadData }, this);\n\n    if (warningName !== 'constant-audio-output-level') {\n      const emitName = wasCleared ? 'warning-cleared' : 'warning';\n      this._log.debug(`#${emitName}`, warningName);\n      this.emit(emitName, warningName, warningData && !wasCleared ? warningData : null);\n    }\n  }\n\n  /**\n   * Transition to {@link CallStatus.Open} if criteria is met.\n   */\n  private _maybeTransitionToOpen(): void {\n    const wasConnected = this._wasConnected;\n    if (this._isAnswered) {\n      this._onSignalingReconnected();\n      this._signalingStatus = Call.State.Open;\n      if (this._mediaHandler && this._mediaHandler.status === 'open') {\n        this._status = Call.State.Open;\n        if (!this._wasConnected) {\n          this._wasConnected = true;\n          this._log.debug('#accept');\n          this.emit('accept', this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when the {@link Call} receives an ack from signaling\n   * @param payload\n   */\n  private _onAck = (payload: Record<string, any>): void => {\n    const { acktype, callsid, voiceeventsid } = payload;\n    if (this.parameters.CallSid !== callsid) {\n      this._log.warn(`Received ack from a different callsid: ${callsid}`);\n      return;\n    }\n    if (acktype === 'message') {\n      this._onMessageSent(voiceeventsid);\n    }\n  }\n\n  /**\n   * Called when the {@link Call} is answered.\n   * @param payload\n   */\n  private _onAnswer = (payload: Record<string, any>): void => {\n    if (typeof payload.reconnect === 'string') {\n      this._signalingReconnectToken = payload.reconnect;\n    }\n\n    // answerOnBridge=false will send a 183 which we need to catch in _onRinging when\n    // the enableRingingState flag is disabled. In that case, we will receive a 200 after\n    // the callee accepts the call firing a second `accept` event if we don't\n    // short circuit here.\n    if (this._isAnswered && this._status !== Call.State.Reconnecting) {\n      return;\n    }\n\n    this._setCallSid(payload);\n    this._isAnswered = true;\n    this._maybeTransitionToOpen();\n  }\n\n  /**\n   * Called when the {@link Call} is cancelled.\n   * @param payload\n   */\n  private _onCancel = (payload: Record<string, any>): void => {\n    // (rrowland) Is this check necessary? Verify, and if so move to pstream / VSP module.\n    const callsid = payload.callsid;\n    if (this.parameters.CallSid === callsid) {\n      this._isCancelled = true;\n      this._publisher.info('connection', 'cancel', null, this);\n      this._cleanupEventListeners();\n      this._mediaHandler.close();\n\n      this._status = Call.State.Closed;\n      this._log.debug('#cancel');\n      this.emit('cancel');\n      this._pstream.removeListener('cancel', this._onCancel);\n    }\n  }\n\n  /**\n   * Called when we receive a connected event from pstream.\n   * Re-emits the event.\n   */\n  private _onConnected = (): void => {\n    this._log.info('Received connected from pstream');\n    if (this._signalingReconnectToken && this._mediaHandler.version) {\n      this._pstream.reconnect(\n        this._mediaHandler.version.getSDP(),\n        this.parameters.CallSid,\n        this._signalingReconnectToken,\n      );\n    }\n  }\n\n  /**\n   * Called when the {@link Call} is hung up.\n   * @param payload\n   */\n  private _onHangup = (payload: Record<string, any>): void => {\n    if (this.status() === Call.State.Closed) {\n      return;\n    }\n\n    /**\n     *  see if callsid passed in message matches either callsid or outbound id\n     *  call should always have either callsid or outbound id\n     *  if no callsid passed hangup anyways\n     */\n    if (payload.callsid && (this.parameters.CallSid || this.outboundConnectionId)) {\n      if (payload.callsid !== this.parameters.CallSid\n          && payload.callsid !== this.outboundConnectionId) {\n        return;\n      }\n    } else if (payload.callsid) {\n      // hangup is for another call\n      return;\n    }\n\n    this._log.info('Received HANGUP from gateway');\n    if (payload.error) {\n      const code = payload.error.code;\n      const errorConstructor = getPreciseSignalingErrorByCode(\n        this._options.enableImprovedSignalingErrorPrecision,\n        code,\n      );\n      const error = typeof errorConstructor !== 'undefined'\n        ? new errorConstructor(payload.error.message)\n        : new GeneralErrors.ConnectionError('Error sent from gateway in HANGUP', payload.error);\n      this._log.error('Received an error from the gateway:', error);\n      this._log.debug('#error', error);\n      this.emit('error', error);\n    }\n    this._shouldSendHangup = false;\n    this._publisher.info('connection', 'disconnected-by-remote', null, this);\n    this._disconnect(null, true);\n    this._cleanupEventListeners();\n  }\n\n  /**\n   * Called when there is a media failure.\n   * Manages all media-related states and takes action base on the states\n   * @param type - Type of media failure\n   */\n  private _onMediaFailure = (type: Call.MediaFailure): void => {\n    const {\n      ConnectionDisconnected, ConnectionFailed, IceGatheringFailed, LowBytes,\n    } = Call.MediaFailure;\n\n    // These types signifies the end of a single ICE cycle\n    const isEndOfIceCycle = type === ConnectionFailed || type === IceGatheringFailed;\n\n    // All browsers except chrome doesn't update pc.iceConnectionState and pc.connectionState\n    // after issuing an ICE Restart, which we use to determine if ICE Restart is complete.\n    // Since we cannot detect if ICE Restart is complete, we will not retry.\n    if (!isChrome(window, window.navigator) && type === ConnectionFailed) {\n      return this._mediaHandler.onerror(MEDIA_DISCONNECT_ERROR);\n    }\n\n    // Ignore subsequent requests if ice restart is in progress\n    if (this._mediaStatus === Call.State.Reconnecting) {\n\n      // This is a retry. Previous ICE Restart failed\n      if (isEndOfIceCycle) {\n\n        // We already exceeded max retry time.\n        if (Date.now() - this._mediaReconnectStartTime > BACKOFF_CONFIG.max) {\n          this._log.warn('Exceeded max ICE retries');\n          return this._mediaHandler.onerror(MEDIA_DISCONNECT_ERROR);\n        }\n\n        // Issue ICE restart with backoff\n        try {\n          this._mediaReconnectBackoff.backoff();\n        } catch (error) {\n          // Catch and ignore 'Backoff in progress.' errors. If a backoff is\n          // ongoing and we try to start another one, there shouldn't be a\n          // problem.\n          if (!(error.message && error.message === 'Backoff in progress.')) {\n            throw error;\n          }\n        }\n      }\n\n      return;\n    }\n\n    const pc = this._mediaHandler.version.pc;\n    const isIceDisconnected = pc && pc.iceConnectionState === 'disconnected';\n    const hasLowBytesWarning = this._monitor.hasActiveWarning('bytesSent', 'min')\n      || this._monitor.hasActiveWarning('bytesReceived', 'min');\n\n    // Only certain conditions can trigger media reconnection\n    if ((type === LowBytes && isIceDisconnected)\n      || (type === ConnectionDisconnected && hasLowBytesWarning)\n      || isEndOfIceCycle) {\n\n      const mediaReconnectionError = new MediaErrors.ConnectionError('Media connection failed.');\n      this._log.warn('ICE Connection disconnected.');\n      this._publisher.warn('connection', 'error', mediaReconnectionError, this);\n      this._publisher.info('connection', 'reconnecting', null, this);\n\n      this._mediaReconnectStartTime = Date.now();\n      this._status = Call.State.Reconnecting;\n      this._mediaStatus = Call.State.Reconnecting;\n      this._mediaReconnectBackoff.reset();\n      this._mediaReconnectBackoff.backoff();\n\n      this._log.debug('#reconnecting');\n      this.emit('reconnecting', mediaReconnectionError);\n    }\n  }\n\n  /**\n   * Called when media call is restored\n   */\n  private _onMediaReconnected = (): void => {\n    // Only trigger once.\n    // This can trigger on pc.onIceConnectionChange and pc.onConnectionChange.\n    if (this._mediaStatus !== Call.State.Reconnecting) {\n      return;\n    }\n    this._log.info('ICE Connection reestablished.');\n    this._mediaStatus = Call.State.Open;\n\n    if (this._signalingStatus === Call.State.Open) {\n      this._publisher.info('connection', 'reconnected', null, this);\n      this._log.debug('#reconnected');\n      this.emit('reconnected');\n      this._status = Call.State.Open;\n    }\n  }\n\n  /**\n   * Raised when a Call receives a message from the backend.\n   * @param payload - A record representing the payload of the message from the\n   * Twilio backend.\n   */\n  private _onMessageReceived = (payload: Record<string, any>): void => {\n    const { callsid, content, contenttype, messagetype, voiceeventsid } = payload;\n\n    if (this.parameters.CallSid !== callsid) {\n      this._log.warn(`Received a message from a different callsid: ${callsid}`);\n      return;\n    }\n    const data = {\n      content,\n      contentType: contenttype,\n      messageType: messagetype,\n      voiceEventSid: voiceeventsid,\n    };\n    this._publisher.info('call-message', messagetype, {\n      content_type: contenttype,\n      event_type: 'received',\n      voice_event_sid: voiceeventsid,\n    }, this);\n    this._log.debug('#messageReceived', JSON.stringify(data));\n    this.emit('messageReceived', data);\n  }\n\n  /**\n   * Raised when a Call receives an 'ack' with an 'acktype' of 'message.\n   * This means that the message sent via sendMessage API has been received by the signaling server.\n   * @param voiceEventSid\n   */\n  private _onMessageSent = (voiceEventSid: string): void => {\n    if (!this._messages.has(voiceEventSid)) {\n      this._log.warn(`Received a messageSent with a voiceEventSid that doesn't exists: ${voiceEventSid}`);\n      return;\n    }\n    const message = this._messages.get(voiceEventSid);\n    this._messages.delete(voiceEventSid);\n    this._publisher.info('call-message', message?.messageType, {\n      content_type: message?.contentType,\n      event_type: 'sent',\n      voice_event_sid: voiceEventSid,\n    }, this);\n    this._log.debug('#messageSent', JSON.stringify(message));\n    this.emit('messageSent', message);\n  }\n\n  /**\n   * When we get a RINGING signal from PStream, update the {@link Call} status.\n   * @param payload\n   */\n  private _onRinging = (payload: Record<string, any>): void => {\n    this._setCallSid(payload);\n\n    // If we're not in 'connecting' or 'ringing' state, this event was received out of order.\n    if (this._status !== Call.State.Connecting && this._status !== Call.State.Ringing) {\n      return;\n    }\n\n    const hasEarlyMedia = !!payload.sdp;\n    this._status = Call.State.Ringing;\n    this._publisher.info('connection', 'outgoing-ringing', { hasEarlyMedia }, this);\n    this._log.debug('#ringing');\n    this.emit('ringing', hasEarlyMedia);\n  }\n\n  /**\n   * Called each time StatsMonitor emits a sample.\n   * Emits stats event and batches the call stats metrics and sends them to Insights.\n   * @param sample\n   */\n  private _onRTCSample = (sample: RTCSample): void => {\n    const callMetrics: Call.CallMetrics = {\n      ...sample,\n      inputVolume: this._latestInputVolume,\n      outputVolume: this._latestOutputVolume,\n    };\n\n    this._codec = callMetrics.codecName;\n\n    this._metricsSamples.push(callMetrics);\n    if (this._metricsSamples.length >= METRICS_BATCH_SIZE) {\n      this._publishMetrics();\n    }\n\n    this.emit('sample', sample);\n  }\n\n  /**\n   * Called when an 'error' event is received from the signaling stream.\n   */\n  private _onSignalingError = (payload: Record<string, any>): void => {\n    const { callsid, voiceeventsid, error } = payload;\n    if (this.parameters.CallSid !== callsid) {\n      this._log.warn(`Received an error from a different callsid: ${callsid}`);\n      return;\n    }\n    if (voiceeventsid && this._messages.has(voiceeventsid)) {\n      // Do not emit an error here. Device is handling all signaling related errors.\n      this._messages.delete(voiceeventsid);\n      this._log.warn(`Received an error while sending a message.`, payload);\n\n      this._publisher.error('call-message', 'error', {\n        code: error.code,\n        message: error.message,\n        voice_event_sid: voiceeventsid,\n      }, this);\n\n      let twilioError;\n      const errorConstructor = getPreciseSignalingErrorByCode(\n        !!this._options.enableImprovedSignalingErrorPrecision,\n        error.code,\n      );\n\n      if (typeof errorConstructor !== 'undefined') {\n        twilioError = new errorConstructor(error);\n      }\n\n      if (!twilioError) {\n        this._log.error('Unknown Call Message Error: ', error);\n        twilioError = new GeneralErrors.UnknownError(error.message, error);\n      }\n\n      this._log.debug('#error', error, twilioError);\n      this.emit('error', twilioError);\n    }\n   }\n\n  /**\n   * Called when signaling is restored\n   */\n  private _onSignalingReconnected = (): void => {\n    if (this._signalingStatus !== Call.State.Reconnecting) {\n      return;\n    }\n    this._log.info('Signaling Connection reestablished.');\n\n    this._signalingStatus = Call.State.Open;\n\n    if (this._mediaStatus === Call.State.Open) {\n      this._publisher.info('connection', 'reconnected', null, this);\n      this._log.debug('#reconnected');\n      this.emit('reconnected');\n      this._status = Call.State.Open;\n    }\n  }\n\n  /**\n   * Called when we receive a transportClose event from pstream.\n   * Re-emits the event.\n   */\n  private _onTransportClose = (): void => {\n    this._log.error('Received transportClose from pstream');\n    this._log.debug('#transportClose');\n    this.emit('transportClose');\n    if (this._signalingReconnectToken) {\n      this._status = Call.State.Reconnecting;\n      this._signalingStatus = Call.State.Reconnecting;\n      this._log.debug('#reconnecting');\n      this.emit('reconnecting', new SignalingErrors.ConnectionDisconnected());\n    } else {\n      this._status = Call.State.Closed;\n      this._signalingStatus = Call.State.Closed;\n    }\n  }\n\n  /**\n   * Post an event to Endpoint Analytics indicating that the end user\n   *   has ignored a request for feedback.\n   */\n  private _postFeedbackDeclined(): Promise<void> {\n    return this._publisher.info('feedback', 'received-none', null, this, true);\n  }\n\n  /**\n   * Publish the current set of queued metrics samples to Insights.\n   */\n  private _publishMetrics(): void {\n    if (this._metricsSamples.length === 0) {\n      return;\n    }\n\n    this._publisher.postMetrics(\n      'quality-metrics-samples', 'metrics-sample', this._metricsSamples.splice(0), this._createMetricPayload(), this,\n    ).catch((e: any) => {\n      this._log.warn('Unable to post metrics to Insights. Received error:', e);\n    });\n  }\n\n  /**\n   * Re-emit an StatsMonitor warning as a {@link Call}.warning or .warning-cleared event.\n   * @param warningData\n   * @param wasCleared - Whether this is a -cleared or -raised event.\n   */\n  private _reemitWarning = (warningData: Record<string, any>, wasCleared?: boolean): void => {\n    const groupPrefix = /^audio/.test(warningData.name) ?\n      'audio-level-' : 'network-quality-';\n\n    const warningPrefix = WARNING_PREFIXES[warningData.threshold.name];\n\n    /**\n     * NOTE: There are two \"packet-loss\" warnings: `high-packet-loss` and\n     * `high-packets-lost-fraction`, so in this case we need to use a different\n     * `WARNING_NAME` mapping.\n     */\n    let warningName: string | undefined;\n    if (warningData.name in MULTIPLE_THRESHOLD_WARNING_NAMES) {\n      warningName = MULTIPLE_THRESHOLD_WARNING_NAMES[warningData.name][warningData.threshold.name];\n    } else if (warningData.name in WARNING_NAMES) {\n      warningName = WARNING_NAMES[warningData.name];\n    }\n\n    const warning: string = warningPrefix + warningName;\n\n    this._emitWarning(groupPrefix, warning, warningData.threshold.value,\n                      warningData.values || warningData.value, wasCleared, warningData);\n  }\n\n  /**\n   * Re-emit an StatsMonitor warning-cleared as a .warning-cleared event.\n   * @param warningData\n   */\n  private _reemitWarningCleared = (warningData: Record<string, any>): void => {\n    this._reemitWarning(warningData, true);\n  }\n\n  /**\n   * Set the CallSid\n   * @param payload\n   */\n  private _setCallSid(payload: Record<string, string>): void {\n    const callSid = payload.callsid;\n    if (!callSid) { return; }\n\n    this.parameters.CallSid = callSid;\n    this._mediaHandler.callSid = callSid;\n  }\n}\n\n/**\n * @mergeModuleWith Call\n */\nnamespace Call {\n  /**\n   * Emitted when the {@link Call} is accepted.\n   * @event\n   * @param call - The {@link Call}.\n   * @example\n   * ```ts\n   * call.on('accept', (call) => { });\n   * ```\n   */\n  export declare function acceptEvent(call: Call): void;\n\n  /**\n   * Emitted after the HTMLAudioElement for the remote audio is created.\n   * @event\n   * @param remoteAudio - The HTMLAudioElement.\n   * @example\n   * ```ts\n   * call.on('audio', (remoteAudio) => { });\n   * ```\n   */\n  export declare function audioEvent(remoteAudio: HTMLAudioElement): void;\n\n  /**\n   * Emitted when the {@link Call} is canceled.\n   * @event\n   * @example\n   * ```ts\n   * call.on('cancel', () => { });\n   * ```\n   */\n  export declare function cancelEvent(): void;\n\n  /**\n   * Emitted when the {@link Call} is disconnected.\n   * @event\n   * @param call - The {@link Call}.\n   * @example\n   * ```ts\n   * call.on('disconnect', (call) => { });\n   * ```\n   */\n  export declare function disconnectEvent(call: Call): void;\n\n  /**\n   * Emitted when the {@link Call} receives an error.\n   * @event\n   * @param error\n   * @example\n   * ```ts\n   * call.on('error', (error) => { });\n   * ```\n   */\n  export declare function errorEvent(error: TwilioError): void;\n\n  /**\n   * Emitted when a Call receives a message from the backend.\n   * <br/><br/>This feature is currently in Beta.\n   * @event\n   * @param message - A message object representing the payload\n   * that was received from the Twilio backend.\n   */\n  export declare function messageReceivedEvent(message: Call.Message): void;\n\n  /**\n   * Emitted after calling the {@link Call.sendMessage} API.\n   * This event indicates that Twilio has received the message.\n   * <br/><br/>This feature is currently in Beta.\n   * @event\n   * @param message - A message object that was sent to the Twilio backend.\n   */\n  export declare function messageSentEvent(message: Call.Message): void;\n\n  /**\n   * Emitted when the {@link Call} is muted or unmuted.\n   * @event\n   * @param isMuted - Whether the {@link Call} is muted.\n   * @param call - The {@link Call}.\n   * @example\n   * ```ts\n   * call.on('mute', (isMuted, call) => { });\n   * ```\n   */\n  export declare function muteEvent(isMuted: boolean, call: Call): void;\n\n  /**\n   * Emitted when the {@link Call} has regained media connectivity.\n   * @event\n   * @example\n   * ```ts\n   * call.on('reconnected', () => { })\n   * ```\n   */\n  export declare function reconnectedEvent(): void;\n\n  /**\n   * Emitted when the {@link Call} has lost media connectivity and is reconnecting.\n   * @event\n   * @param error - The {@link TwilioError} that caused the media connectivity loss\n   * @example\n   * ```ts\n   * call.on('reconnecting', (error) => { });\n   * ```\n   */\n  export declare function reconnectingEvent(error: TwilioError): void;\n\n  /**\n   * Emitted when the {@link Call} is rejected.\n   * @event\n   * @example\n   * ```ts\n   * call.on('reject', () => { })\n   * ```\n   */\n  export declare function rejectEvent(): void;\n\n  /**\n   * Emitted when the {@link Call} has entered the `ringing` state.\n   * When using the Dial verb with `answerOnBridge=true`, the ringing state will begin when\n   * the callee has been notified of the call and will transition into open after the callee accepts the call,\n   * or closed if the call is rejected or cancelled.\n   * @event\n   * @param hasEarlyMedia - Denotes whether there is early media available from the callee.\n   * If `true`, the Client SDK will automatically play the early media. Sometimes this is ringing,\n   * other times it may be an important message about the call. If `false`, there is no remote media to play,\n   * so the application may want to play its own outgoing ringtone sound.\n   * @example\n   * ```ts\n   * call.on('ringing', (hasEarlyMedia) => { });\n   * ```\n   */\n  export declare function ringingEvent(hasEarlyMedia: boolean): void;\n\n  /**\n   * Emitted when the {@link Call} gets a webrtc sample object.\n   * This event is published every second.\n   * @event\n   * @param sample\n   * @example\n   * ```ts\n   * call.on('sample', (sample) => { });\n   * ```\n   */\n  export declare function sampleEvent(sample: RTCSample): void;\n\n  /**\n   * Emitted every 50ms with the current input and output volumes, as a percentage of maximum\n   * volume, between -100dB and -30dB. Represented by a floating point number.\n   * @event\n   * @param inputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @param outputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @example\n   * ```ts\n   * call.on('volume', (inputVolume, outputVolume) => { });\n   * ```\n   */\n  export declare function volumeEvent(inputVolume: number, outputVolume: number): void;\n\n  /**\n   * Emitted when the SDK detects a drop in call quality or other conditions that may indicate\n   * the user is having trouble with the call. You can implement callbacks on these events to\n   * alert the user of an issue.\n   *\n   * To alert the user that an issue has been resolved, you can listen for the `warning-cleared` event,\n   * which indicates that a call quality metric has returned to normal.\n   *\n   * For a full list of conditions that will raise a warning event, check the\n   * [Voice Insights SDK Events Reference](https://www.twilio.com/docs/voice/voice-insights/api/call/details-sdk-call-quality-events) page.\n   *\n   * @event\n   * @param name - The name of the warning\n   * @param data - An object containing data on the warning\n   * @example\n   * ```ts\n   * call.on('warning', (name, data) => { });\n   * ```\n   */\n  export declare function warningEvent(name: string, data: any): void;\n\n  /**\n   * Emitted when a call quality metric has returned to normal.\n   * You can listen for this event to update the user when a call quality issue has been resolved.\n   *\n   * @event\n   * @param name - The name of the warning\n   * @example\n   * ```ts\n   * call.on('warning-cleared', (name) => { });\n   * ```\n   */\n  export declare function warningClearedEvent(name: string): void;\n\n  /**\n   * Possible states of the {@link Call}.\n   */\n  export enum State {\n    Closed = 'closed',\n    Connecting = 'connecting',\n    Open = 'open',\n    Pending = 'pending',\n    Reconnecting = 'reconnecting',\n    Ringing = 'ringing',\n  }\n\n  /**\n   * Different issues that may have been experienced during a call, that can be\n   * reported to Twilio Insights via {@link Call}.postFeedback().\n   */\n  export enum FeedbackIssue {\n    AudioLatency = 'audio-latency',\n    ChoppyAudio = 'choppy-audio',\n    DroppedCall = 'dropped-call',\n    Echo = 'echo',\n    NoisyCall = 'noisy-call',\n    OneWayAudio = 'one-way-audio',\n  }\n\n  /**\n   * A rating of call quality experienced during a call, to be reported to Twilio Insights\n   * via {@link Call}.postFeedback().\n   */\n  export enum FeedbackScore {\n    One = 1,\n    Two,\n    Three,\n    Four,\n    Five,\n  }\n\n  /**\n   * The directionality of the {@link Call}, whether incoming or outgoing.\n   */\n  export enum CallDirection {\n    Incoming = 'INCOMING',\n    Outgoing = 'OUTGOING',\n  }\n\n  /**\n   * Valid audio codecs to use for the media connection.\n   */\n  export enum Codec {\n    Opus = 'opus',\n    PCMU = 'pcmu',\n  }\n\n  /**\n   * Possible ICE Gathering failures\n   */\n  export enum IceGatheringFailureReason {\n    None = 'none',\n    Timeout = 'timeout',\n  }\n\n  /**\n   * Possible media failures\n   */\n  export enum MediaFailure {\n    ConnectionDisconnected = 'ConnectionDisconnected',\n    ConnectionFailed = 'ConnectionFailed',\n    IceGatheringFailed = 'IceGatheringFailed',\n    LowBytes = 'LowBytes',\n  }\n\n  /**\n   * Options to be used to acquire media tracks and connect media.\n   */\n  export interface AcceptOptions {\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor.\n     */\n    rtcConfiguration?: RTCConfiguration;\n\n    /**\n     * MediaStreamConstraints to pass to getUserMedia when making or accepting a Call.\n     */\n    rtcConstraints?: MediaStreamConstraints;\n  }\n\n  /**\n   * A CallerInfo provides caller verification information.\n   */\n  export interface CallerInfo {\n    /**\n     * Whether or not the caller's phone number has been verified by\n     * Twilio using SHAKEN/STIR validation. True if the caller has\n     * been validated at level 'A', false if the caller has been\n     * verified at any lower level or has failed validation.\n     */\n    isVerified: boolean;\n  }\n\n  /**\n   * Mandatory config options to be passed to the {@link Call} constructor.\n   * @internal\n   */\n  export interface Config {\n    /**\n     * An AudioHelper instance to be used for input/output devices.\n     */\n    audioHelper: IAudioHelper;\n\n    /**\n     * Whether or not the browser uses unified-plan SDP by default.\n     */\n    isUnifiedPlanDefault: boolean;\n\n    /**\n     * A function to be called after {@link Call.ignore} is called.\n     */\n    onIgnore: () => void;\n\n    /**\n     * The PStream instance to use for Twilio call signaling.\n     */\n    pstream: IPStream;\n\n    /**\n     * An EventPublisher instance to use for publishing events\n     */\n    publisher: IPublisher;\n\n    /**\n     * A Map of Sounds to play.\n     */\n    soundcache: Map<Device.SoundName, ISound>;\n  }\n\n  /**\n   * A Call Message represents the data that is being transferred between\n   * Twilio and the SDK.\n   */\n  export interface Message {\n    /**\n     * The content of the message which should match the contentType parameter.\n     */\n    content: any;\n\n    /**\n     * The MIME type of the content. The default value is application/json\n     * and is the only contentType that is supported at the moment.\n     */\n    contentType?: string;\n\n    /**\n     * The type of message. Currently, only 'user-defined-message' is supported.\n     * More message types will be added in the future.\n     * See [call resource](https://www.twilio.com/docs/voice/api/call-resource) documentation for more details.\n     */\n    messageType: string;\n\n    /**\n     * An autogenerated id that uniquely identifies the instance of this message.\n     * This is not required when sending a message from the SDK as this is autogenerated.\n     * But it will be available after the message is sent, or when a message is received.\n     */\n    voiceEventSid?: string;\n  }\n\n  /**\n   * Options to be passed to the {@link Call} constructor.\n   * @internal\n   */\n  export interface Options {\n    /**\n     * A method to call before Call.accept is processed.\n     */\n    beforeAccept?: (call: Call) => void;\n\n    /**\n     * Custom format context parameters associated with this call.\n     */\n    callParameters?: Record<string, string>;\n\n    /**\n     * An ordered array of codec names, from most to least preferred.\n     */\n    codecPreferences?: Codec[];\n\n    /**\n     * A mapping of custom sound URLs by sound name.\n     */\n    customSounds?: Partial<Record<Device.SoundName, string>>;\n\n    /**\n     * A DialTone player, to play mock DTMF sounds.\n     */\n    dialtonePlayer?: DialtonePlayer;\n\n    /**\n     * Whether or not to enable DSCP.\n     */\n    dscp?: boolean;\n\n    enableImprovedSignalingErrorPrecision: boolean;\n\n    /**\n     * Experimental feature.\n     * Force Chrome's ICE agent to use aggressive nomination when selecting a candidate pair.\n     */\n    forceAggressiveIceNomination?: boolean;\n\n    /**\n     * The gateway currently connected to.\n     */\n    gateway?: string;\n\n    /**\n     * A method that returns the current input MediaStream set on {@link Device}.\n     */\n    getInputStream?: () => MediaStream;\n\n    /**\n     * A method that returns the current SinkIDs set on {@link Device}.\n     */\n    getSinkIds?: () => string[];\n\n    /**\n     * The maximum average audio bitrate to use, in bits per second (bps) based on\n     * [RFC-7587 7.1](https://tools.ietf.org/html/rfc7587#section-7.1). By default, the setting\n     * is not used. If you specify 0, then the setting is not used. Any positive integer is allowed,\n     * but values outside the range 6000 to 510000 are ignored and treated as 0. The recommended\n     * bitrate for speech is between 8000 and 40000 bps as noted in\n     * [RFC-7587 3.1.1](https://tools.ietf.org/html/rfc7587#section-3.1.1).\n     */\n    maxAverageBitrate?: number;\n\n    /**\n     * Custom MediaHandler (PeerConnection) constructor.\n     */\n    MediaHandler?: IPeerConnection;\n\n    /**\n     * Overrides the native MediaStream class.\n     */\n    MediaStream?: any;\n\n    /**\n     * The offer SDP, if this is an incoming call.\n     */\n    offerSdp?: string | null;\n\n    /**\n     * Whether this is a preflight call or not\n     */\n    preflight?: boolean;\n\n    /**\n     * The callSid to reconnect to.\n     */\n    reconnectCallSid?: string;\n\n    /**\n     * A reconnect token for the {@link Call}. Passed in for incoming {@link Calls}.\n     */\n    reconnectToken?: string;\n\n    /**\n     * An RTCConfiguration to pass to the RTCPeerConnection constructor.\n     */\n    rtcConfiguration?: RTCConfiguration;\n\n    /**\n     * RTC Constraints to pass to getUserMedia when making or accepting a Call.\n     * The format of this object depends on browser.\n     */\n    rtcConstraints?: MediaStreamConstraints;\n\n    /**\n     * The RTCPeerConnection passed to {@link Device} on setup.\n     */\n    RTCPeerConnection?: any;\n\n    /**\n     * Whether the disconnect sound should be played.\n     */\n    shouldPlayDisconnect?: () => boolean;\n\n    /**\n     * An override for the StatsMonitor dependency.\n     */\n    StatsMonitor?: new () => StatsMonitor;\n\n    /**\n     * TwiML params for the call. May be set for either outgoing or incoming calls.\n     */\n    twimlParams?: Record<string, any>;\n\n    /**\n     * Voice event SID generator.\n     */\n    voiceEventSidGenerator?: () => string;\n  }\n\n  /**\n   * Call metrics published to Insight Metrics.\n   * This include rtc samples and audio information.\n   * @internal\n   */\n  export interface CallMetrics extends RTCSample {\n    /**\n     * Percentage of maximum volume, between 0.0 to 1.0, representing -100 to -30 dB.\n     */\n    inputVolume: number;\n\n    /**\n     * Percentage of maximum volume, between 0.0 to 1.0, representing -100 to -30 dB.\n     */\n    outputVolume: number;\n  }\n}\n\nfunction generateTempCallSid() {\n  return 'TJSxxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    /* tslint:disable:no-bitwise */\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    /* tslint:enable:no-bitwise */\n    return v.toString(16);\n  });\n}\n\nexport default Call;\n", "import AudioProcessor from './twilio/audioprocessor';\nimport Call from './twilio/call';\nimport Device from './twilio/device';\nimport { Logger } from './twilio/log';\n\nimport { PreflightTest } from './twilio/preflight/preflight';\nimport type { NetworkTiming, TimeMeasurement } from './twilio/preflight/timing';\n\n// TODO: Consider refactoring this export (VBLOCKS-4589)\nimport * as TwilioError from './twilio/errors';\n\nimport type AudioHelper from './twilio/audiohelper';\n\nimport type OutputDeviceCollection from './twilio/outputdevicecollection';\n\nimport type { Edge } from './twilio/regions';\n\nimport RTCSample from './twilio/rtc/sample';\nimport { RTCSampleTotals } from './twilio/rtc/sample';\n\nimport RTCWarning from './twilio/rtc/warning';\nimport { ThresholdWarningData } from './twilio/rtc/warning';\n\nexport { AudioProcessor, Call, Device, PreflightTest, Logger, TwilioError };\nexport type { AudioHelper, Edge, OutputDeviceCollection, NetworkTiming, RTCSample, RTCSampleTotals, RTCWarning, TimeMeasurement, ThresholdWarningData };\n"],
  "mappings": "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",
  "names": ["ReflectApply", "ReflectOwnKeys", "NumberIsNaN", "once", "Backoff", "TwilioError", "AuthorizationErrors", "AccessTokenInvalid", "AccessTokenExpired", "AuthenticationFailed", "SignatureValidationErrors", "AccessTokenSignatureValidationFailed", "ClientErrors", "BadRequest", "NotFound", "TemporarilyUnavailable", "BusyHere", "SIPServerErrors", "Decline", "GeneralErrors", "UnknownError", "ApplicationNotFoundError", "ConnectionDeclinedError", "ConnectionTimeoutError", "ConnectionError", "CallCancelledError", "TransportError", "MalformedRequestErrors", "MalformedRequestError", "MissingParameterArrayError", "AuthorizationTokenMissingError", "MaxParameterLengthExceededError", "InvalidBridgeTokenError", "InvalidClientNameError", "ReconnectParameterInvalidError", "AuthorizationError", "NoValidAccountError", "InvalidJWTTokenError", "JWTTokenExpiredError", "RateExceededError", "JWTTokenExpirationTooLongError", "ReconnectAttemptError", "CallMessageEventTypeInvalidError", "PayloadSizeExceededError", "UserMediaErrors", "PermissionDeniedError", "AcquisitionFailedError", "SignalingErrors", "ConnectionDisconnected", "MediaErrors", "ClientLocalDescFailed", "ClientRemoteDescFailed", "InvalidArgumentError", "InvalidStateError", "NotSupportedError", "Log", "OutputDeviceCollection", "MediaDeviceInfoShim", "navigator", "window", "AudioHelper", "_a", "_this", "AudioProcessorEventObserver", "DialtonePlayer", "EventPublisher", "PreflightTest", "CallQuality", "Events", "Status", "WSTransportState", "WSTransport", "PStream", "Edge", "Region", "AudioContext", "message", "Deferred", "AsyncQueue", "Deferred", "EventTarget", "AudioPlayer", "Device", "_a", "_this", "_b", "_c", "EventName", "State", "SoundName", "IceCandidate", "StatsMonitor", "Call", "message", "State", "FeedbackIssue", "FeedbackScore", "CallDirection", "Codec", "IceGatheringFailureReason", "MediaFailure"]
}
